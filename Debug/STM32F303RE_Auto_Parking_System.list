
STM32F303RE_Auto_Parking_System.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf60  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  0800c100  0800c100  0001c100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c4fc  0800c4fc  000200e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800c4fc  0800c4fc  000200e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c4fc  0800c4fc  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c4fc  0800c4fc  0001c4fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c500  0800c500  0001c500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  0800c504  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200e8  2**0
                  CONTENTS
 10 .bss          00002754  200000e8  200000e8  000200e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000283c  2000283c  000200e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 13 .comment      00000086  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001faf1  00000000  00000000  0002019e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000490b  00000000  00000000  0003fc8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001798  00000000  00000000  000445a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001238  00000000  00000000  00045d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000254ae  00000000  00000000  00046f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00020099  00000000  00000000  0006c41e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d776f  00000000  00000000  0008c4b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00006820  00000000  00000000  00163c28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  0016a448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000e8 	.word	0x200000e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c0e8 	.word	0x0800c0e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000ec 	.word	0x200000ec
 80001dc:	0800c0e8 	.word	0x0800c0e8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of Car_Conrol_Mode */
  Car_Conrol_ModeHandle = osMutexNew(&Car_Conrol_Mode_attributes);
 8000284:	4819      	ldr	r0, [pc, #100]	; (80002ec <MX_FREERTOS_Init+0x6c>)
 8000286:	f007 ff59 	bl	800813c <osMutexNew>
 800028a:	4603      	mov	r3, r0
 800028c:	4a18      	ldr	r2, [pc, #96]	; (80002f0 <MX_FREERTOS_Init+0x70>)
 800028e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(DefaultTask, NULL, &defaultTask_attributes);
 8000290:	4a18      	ldr	r2, [pc, #96]	; (80002f4 <MX_FREERTOS_Init+0x74>)
 8000292:	2100      	movs	r1, #0
 8000294:	4818      	ldr	r0, [pc, #96]	; (80002f8 <MX_FREERTOS_Init+0x78>)
 8000296:	f007 fcfd 	bl	8007c94 <osThreadNew>
 800029a:	4603      	mov	r3, r0
 800029c:	4a17      	ldr	r2, [pc, #92]	; (80002fc <MX_FREERTOS_Init+0x7c>)
 800029e:	6013      	str	r3, [r2, #0]

  /* creation of ultrasonics_read */
  ultrasonics_readHandle = osThreadNew(RTOS_Ultrasonics_Read, NULL, &ultrasonics_read_attributes);
 80002a0:	4a17      	ldr	r2, [pc, #92]	; (8000300 <MX_FREERTOS_Init+0x80>)
 80002a2:	2100      	movs	r1, #0
 80002a4:	4817      	ldr	r0, [pc, #92]	; (8000304 <MX_FREERTOS_Init+0x84>)
 80002a6:	f007 fcf5 	bl	8007c94 <osThreadNew>
 80002aa:	4603      	mov	r3, r0
 80002ac:	4a16      	ldr	r2, [pc, #88]	; (8000308 <MX_FREERTOS_Init+0x88>)
 80002ae:	6013      	str	r3, [r2, #0]

  /* creation of car_next_step */
  car_next_stepHandle = osThreadNew(RTOS_Car_Next_Step, NULL, &car_next_step_attributes);
 80002b0:	4a16      	ldr	r2, [pc, #88]	; (800030c <MX_FREERTOS_Init+0x8c>)
 80002b2:	2100      	movs	r1, #0
 80002b4:	4816      	ldr	r0, [pc, #88]	; (8000310 <MX_FREERTOS_Init+0x90>)
 80002b6:	f007 fced 	bl	8007c94 <osThreadNew>
 80002ba:	4603      	mov	r3, r0
 80002bc:	4a15      	ldr	r2, [pc, #84]	; (8000314 <MX_FREERTOS_Init+0x94>)
 80002be:	6013      	str	r3, [r2, #0]

  /* creation of Automatic_Parking */
  Automatic_ParkingHandle = osThreadNew(RTOS_Automatic_Parking, NULL, &Automatic_Parking_attributes);
 80002c0:	4a15      	ldr	r2, [pc, #84]	; (8000318 <MX_FREERTOS_Init+0x98>)
 80002c2:	2100      	movs	r1, #0
 80002c4:	4815      	ldr	r0, [pc, #84]	; (800031c <MX_FREERTOS_Init+0x9c>)
 80002c6:	f007 fce5 	bl	8007c94 <osThreadNew>
 80002ca:	4603      	mov	r3, r0
 80002cc:	4a14      	ldr	r2, [pc, #80]	; (8000320 <MX_FREERTOS_Init+0xa0>)
 80002ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of Car_mode */
  Car_modeHandle = osEventFlagsNew(&Car_mode_attributes);
 80002d0:	4814      	ldr	r0, [pc, #80]	; (8000324 <MX_FREERTOS_Init+0xa4>)
 80002d2:	f007 fe11 	bl	8007ef8 <osEventFlagsNew>
 80002d6:	4603      	mov	r3, r0
 80002d8:	4a13      	ldr	r2, [pc, #76]	; (8000328 <MX_FREERTOS_Init+0xa8>)
 80002da:	6013      	str	r3, [r2, #0]

  /* creation of Parking_side */
  Parking_sideHandle = osEventFlagsNew(&Parking_side_attributes);
 80002dc:	4813      	ldr	r0, [pc, #76]	; (800032c <MX_FREERTOS_Init+0xac>)
 80002de:	f007 fe0b 	bl	8007ef8 <osEventFlagsNew>
 80002e2:	4603      	mov	r3, r0
 80002e4:	4a12      	ldr	r2, [pc, #72]	; (8000330 <MX_FREERTOS_Init+0xb0>)
 80002e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80002e8:	bf00      	nop
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	0800c460 	.word	0x0800c460
 80002f0:	20000114 	.word	0x20000114
 80002f4:	0800c3d0 	.word	0x0800c3d0
 80002f8:	08000335 	.word	0x08000335
 80002fc:	20000104 	.word	0x20000104
 8000300:	0800c3f4 	.word	0x0800c3f4
 8000304:	08000371 	.word	0x08000371
 8000308:	20000108 	.word	0x20000108
 800030c:	0800c418 	.word	0x0800c418
 8000310:	08000401 	.word	0x08000401
 8000314:	2000010c 	.word	0x2000010c
 8000318:	0800c43c 	.word	0x0800c43c
 800031c:	08000485 	.word	0x08000485
 8000320:	20000110 	.word	0x20000110
 8000324:	0800c470 	.word	0x0800c470
 8000328:	20000118 	.word	0x20000118
 800032c:	0800c480 	.word	0x0800c480
 8000330:	2000011c 	.word	0x2000011c

08000334 <DefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_DefaultTask */
void DefaultTask(void *argument)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DefaultTask */
	ECU_Bluetooth_ReciveData(&bluetooth);
 800033c:	4809      	ldr	r0, [pc, #36]	; (8000364 <DefaultTask+0x30>)
 800033e:	f001 fd39 	bl	8001db4 <ECU_Bluetooth_ReciveData>

	ECU_Motor_GeneratePWM(&moving_motor);
 8000342:	4809      	ldr	r0, [pc, #36]	; (8000368 <DefaultTask+0x34>)
 8000344:	f001 fd50 	bl	8001de8 <ECU_Motor_GeneratePWM>
	//ECU_Motor_GeneratePWM(&steering_motor);

  /* Infinite loop */
  for(;;)
  {
	  printf("DefaultTask is Running\n");
 8000348:	4808      	ldr	r0, [pc, #32]	; (800036c <DefaultTask+0x38>)
 800034a:	f00a ffff 	bl	800b34c <puts>
	  /* Suspend itself */
	  osThreadSuspend(osThreadGetId());
 800034e:	f007 fd4b 	bl	8007de8 <osThreadGetId>
 8000352:	4603      	mov	r3, r0
 8000354:	4618      	mov	r0, r3
 8000356:	f007 fd6d 	bl	8007e34 <osThreadSuspend>
    osDelay(1000);
 800035a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800035e:	f007 fd9d 	bl	8007e9c <osDelay>
	  printf("DefaultTask is Running\n");
 8000362:	e7f1      	b.n	8000348 <DefaultTask+0x14>
 8000364:	20000058 	.word	0x20000058
 8000368:	20000048 	.word	0x20000048
 800036c:	0800c170 	.word	0x0800c170

08000370 <RTOS_Ultrasonics_Read>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTOS_Ultrasonics_Read */
void RTOS_Ultrasonics_Read(void *argument)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RTOS_Ultrasonics_Read */
  /* Infinite loop */
  for(;;)
  {
	  ECU_Ultrasonic_Read(&Front_ultrasonic);
 8000378:	4816      	ldr	r0, [pc, #88]	; (80003d4 <RTOS_Ultrasonics_Read+0x64>)
 800037a:	f002 f893 	bl	80024a4 <ECU_Ultrasonic_Read>
	  printf("Front_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[FRONT_ULTRASONIC_INDEX]);
 800037e:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <RTOS_Ultrasonics_Read+0x68>)
 8000380:	681b      	ldr	r3, [r3, #0]
 8000382:	4619      	mov	r1, r3
 8000384:	4815      	ldr	r0, [pc, #84]	; (80003dc <RTOS_Ultrasonics_Read+0x6c>)
 8000386:	f00a ff7b 	bl	800b280 <iprintf>

	  ECU_Ultrasonic_Read(&RightFront_ultrasonic);
 800038a:	4815      	ldr	r0, [pc, #84]	; (80003e0 <RTOS_Ultrasonics_Read+0x70>)
 800038c:	f002 f88a 	bl	80024a4 <ECU_Ultrasonic_Read>
	  printf("RightFront_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX]);
 8000390:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <RTOS_Ultrasonics_Read+0x68>)
 8000392:	685b      	ldr	r3, [r3, #4]
 8000394:	4619      	mov	r1, r3
 8000396:	4813      	ldr	r0, [pc, #76]	; (80003e4 <RTOS_Ultrasonics_Read+0x74>)
 8000398:	f00a ff72 	bl	800b280 <iprintf>

	  ECU_Ultrasonic_Read(&RightRear_ultrasonic);
 800039c:	4812      	ldr	r0, [pc, #72]	; (80003e8 <RTOS_Ultrasonics_Read+0x78>)
 800039e:	f002 f881 	bl	80024a4 <ECU_Ultrasonic_Read>
	  printf("RightRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX]);
 80003a2:	4b0d      	ldr	r3, [pc, #52]	; (80003d8 <RTOS_Ultrasonics_Read+0x68>)
 80003a4:	689b      	ldr	r3, [r3, #8]
 80003a6:	4619      	mov	r1, r3
 80003a8:	4810      	ldr	r0, [pc, #64]	; (80003ec <RTOS_Ultrasonics_Read+0x7c>)
 80003aa:	f00a ff69 	bl	800b280 <iprintf>

	  ECU_Ultrasonic_Read(&LeftFront_ultrasonic);
 80003ae:	4810      	ldr	r0, [pc, #64]	; (80003f0 <RTOS_Ultrasonics_Read+0x80>)
 80003b0:	f002 f878 	bl	80024a4 <ECU_Ultrasonic_Read>
	  //printf("LeftFront_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX]);

	  ECU_Ultrasonic_Read(&LeftRear_ultrasonic);
 80003b4:	480f      	ldr	r0, [pc, #60]	; (80003f4 <RTOS_Ultrasonics_Read+0x84>)
 80003b6:	f002 f875 	bl	80024a4 <ECU_Ultrasonic_Read>
	  //printf("LeftRear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX]);

	  ECU_Ultrasonic_Read(&Rear_ultrasonic);
 80003ba:	480f      	ldr	r0, [pc, #60]	; (80003f8 <RTOS_Ultrasonics_Read+0x88>)
 80003bc:	f002 f872 	bl	80024a4 <ECU_Ultrasonic_Read>
	  printf("Rear_ultrasonic distance is %lu\n",ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX]);
 80003c0:	4b05      	ldr	r3, [pc, #20]	; (80003d8 <RTOS_Ultrasonics_Read+0x68>)
 80003c2:	695b      	ldr	r3, [r3, #20]
 80003c4:	4619      	mov	r1, r3
 80003c6:	480d      	ldr	r0, [pc, #52]	; (80003fc <RTOS_Ultrasonics_Read+0x8c>)
 80003c8:	f00a ff5a 	bl	800b280 <iprintf>

    osDelay(90);
 80003cc:	205a      	movs	r0, #90	; 0x5a
 80003ce:	f007 fd65 	bl	8007e9c <osDelay>
	  ECU_Ultrasonic_Read(&Front_ultrasonic);
 80003d2:	e7d1      	b.n	8000378 <RTOS_Ultrasonics_Read+0x8>
 80003d4:	20000000 	.word	0x20000000
 80003d8:	20000498 	.word	0x20000498
 80003dc:	0800c188 	.word	0x0800c188
 80003e0:	2000000c 	.word	0x2000000c
 80003e4:	0800c1ac 	.word	0x0800c1ac
 80003e8:	20000018 	.word	0x20000018
 80003ec:	0800c1d4 	.word	0x0800c1d4
 80003f0:	20000024 	.word	0x20000024
 80003f4:	20000030 	.word	0x20000030
 80003f8:	2000003c 	.word	0x2000003c
 80003fc:	0800c1fc 	.word	0x0800c1fc

08000400 <RTOS_Car_Next_Step>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTOS_Car_Next_Step */
void RTOS_Car_Next_Step(void *argument)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RTOS_Car_Next_Step */
  /* Infinite loop */
  for(;;)
  {
	  //printf("RTOS_Car_Next_Step is Running\n");
	  if( (Bluetooth_RX_Data == AUTO_PARK_RIGHT) ){
 8000408:	4b1a      	ldr	r3, [pc, #104]	; (8000474 <RTOS_Car_Next_Step+0x74>)
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	2b57      	cmp	r3, #87	; 0x57
 800040e:	d10c      	bne.n	800042a <RTOS_Car_Next_Step+0x2a>
		  //osMutexAcquire(Car_Conrol_ModeHandle, 10U);
		  osEventFlagsSet(Car_modeHandle, CAR_CONTROL_BIT);
 8000410:	4b19      	ldr	r3, [pc, #100]	; (8000478 <RTOS_Car_Next_Step+0x78>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	2101      	movs	r1, #1
 8000416:	4618      	mov	r0, r3
 8000418:	f007 fdc0 	bl	8007f9c <osEventFlagsSet>
		  osEventFlagsClear(Car_modeHandle, PARKING_SIDE_BIT);
 800041c:	4b16      	ldr	r3, [pc, #88]	; (8000478 <RTOS_Car_Next_Step+0x78>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	2102      	movs	r1, #2
 8000422:	4618      	mov	r0, r3
 8000424:	f007 fe12 	bl	800804c <osEventFlagsClear>
 8000428:	e00f      	b.n	800044a <RTOS_Car_Next_Step+0x4a>
	  }
	  else if( (Bluetooth_RX_Data == AUTO_PARK_LEFT) ){
 800042a:	4b12      	ldr	r3, [pc, #72]	; (8000474 <RTOS_Car_Next_Step+0x74>)
 800042c:	781b      	ldrb	r3, [r3, #0]
 800042e:	2b55      	cmp	r3, #85	; 0x55
 8000430:	d10b      	bne.n	800044a <RTOS_Car_Next_Step+0x4a>
		  osEventFlagsSet(Car_modeHandle, CAR_CONTROL_BIT);
 8000432:	4b11      	ldr	r3, [pc, #68]	; (8000478 <RTOS_Car_Next_Step+0x78>)
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	2101      	movs	r1, #1
 8000438:	4618      	mov	r0, r3
 800043a:	f007 fdaf 	bl	8007f9c <osEventFlagsSet>
		  osEventFlagsSet(Car_modeHandle, PARKING_SIDE_BIT);
 800043e:	4b0e      	ldr	r3, [pc, #56]	; (8000478 <RTOS_Car_Next_Step+0x78>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2102      	movs	r1, #2
 8000444:	4618      	mov	r0, r3
 8000446:	f007 fda9 	bl	8007f9c <osEventFlagsSet>
	  }
	  else{/* DO NOTHING */}

	  if( (osEventFlagsGet(Car_modeHandle) & CAR_CONTROL_BIT) == STD_IDLE){
 800044a:	4b0b      	ldr	r3, [pc, #44]	; (8000478 <RTOS_Car_Next_Step+0x78>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4618      	mov	r0, r3
 8000450:	f007 fe40 	bl	80080d4 <osEventFlagsGet>
 8000454:	4603      	mov	r3, r0
 8000456:	f003 0301 	and.w	r3, r3, #1
 800045a:	2b00      	cmp	r3, #0
 800045c:	d106      	bne.n	800046c <RTOS_Car_Next_Step+0x6c>
		  printf("Mobile Control Mode\n");
 800045e:	4807      	ldr	r0, [pc, #28]	; (800047c <RTOS_Car_Next_Step+0x7c>)
 8000460:	f00a ff74 	bl	800b34c <puts>
		  ECU_Motor_NextStep(&moving_motor, &Bluetooth_RX_Data);
 8000464:	4903      	ldr	r1, [pc, #12]	; (8000474 <RTOS_Car_Next_Step+0x74>)
 8000466:	4806      	ldr	r0, [pc, #24]	; (8000480 <RTOS_Car_Next_Step+0x80>)
 8000468:	f001 fd6c 	bl	8001f44 <ECU_Motor_NextStep>
	  }
	  else{/* DO NOTHING */}

	  osDelay(100);
 800046c:	2064      	movs	r0, #100	; 0x64
 800046e:	f007 fd15 	bl	8007e9c <osDelay>
	  if( (Bluetooth_RX_Data == AUTO_PARK_RIGHT) ){
 8000472:	e7c9      	b.n	8000408 <RTOS_Car_Next_Step+0x8>
 8000474:	20000064 	.word	0x20000064
 8000478:	20000118 	.word	0x20000118
 800047c:	0800c220 	.word	0x0800c220
 8000480:	20000048 	.word	0x20000048

08000484 <RTOS_Automatic_Parking>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RTOS_Automatic_Parking */
void RTOS_Automatic_Parking(void *argument)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RTOS_Automatic_Parking */
  /* Infinite loop */
  for(;;)
  {
	  if( (Bluetooth_RX_Data == AUTO_PARK_OFF) ){
 800048c:	4b4a      	ldr	r3, [pc, #296]	; (80005b8 <RTOS_Automatic_Parking+0x134>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	2b77      	cmp	r3, #119	; 0x77
 8000492:	d105      	bne.n	80004a0 <RTOS_Automatic_Parking+0x1c>
		  //osMutexRelease(Car_Conrol_ModeHandle);
		  osEventFlagsClear(Car_modeHandle, CAR_CONTROL_BIT);
 8000494:	4b49      	ldr	r3, [pc, #292]	; (80005bc <RTOS_Automatic_Parking+0x138>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	2101      	movs	r1, #1
 800049a:	4618      	mov	r0, r3
 800049c:	f007 fdd6 	bl	800804c <osEventFlagsClear>
	  }
	  else{/* DO NOTHING */}

	  if( (osEventFlagsGet(Car_modeHandle) & CAR_CONTROL_BIT) == STD_ACTIVE){
 80004a0:	4b46      	ldr	r3, [pc, #280]	; (80005bc <RTOS_Automatic_Parking+0x138>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4618      	mov	r0, r3
 80004a6:	f007 fe15 	bl	80080d4 <osEventFlagsGet>
 80004aa:	4603      	mov	r3, r0
 80004ac:	f003 0301 	and.w	r3, r3, #1
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	d17d      	bne.n	80005b0 <RTOS_Automatic_Parking+0x12c>
		  printf("-------------------------- Automatic Parking Mode ----------------------\n");
 80004b4:	4842      	ldr	r0, [pc, #264]	; (80005c0 <RTOS_Automatic_Parking+0x13c>)
 80004b6:	f00a ff49 	bl	800b34c <puts>
		  ECU_Motor_ChangeSpeed(&moving_motor, &low_speed);
 80004ba:	4942      	ldr	r1, [pc, #264]	; (80005c4 <RTOS_Automatic_Parking+0x140>)
 80004bc:	4842      	ldr	r0, [pc, #264]	; (80005c8 <RTOS_Automatic_Parking+0x144>)
 80004be:	f001 fd23 	bl	8001f08 <ECU_Motor_ChangeSpeed>
		  /* Select Right Side to Park */
		  if((osEventFlagsGet(Car_modeHandle) & PARKING_SIDE_BIT) == (STD_IDLE << PARKING_SIDE_BIT)){
 80004c2:	4b3e      	ldr	r3, [pc, #248]	; (80005bc <RTOS_Automatic_Parking+0x138>)
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	4618      	mov	r0, r3
 80004c8:	f007 fe04 	bl	80080d4 <osEventFlagsGet>
 80004cc:	4603      	mov	r3, r0
 80004ce:	f003 0302 	and.w	r3, r3, #2
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d135      	bne.n	8000542 <RTOS_Automatic_Parking+0xbe>
			  printf("Park Right Side\n");
 80004d6:	483d      	ldr	r0, [pc, #244]	; (80005cc <RTOS_Automatic_Parking+0x148>)
 80004d8:	f00a ff38 	bl	800b34c <puts>
			  ECU_Motor_MoveForward(&moving_motor);
 80004dc:	483a      	ldr	r0, [pc, #232]	; (80005c8 <RTOS_Automatic_Parking+0x144>)
 80004de:	f001 fded 	bl	80020bc <ECU_Motor_MoveForward>
			  while((ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] < 16) || (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] < 16)){
 80004e2:	e002      	b.n	80004ea <RTOS_Automatic_Parking+0x66>

				  printf("Searching for Empty Slot\n");
 80004e4:	483a      	ldr	r0, [pc, #232]	; (80005d0 <RTOS_Automatic_Parking+0x14c>)
 80004e6:	f00a ff31 	bl	800b34c <puts>
			  while((ultrasonic_Distance_Values[RIGHT_FRONT_ULTRASONIC_INDEX] < 16) || (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] < 16)){
 80004ea:	4b3a      	ldr	r3, [pc, #232]	; (80005d4 <RTOS_Automatic_Parking+0x150>)
 80004ec:	685b      	ldr	r3, [r3, #4]
 80004ee:	2b0f      	cmp	r3, #15
 80004f0:	d9f8      	bls.n	80004e4 <RTOS_Automatic_Parking+0x60>
 80004f2:	4b38      	ldr	r3, [pc, #224]	; (80005d4 <RTOS_Automatic_Parking+0x150>)
 80004f4:	689b      	ldr	r3, [r3, #8]
 80004f6:	2b0f      	cmp	r3, #15
 80004f8:	d9f4      	bls.n	80004e4 <RTOS_Automatic_Parking+0x60>
			  }
			  printf("Found the Empty Slot\n");
 80004fa:	4837      	ldr	r0, [pc, #220]	; (80005d8 <RTOS_Automatic_Parking+0x154>)
 80004fc:	f00a ff26 	bl	800b34c <puts>
			  /* Delay to let the car move Forward to half the car length */
			  HAL_Delay(500);
 8000500:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000504:	f002 f93a 	bl	800277c <HAL_Delay>
			  ECU_Motor_Stop(&moving_motor);
 8000508:	482f      	ldr	r0, [pc, #188]	; (80005c8 <RTOS_Automatic_Parking+0x144>)
 800050a:	f001 fedf 	bl	80022cc <ECU_Motor_Stop>
			  HAL_Delay(500);
 800050e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000512:	f002 f933 	bl	800277c <HAL_Delay>
			  ECU_Motor_MoveReverseRight(&moving_motor);
 8000516:	482c      	ldr	r0, [pc, #176]	; (80005c8 <RTOS_Automatic_Parking+0x144>)
 8000518:	f001 fe74 	bl	8002204 <ECU_Motor_MoveReverseRight>
			  while((ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 12) && (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > 7)){
 800051c:	e002      	b.n	8000524 <RTOS_Automatic_Parking+0xa0>
				  printf("try to Park 1 Reverse Right\n");
 800051e:	482f      	ldr	r0, [pc, #188]	; (80005dc <RTOS_Automatic_Parking+0x158>)
 8000520:	f00a ff14 	bl	800b34c <puts>
			  while((ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 12) && (ultrasonic_Distance_Values[RIGHT_REAR_ULTRASONIC_INDEX] > 7)){
 8000524:	4b2b      	ldr	r3, [pc, #172]	; (80005d4 <RTOS_Automatic_Parking+0x150>)
 8000526:	695b      	ldr	r3, [r3, #20]
 8000528:	2b0c      	cmp	r3, #12
 800052a:	d903      	bls.n	8000534 <RTOS_Automatic_Parking+0xb0>
 800052c:	4b29      	ldr	r3, [pc, #164]	; (80005d4 <RTOS_Automatic_Parking+0x150>)
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	2b07      	cmp	r3, #7
 8000532:	d8f4      	bhi.n	800051e <RTOS_Automatic_Parking+0x9a>
			  }
			  //ECU_Motor_Stop(&moving_motor);
			  //HAL_Delay(50);
			  //ECU_Motor_MoveReverse(&moving_motor);
			  //HAL_Delay(150);
			  ECU_Motor_Stop(&moving_motor);
 8000534:	4824      	ldr	r0, [pc, #144]	; (80005c8 <RTOS_Automatic_Parking+0x144>)
 8000536:	f001 fec9 	bl	80022cc <ECU_Motor_Stop>
			  HAL_Delay(50);
 800053a:	2032      	movs	r0, #50	; 0x32
 800053c:	f002 f91e 	bl	800277c <HAL_Delay>
			  while(1){};
 8000540:	e7fe      	b.n	8000540 <RTOS_Automatic_Parking+0xbc>
			  osEventFlagsClear(Car_modeHandle, CAR_CONTROL_BIT);


		  }
		  /* Select Left Side to Park */
		  else if((osEventFlagsGet(Car_modeHandle) & PARKING_SIDE_BIT) || (STD_ACTIVE << PARKING_SIDE_BIT)){
 8000542:	4b1e      	ldr	r3, [pc, #120]	; (80005bc <RTOS_Automatic_Parking+0x138>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4618      	mov	r0, r3
 8000548:	f007 fdc4 	bl	80080d4 <osEventFlagsGet>
			  printf("Park Left Side\n");
 800054c:	4824      	ldr	r0, [pc, #144]	; (80005e0 <RTOS_Automatic_Parking+0x15c>)
 800054e:	f00a fefd 	bl	800b34c <puts>
			  while((ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] < 16) && (ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] < 16)){
 8000552:	e002      	b.n	800055a <RTOS_Automatic_Parking+0xd6>
				  ECU_Motor_MoveForward(&moving_motor);
 8000554:	481c      	ldr	r0, [pc, #112]	; (80005c8 <RTOS_Automatic_Parking+0x144>)
 8000556:	f001 fdb1 	bl	80020bc <ECU_Motor_MoveForward>
			  while((ultrasonic_Distance_Values[LEFT_FRONT_ULTRASONIC_INDEX] < 16) && (ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] < 16)){
 800055a:	4b1e      	ldr	r3, [pc, #120]	; (80005d4 <RTOS_Automatic_Parking+0x150>)
 800055c:	68db      	ldr	r3, [r3, #12]
 800055e:	2b0f      	cmp	r3, #15
 8000560:	d803      	bhi.n	800056a <RTOS_Automatic_Parking+0xe6>
 8000562:	4b1c      	ldr	r3, [pc, #112]	; (80005d4 <RTOS_Automatic_Parking+0x150>)
 8000564:	691b      	ldr	r3, [r3, #16]
 8000566:	2b0f      	cmp	r3, #15
 8000568:	d9f4      	bls.n	8000554 <RTOS_Automatic_Parking+0xd0>
			  }
			  /* Delay to let the car move Forward to half the car length */
			  HAL_Delay(50);
 800056a:	2032      	movs	r0, #50	; 0x32
 800056c:	f002 f906 	bl	800277c <HAL_Delay>
			  ECU_Motor_Stop(&moving_motor);
 8000570:	4815      	ldr	r0, [pc, #84]	; (80005c8 <RTOS_Automatic_Parking+0x144>)
 8000572:	f001 feab 	bl	80022cc <ECU_Motor_Stop>
			  while(ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 3){
 8000576:	e002      	b.n	800057e <RTOS_Automatic_Parking+0xfa>
				  ECU_Motor_MoveReverseLeft(&moving_motor);
 8000578:	4813      	ldr	r0, [pc, #76]	; (80005c8 <RTOS_Automatic_Parking+0x144>)
 800057a:	f001 fe77 	bl	800226c <ECU_Motor_MoveReverseLeft>
			  while(ultrasonic_Distance_Values[REAR_ULTRASONIC_INDEX] > 3){
 800057e:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <RTOS_Automatic_Parking+0x150>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	2b03      	cmp	r3, #3
 8000584:	d8f8      	bhi.n	8000578 <RTOS_Automatic_Parking+0xf4>
			  }
			  ECU_Motor_Stop(&moving_motor);
 8000586:	4810      	ldr	r0, [pc, #64]	; (80005c8 <RTOS_Automatic_Parking+0x144>)
 8000588:	f001 fea0 	bl	80022cc <ECU_Motor_Stop>
			  while(ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > 3){
 800058c:	e002      	b.n	8000594 <RTOS_Automatic_Parking+0x110>
				  ECU_Motor_MoveReverseRight(&moving_motor);
 800058e:	480e      	ldr	r0, [pc, #56]	; (80005c8 <RTOS_Automatic_Parking+0x144>)
 8000590:	f001 fe38 	bl	8002204 <ECU_Motor_MoveReverseRight>
			  while(ultrasonic_Distance_Values[LEFT_REAR_ULTRASONIC_INDEX] > 3){
 8000594:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <RTOS_Automatic_Parking+0x150>)
 8000596:	691b      	ldr	r3, [r3, #16]
 8000598:	2b03      	cmp	r3, #3
 800059a:	d8f8      	bhi.n	800058e <RTOS_Automatic_Parking+0x10a>
			  }

			  ECU_Motor_ChangeSpeed(&moving_motor, &medium_speed);
 800059c:	4911      	ldr	r1, [pc, #68]	; (80005e4 <RTOS_Automatic_Parking+0x160>)
 800059e:	480a      	ldr	r0, [pc, #40]	; (80005c8 <RTOS_Automatic_Parking+0x144>)
 80005a0:	f001 fcb2 	bl	8001f08 <ECU_Motor_ChangeSpeed>
			  osEventFlagsClear(Car_modeHandle, CAR_CONTROL_BIT);
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <RTOS_Automatic_Parking+0x138>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2101      	movs	r1, #1
 80005aa:	4618      	mov	r0, r3
 80005ac:	f007 fd4e 	bl	800804c <osEventFlagsClear>
		  else{/* DO NOTHING */}


	  }
	  else{/* DO NOTHING */}
    osDelay(200);
 80005b0:	20c8      	movs	r0, #200	; 0xc8
 80005b2:	f007 fc73 	bl	8007e9c <osDelay>
	  if( (Bluetooth_RX_Data == AUTO_PARK_OFF) ){
 80005b6:	e769      	b.n	800048c <RTOS_Automatic_Parking+0x8>
 80005b8:	20000064 	.word	0x20000064
 80005bc:	20000118 	.word	0x20000118
 80005c0:	0800c234 	.word	0x0800c234
 80005c4:	20000078 	.word	0x20000078
 80005c8:	20000048 	.word	0x20000048
 80005cc:	0800c280 	.word	0x0800c280
 80005d0:	0800c290 	.word	0x0800c290
 80005d4:	20000498 	.word	0x20000498
 80005d8:	0800c2ac 	.word	0x0800c2ac
 80005dc:	0800c2c4 	.word	0x0800c2c4
 80005e0:	0800c2e0 	.word	0x0800c2e0
 80005e4:	20000070 	.word	0x20000070

080005e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b08a      	sub	sp, #40	; 0x28
 80005ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fe:	4b41      	ldr	r3, [pc, #260]	; (8000704 <MX_GPIO_Init+0x11c>)
 8000600:	695b      	ldr	r3, [r3, #20]
 8000602:	4a40      	ldr	r2, [pc, #256]	; (8000704 <MX_GPIO_Init+0x11c>)
 8000604:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000608:	6153      	str	r3, [r2, #20]
 800060a:	4b3e      	ldr	r3, [pc, #248]	; (8000704 <MX_GPIO_Init+0x11c>)
 800060c:	695b      	ldr	r3, [r3, #20]
 800060e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000616:	4b3b      	ldr	r3, [pc, #236]	; (8000704 <MX_GPIO_Init+0x11c>)
 8000618:	695b      	ldr	r3, [r3, #20]
 800061a:	4a3a      	ldr	r2, [pc, #232]	; (8000704 <MX_GPIO_Init+0x11c>)
 800061c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000620:	6153      	str	r3, [r2, #20]
 8000622:	4b38      	ldr	r3, [pc, #224]	; (8000704 <MX_GPIO_Init+0x11c>)
 8000624:	695b      	ldr	r3, [r3, #20]
 8000626:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	4b35      	ldr	r3, [pc, #212]	; (8000704 <MX_GPIO_Init+0x11c>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	4a34      	ldr	r2, [pc, #208]	; (8000704 <MX_GPIO_Init+0x11c>)
 8000634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000638:	6153      	str	r3, [r2, #20]
 800063a:	4b32      	ldr	r3, [pc, #200]	; (8000704 <MX_GPIO_Init+0x11c>)
 800063c:	695b      	ldr	r3, [r3, #20]
 800063e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000646:	4b2f      	ldr	r3, [pc, #188]	; (8000704 <MX_GPIO_Init+0x11c>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	4a2e      	ldr	r2, [pc, #184]	; (8000704 <MX_GPIO_Init+0x11c>)
 800064c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000650:	6153      	str	r3, [r2, #20]
 8000652:	4b2c      	ldr	r3, [pc, #176]	; (8000704 <MX_GPIO_Init+0x11c>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|STEERING_MOTOR_EN_Pin|MOVING_MOTOR_NEGITVE_Pin|MOVING_MOTOR_POSITIVE_Pin, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 8000664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000668:	f002 fb90 	bl	8002d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RS_Pin|LCD_EN_Pin|LCD_DATA_0_Pin|LCD_DATA_1_Pin
 800066c:	2200      	movs	r2, #0
 800066e:	f643 4106 	movw	r1, #15366	; 0x3c06
 8000672:	4825      	ldr	r0, [pc, #148]	; (8000708 <MX_GPIO_Init+0x120>)
 8000674:	f002 fb8a 	bl	8002d8c <HAL_GPIO_WritePin>
                          |LCD_DATA_2_Pin|LCD_DATA_3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, STEERING_MOTOR_NEGITVE_Pin|STEERING_MOTOR_POSITIVE_Pin, GPIO_PIN_RESET);
 8000678:	2200      	movs	r2, #0
 800067a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800067e:	4823      	ldr	r0, [pc, #140]	; (800070c <MX_GPIO_Init+0x124>)
 8000680:	f002 fb84 	bl	8002d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000684:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800068a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800068e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	4619      	mov	r1, r3
 800069a:	481c      	ldr	r0, [pc, #112]	; (800070c <MX_GPIO_Init+0x124>)
 800069c:	f002 f9ec 	bl	8002a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|STEERING_MOTOR_EN_Pin|MOVING_MOTOR_NEGITVE_Pin|MOVING_MOTOR_POSITIVE_Pin;
 80006a0:	f44f 63e4 	mov.w	r3, #1824	; 0x720
 80006a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a6:	2301      	movs	r3, #1
 80006a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ae:	2300      	movs	r3, #0
 80006b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	4619      	mov	r1, r3
 80006b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006bc:	f002 f9dc 	bl	8002a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_EN_Pin|LCD_DATA_0_Pin|LCD_DATA_1_Pin
 80006c0:	f643 4306 	movw	r3, #15366	; 0x3c06
 80006c4:	617b      	str	r3, [r7, #20]
                          |LCD_DATA_2_Pin|LCD_DATA_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c6:	2301      	movs	r3, #1
 80006c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ce:	2300      	movs	r3, #0
 80006d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	4619      	mov	r1, r3
 80006d8:	480b      	ldr	r0, [pc, #44]	; (8000708 <MX_GPIO_Init+0x120>)
 80006da:	f002 f9cd 	bl	8002a78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = STEERING_MOTOR_NEGITVE_Pin|STEERING_MOTOR_POSITIVE_Pin;
 80006de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80006e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e4:	2301      	movs	r3, #1
 80006e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ec:	2300      	movs	r3, #0
 80006ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4619      	mov	r1, r3
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <MX_GPIO_Init+0x124>)
 80006f8:	f002 f9be 	bl	8002a78 <HAL_GPIO_Init>

}
 80006fc:	bf00      	nop
 80006fe:	3728      	adds	r7, #40	; 0x28
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40021000 	.word	0x40021000
 8000708:	48000400 	.word	0x48000400
 800070c:	48000800 	.word	0x48000800

08000710 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000714:	f001 fffc 	bl	8002710 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000718:	f000 f81c 	bl	8000754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071c:	f7ff ff64 	bl	80005e8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000720:	f000 fa96 	bl	8000c50 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000724:	f000 fb64 	bl	8000df0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000728:	f000 fbfc 	bl	8000f24 <MX_TIM3_Init>
  MX_TIM4_Init();
 800072c:	f000 fc96 	bl	800105c <MX_TIM4_Init>
  MX_TIM8_Init();
 8000730:	f000 fd30 	bl	8001194 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000734:	f000 fdfe 	bl	8001334 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000738:	f000 fec4 	bl	80014c4 <MX_TIM16_Init>
  MX_USART2_UART_Init();
 800073c:	f001 fa08 	bl	8001b50 <MX_USART2_UART_Init>
  MX_UART4_Init();
 8000740:	f001 f9d6 	bl	8001af0 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000744:	f007 fa3e 	bl	8007bc4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000748:	f7ff fd9a 	bl	8000280 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800074c:	f007 fa6e 	bl	8007c2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000750:	e7fe      	b.n	8000750 <main+0x40>
	...

08000754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b0a6      	sub	sp, #152	; 0x98
 8000758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800075e:	2228      	movs	r2, #40	; 0x28
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f00a fed2 	bl	800b50c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000768:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2258      	movs	r2, #88	; 0x58
 800077c:	2100      	movs	r1, #0
 800077e:	4618      	mov	r0, r3
 8000780:	f00a fec4 	bl	800b50c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000784:	2302      	movs	r3, #2
 8000786:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000788:	2301      	movs	r3, #1
 800078a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800078c:	2310      	movs	r3, #16
 800078e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000792:	2300      	movs	r3, #0
 8000794:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000798:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800079c:	4618      	mov	r0, r3
 800079e:	f002 fb0d 	bl	8002dbc <HAL_RCC_OscConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0x58>
  {
    Error_Handler();
 80007a8:	f000 f848 	bl	800083c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ac:	230f      	movs	r3, #15
 80007ae:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007b0:	2300      	movs	r3, #0
 80007b2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007c0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80007c4:	2100      	movs	r1, #0
 80007c6:	4618      	mov	r0, r3
 80007c8:	f003 fb4c 	bl	8003e64 <HAL_RCC_ClockConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80007d2:	f000 f833 	bl	800083c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_UART4
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <SystemClock_Config+0xc0>)
 80007d8:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM15
                              |RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM8
                              |RCC_PERIPHCLK_TIM2|RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80007e2:	2300      	movs	r3, #0
 80007e4:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 80007e6:	2300      	movs	r3, #0
 80007e8:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80007ea:	2300      	movs	r3, #0
 80007ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim8ClockSelection = RCC_TIM8CLK_HCLK;
 80007ee:	2300      	movs	r3, #0
 80007f0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80007f2:	2300      	movs	r3, #0
 80007f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 80007f6:	2300      	movs	r3, #0
 80007f8:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	4618      	mov	r0, r3
 80007fe:	f003 fd99 	bl	8004334 <HAL_RCCEx_PeriphCLKConfig>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000808:	f000 f818 	bl	800083c <Error_Handler>
  }
}
 800080c:	bf00      	nop
 800080e:	3798      	adds	r7, #152	; 0x98
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	00f0300a 	.word	0x00f0300a

08000818 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a04      	ldr	r2, [pc, #16]	; (8000838 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d101      	bne.n	800082e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800082a:	f001 ff87 	bl	800273c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40001000 	.word	0x40001000

0800083c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000840:	b672      	cpsid	i
}
 8000842:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000844:	e7fe      	b.n	8000844 <Error_Handler+0x8>
	...

08000848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <HAL_MspInit+0x4c>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	4a10      	ldr	r2, [pc, #64]	; (8000894 <HAL_MspInit+0x4c>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	6193      	str	r3, [r2, #24]
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <HAL_MspInit+0x4c>)
 800085c:	699b      	ldr	r3, [r3, #24]
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <HAL_MspInit+0x4c>)
 8000868:	69db      	ldr	r3, [r3, #28]
 800086a:	4a0a      	ldr	r2, [pc, #40]	; (8000894 <HAL_MspInit+0x4c>)
 800086c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000870:	61d3      	str	r3, [r2, #28]
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <HAL_MspInit+0x4c>)
 8000874:	69db      	ldr	r3, [r3, #28]
 8000876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	210f      	movs	r1, #15
 8000882:	f06f 0001 	mvn.w	r0, #1
 8000886:	f002 f855 	bl	8002934 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40021000 	.word	0x40021000

08000898 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08e      	sub	sp, #56	; 0x38
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008a0:	2300      	movs	r3, #0
 80008a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008a8:	4b33      	ldr	r3, [pc, #204]	; (8000978 <HAL_InitTick+0xe0>)
 80008aa:	69db      	ldr	r3, [r3, #28]
 80008ac:	4a32      	ldr	r2, [pc, #200]	; (8000978 <HAL_InitTick+0xe0>)
 80008ae:	f043 0310 	orr.w	r3, r3, #16
 80008b2:	61d3      	str	r3, [r2, #28]
 80008b4:	4b30      	ldr	r3, [pc, #192]	; (8000978 <HAL_InitTick+0xe0>)
 80008b6:	69db      	ldr	r3, [r3, #28]
 80008b8:	f003 0310 	and.w	r3, r3, #16
 80008bc:	60fb      	str	r3, [r7, #12]
 80008be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008c0:	f107 0210 	add.w	r2, r7, #16
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4611      	mov	r1, r2
 80008ca:	4618      	mov	r0, r3
 80008cc:	f003 fd00 	bl	80042d0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008d0:	6a3b      	ldr	r3, [r7, #32]
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d103      	bne.n	80008e2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008da:	f003 fcb5 	bl	8004248 <HAL_RCC_GetPCLK1Freq>
 80008de:	6378      	str	r0, [r7, #52]	; 0x34
 80008e0:	e004      	b.n	80008ec <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008e2:	f003 fcb1 	bl	8004248 <HAL_RCC_GetPCLK1Freq>
 80008e6:	4603      	mov	r3, r0
 80008e8:	005b      	lsls	r3, r3, #1
 80008ea:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008ee:	4a23      	ldr	r2, [pc, #140]	; (800097c <HAL_InitTick+0xe4>)
 80008f0:	fba2 2303 	umull	r2, r3, r2, r3
 80008f4:	0c9b      	lsrs	r3, r3, #18
 80008f6:	3b01      	subs	r3, #1
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008fa:	4b21      	ldr	r3, [pc, #132]	; (8000980 <HAL_InitTick+0xe8>)
 80008fc:	4a21      	ldr	r2, [pc, #132]	; (8000984 <HAL_InitTick+0xec>)
 80008fe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000900:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <HAL_InitTick+0xe8>)
 8000902:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000906:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000908:	4a1d      	ldr	r2, [pc, #116]	; (8000980 <HAL_InitTick+0xe8>)
 800090a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800090c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800090e:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <HAL_InitTick+0xe8>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000914:	4b1a      	ldr	r3, [pc, #104]	; (8000980 <HAL_InitTick+0xe8>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091a:	4b19      	ldr	r3, [pc, #100]	; (8000980 <HAL_InitTick+0xe8>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000920:	4817      	ldr	r0, [pc, #92]	; (8000980 <HAL_InitTick+0xe8>)
 8000922:	f003 ff25 	bl	8004770 <HAL_TIM_Base_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800092c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000930:	2b00      	cmp	r3, #0
 8000932:	d11b      	bne.n	800096c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000934:	4812      	ldr	r0, [pc, #72]	; (8000980 <HAL_InitTick+0xe8>)
 8000936:	f003 ff73 	bl	8004820 <HAL_TIM_Base_Start_IT>
 800093a:	4603      	mov	r3, r0
 800093c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000940:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000944:	2b00      	cmp	r3, #0
 8000946:	d111      	bne.n	800096c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000948:	2036      	movs	r0, #54	; 0x36
 800094a:	f002 f80f 	bl	800296c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2b0f      	cmp	r3, #15
 8000952:	d808      	bhi.n	8000966 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000954:	2200      	movs	r2, #0
 8000956:	6879      	ldr	r1, [r7, #4]
 8000958:	2036      	movs	r0, #54	; 0x36
 800095a:	f001 ffeb 	bl	8002934 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800095e:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <HAL_InitTick+0xf0>)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	6013      	str	r3, [r2, #0]
 8000964:	e002      	b.n	800096c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000966:	2301      	movs	r3, #1
 8000968:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800096c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000970:	4618      	mov	r0, r3
 8000972:	3738      	adds	r7, #56	; 0x38
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40021000 	.word	0x40021000
 800097c:	431bde83 	.word	0x431bde83
 8000980:	20000120 	.word	0x20000120
 8000984:	40001000 	.word	0x40001000
 8000988:	20000080 	.word	0x20000080

0800098c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <NMI_Handler+0x4>

08000992 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <HardFault_Handler+0x4>

08000998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <MemManage_Handler+0x4>

0800099e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a2:	e7fe      	b.n	80009a2 <BusFault_Handler+0x4>

080009a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <UsageFault_Handler+0x4>

080009aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	sensor_index = 5;
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 80009be:	2205      	movs	r2, #5
 80009c0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 80009c4:	f004 fc10 	bl	80051e8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80009c8:	4804      	ldr	r0, [pc, #16]	; (80009dc <TIM1_BRK_TIM15_IRQHandler+0x24>)
 80009ca:	f004 fc0d 	bl	80051e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	200004b0 	.word	0x200004b0
 80009d8:	20000170 	.word	0x20000170
 80009dc:	200002ec 	.word	0x200002ec

080009e0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	sensor_index = 0;
 80009e4:	4b03      	ldr	r3, [pc, #12]	; (80009f4 <TIM1_CC_IRQHandler+0x14>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009ea:	4803      	ldr	r0, [pc, #12]	; (80009f8 <TIM1_CC_IRQHandler+0x18>)
 80009ec:	f004 fbfc 	bl	80051e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	200004b0 	.word	0x200004b0
 80009f8:	20000170 	.word	0x20000170

080009fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	sensor_index = 1;
 8000a00:	4b03      	ldr	r3, [pc, #12]	; (8000a10 <TIM2_IRQHandler+0x14>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a06:	4803      	ldr	r0, [pc, #12]	; (8000a14 <TIM2_IRQHandler+0x18>)
 8000a08:	f004 fbee 	bl	80051e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	200004b0 	.word	0x200004b0
 8000a14:	200001bc 	.word	0x200001bc

08000a18 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	sensor_index = 2;
 8000a1c:	4b03      	ldr	r3, [pc, #12]	; (8000a2c <TIM3_IRQHandler+0x14>)
 8000a1e:	2202      	movs	r2, #2
 8000a20:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a22:	4803      	ldr	r0, [pc, #12]	; (8000a30 <TIM3_IRQHandler+0x18>)
 8000a24:	f004 fbe0 	bl	80051e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	200004b0 	.word	0x200004b0
 8000a30:	20000208 	.word	0x20000208

08000a34 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	sensor_index = 3;
 8000a38:	4b03      	ldr	r3, [pc, #12]	; (8000a48 <TIM4_IRQHandler+0x14>)
 8000a3a:	2203      	movs	r2, #3
 8000a3c:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a3e:	4803      	ldr	r0, [pc, #12]	; (8000a4c <TIM4_IRQHandler+0x18>)
 8000a40:	f004 fbd2 	bl	80051e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	200004b0 	.word	0x200004b0
 8000a4c:	20000254 	.word	0x20000254

08000a50 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */
	sensor_index = 4;
 8000a54:	4b03      	ldr	r3, [pc, #12]	; (8000a64 <TIM8_CC_IRQHandler+0x14>)
 8000a56:	2204      	movs	r2, #4
 8000a58:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000a5a:	4803      	ldr	r0, [pc, #12]	; (8000a68 <TIM8_CC_IRQHandler+0x18>)
 8000a5c:	f004 fbc4 	bl	80051e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	200004b0 	.word	0x200004b0
 8000a68:	200002a0 	.word	0x200002a0

08000a6c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000a70:	4802      	ldr	r0, [pc, #8]	; (8000a7c <UART4_IRQHandler+0x10>)
 8000a72:	f005 feff 	bl	8006874 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000384 	.word	0x20000384

08000a80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1 underrun interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a84:	4802      	ldr	r0, [pc, #8]	; (8000a90 <TIM6_DAC_IRQHandler+0x10>)
 8000a86:	f004 fbaf 	bl	80051e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000120 	.word	0x20000120

08000a94 <Custom_ITM_sendChar_Ch0>:
/* ITM Stimulus Ports 0-31 Base Address */
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
/* ITM Trace Enable Base Address */
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void Custom_ITM_sendChar_Ch0(uint8_t _data) {
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
	/* Enable TRCENA -> ONT and ITM units enabled */
	DEMCR |= (1 << 24);
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <Custom_ITM_sendChar_Ch0+0x48>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <Custom_ITM_sendChar_Ch0+0x48>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	6013      	str	r3, [r2, #0]
	/* Enable stimulus port 0 */
	ITM_TRACE_EN |= ( 1 << 0);
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <Custom_ITM_sendChar_Ch0+0x4c>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a0c      	ldr	r2, [pc, #48]	; (8000ae0 <Custom_ITM_sendChar_Ch0+0x4c>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6013      	str	r3, [r2, #0]
	/* Read FIFO status in bit [0]: */
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000ab6:	bf00      	nop
 8000ab8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d0f8      	beq.n	8000ab8 <Custom_ITM_sendChar_Ch0+0x24>
	/* Write to ITM stimulus port0 */
	ITM_STIMULUS_PORT0 = _data;
 8000ac6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000aca:	79fb      	ldrb	r3, [r7, #7]
 8000acc:	6013      	str	r3, [r2, #0]
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000edfc 	.word	0xe000edfc
 8000ae0:	e0000e00 	.word	0xe0000e00

08000ae4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]
 8000af4:	e00a      	b.n	8000b0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000af6:	f3af 8000 	nop.w
 8000afa:	4601      	mov	r1, r0
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	1c5a      	adds	r2, r3, #1
 8000b00:	60ba      	str	r2, [r7, #8]
 8000b02:	b2ca      	uxtb	r2, r1
 8000b04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	697a      	ldr	r2, [r7, #20]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	dbf0      	blt.n	8000af6 <_read+0x12>
  }

  return len;
 8000b14:	687b      	ldr	r3, [r7, #4]
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3718      	adds	r7, #24
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b086      	sub	sp, #24
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	60f8      	str	r0, [r7, #12]
 8000b26:	60b9      	str	r1, [r7, #8]
 8000b28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]
 8000b2e:	e009      	b.n	8000b44 <_write+0x26>
  {
    //__io_putchar(*ptr++);
    Custom_ITM_sendChar_Ch0(*ptr++);
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	1c5a      	adds	r2, r3, #1
 8000b34:	60ba      	str	r2, [r7, #8]
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f7ff ffab 	bl	8000a94 <Custom_ITM_sendChar_Ch0>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	3301      	adds	r3, #1
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	697a      	ldr	r2, [r7, #20]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	dbf1      	blt.n	8000b30 <_write+0x12>
  }
  return len;
 8000b4c:	687b      	ldr	r3, [r7, #4]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3718      	adds	r7, #24
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <_close>:

int _close(int file)
{
 8000b56:	b480      	push	{r7}
 8000b58:	b083      	sub	sp, #12
 8000b5a:	af00      	add	r7, sp, #0
 8000b5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	370c      	adds	r7, #12
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
 8000b76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b7e:	605a      	str	r2, [r3, #4]
  return 0;
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr

08000b8e <_isatty>:

int _isatty(int file)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	b083      	sub	sp, #12
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b96:	2301      	movs	r3, #1
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr

08000ba4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b085      	sub	sp, #20
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3714      	adds	r7, #20
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
	...

08000bc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc8:	4a14      	ldr	r2, [pc, #80]	; (8000c1c <_sbrk+0x5c>)
 8000bca:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <_sbrk+0x60>)
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd4:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <_sbrk+0x64>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d102      	bne.n	8000be2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <_sbrk+0x64>)
 8000bde:	4a12      	ldr	r2, [pc, #72]	; (8000c28 <_sbrk+0x68>)
 8000be0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <_sbrk+0x64>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d207      	bcs.n	8000c00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf0:	f00a fd30 	bl	800b654 <__errno>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfe:	e009      	b.n	8000c14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <_sbrk+0x64>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c06:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <_sbrk+0x64>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <_sbrk+0x64>)
 8000c10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c12:	68fb      	ldr	r3, [r7, #12]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20010000 	.word	0x20010000
 8000c20:	00000400 	.word	0x00000400
 8000c24:	2000016c 	.word	0x2000016c
 8000c28:	20002840 	.word	0x20002840

08000c2c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <SystemInit+0x20>)
 8000c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c36:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <SystemInit+0x20>)
 8000c38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b09e      	sub	sp, #120	; 0x78
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c56:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c64:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
 8000c80:	615a      	str	r2, [r3, #20]
 8000c82:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	222c      	movs	r2, #44	; 0x2c
 8000c96:	2100      	movs	r1, #0
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f00a fc37 	bl	800b50c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c9e:	4b52      	ldr	r3, [pc, #328]	; (8000de8 <MX_TIM1_Init+0x198>)
 8000ca0:	4a52      	ldr	r2, [pc, #328]	; (8000dec <MX_TIM1_Init+0x19c>)
 8000ca2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8000ca4:	4b50      	ldr	r3, [pc, #320]	; (8000de8 <MX_TIM1_Init+0x198>)
 8000ca6:	2207      	movs	r2, #7
 8000ca8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000caa:	4b4f      	ldr	r3, [pc, #316]	; (8000de8 <MX_TIM1_Init+0x198>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000cb0:	4b4d      	ldr	r3, [pc, #308]	; (8000de8 <MX_TIM1_Init+0x198>)
 8000cb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cb6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb8:	4b4b      	ldr	r3, [pc, #300]	; (8000de8 <MX_TIM1_Init+0x198>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cbe:	4b4a      	ldr	r3, [pc, #296]	; (8000de8 <MX_TIM1_Init+0x198>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc4:	4b48      	ldr	r3, [pc, #288]	; (8000de8 <MX_TIM1_Init+0x198>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cca:	4847      	ldr	r0, [pc, #284]	; (8000de8 <MX_TIM1_Init+0x198>)
 8000ccc:	f003 fd50 	bl	8004770 <HAL_TIM_Base_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000cd6:	f7ff fdb1 	bl	800083c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cde:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ce0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4840      	ldr	r0, [pc, #256]	; (8000de8 <MX_TIM1_Init+0x198>)
 8000ce8:	f004 fd4e 	bl	8005788 <HAL_TIM_ConfigClockSource>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000cf2:	f7ff fda3 	bl	800083c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cf6:	483c      	ldr	r0, [pc, #240]	; (8000de8 <MX_TIM1_Init+0x198>)
 8000cf8:	f003 fe02 	bl	8004900 <HAL_TIM_PWM_Init>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8000d02:	f7ff fd9b 	bl	800083c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000d06:	4838      	ldr	r0, [pc, #224]	; (8000de8 <MX_TIM1_Init+0x198>)
 8000d08:	f004 f804 	bl	8004d14 <HAL_TIM_IC_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000d12:	f7ff fd93 	bl	800083c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d16:	2300      	movs	r3, #0
 8000d18:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d22:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d26:	4619      	mov	r1, r3
 8000d28:	482f      	ldr	r0, [pc, #188]	; (8000de8 <MX_TIM1_Init+0x198>)
 8000d2a:	f005 fbe1 	bl	80064f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM1_Init+0xe8>
  {
    Error_Handler();
 8000d34:	f7ff fd82 	bl	800083c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d38:	2360      	movs	r3, #96	; 0x60
 8000d3a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.Pulse = 32700;
 8000d3c:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8000d40:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d42:	2300      	movs	r3, #0
 8000d44:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d46:	2300      	movs	r3, #0
 8000d48:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d52:	2300      	movs	r3, #0
 8000d54:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d56:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4822      	ldr	r0, [pc, #136]	; (8000de8 <MX_TIM1_Init+0x198>)
 8000d60:	f004 fbfe 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_TIM1_Init+0x11e>
  {
    Error_Handler();
 8000d6a:	f7ff fd67 	bl	800083c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000d72:	2301      	movs	r3, #1
 8000d74:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000d76:	2300      	movs	r3, #0
 8000d78:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000d7e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d82:	2204      	movs	r2, #4
 8000d84:	4619      	mov	r1, r3
 8000d86:	4818      	ldr	r0, [pc, #96]	; (8000de8 <MX_TIM1_Init+0x198>)
 8000d88:	f004 fb4d 	bl	8005426 <HAL_TIM_IC_ConfigChannel>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8000d92:	f7ff fd53 	bl	800083c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000daa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dae:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000db8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4807      	ldr	r0, [pc, #28]	; (8000de8 <MX_TIM1_Init+0x198>)
 8000dcc:	f005 fc1c 	bl	8006608 <HAL_TIMEx_ConfigBreakDeadTime>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_TIM1_Init+0x18a>
  {
    Error_Handler();
 8000dd6:	f7ff fd31 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000dda:	4803      	ldr	r0, [pc, #12]	; (8000de8 <MX_TIM1_Init+0x198>)
 8000ddc:	f000 fd74 	bl	80018c8 <HAL_TIM_MspPostInit>

}
 8000de0:	bf00      	nop
 8000de2:	3778      	adds	r7, #120	; 0x78
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	20000170 	.word	0x20000170
 8000dec:	40012c00 	.word	0x40012c00

08000df0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b092      	sub	sp, #72	; 0x48
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000df6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	605a      	str	r2, [r3, #4]
 8000e00:	609a      	str	r2, [r3, #8]
 8000e02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e10:	f107 0310 	add.w	r3, r7, #16
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
 8000e20:	615a      	str	r2, [r3, #20]
 8000e22:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e24:	463b      	mov	r3, r7
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e30:	4b3b      	ldr	r3, [pc, #236]	; (8000f20 <MX_TIM2_Init+0x130>)
 8000e32:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8000e38:	4b39      	ldr	r3, [pc, #228]	; (8000f20 <MX_TIM2_Init+0x130>)
 8000e3a:	2207      	movs	r2, #7
 8000e3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3e:	4b38      	ldr	r3, [pc, #224]	; (8000f20 <MX_TIM2_Init+0x130>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000e44:	4b36      	ldr	r3, [pc, #216]	; (8000f20 <MX_TIM2_Init+0x130>)
 8000e46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e4c:	4b34      	ldr	r3, [pc, #208]	; (8000f20 <MX_TIM2_Init+0x130>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e52:	4b33      	ldr	r3, [pc, #204]	; (8000f20 <MX_TIM2_Init+0x130>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e58:	4831      	ldr	r0, [pc, #196]	; (8000f20 <MX_TIM2_Init+0x130>)
 8000e5a:	f003 fc89 	bl	8004770 <HAL_TIM_Base_Init>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000e64:	f7ff fcea 	bl	800083c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e6c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e6e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e72:	4619      	mov	r1, r3
 8000e74:	482a      	ldr	r0, [pc, #168]	; (8000f20 <MX_TIM2_Init+0x130>)
 8000e76:	f004 fc87 	bl	8005788 <HAL_TIM_ConfigClockSource>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000e80:	f7ff fcdc 	bl	800083c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e84:	4826      	ldr	r0, [pc, #152]	; (8000f20 <MX_TIM2_Init+0x130>)
 8000e86:	f003 fd3b 	bl	8004900 <HAL_TIM_PWM_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM2_Init+0xa4>
  {
    Error_Handler();
 8000e90:	f7ff fcd4 	bl	800083c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000e94:	4822      	ldr	r0, [pc, #136]	; (8000f20 <MX_TIM2_Init+0x130>)
 8000e96:	f003 ff3d 	bl	8004d14 <HAL_TIM_IC_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000ea0:	f7ff fccc 	bl	800083c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	481b      	ldr	r0, [pc, #108]	; (8000f20 <MX_TIM2_Init+0x130>)
 8000eb4:	f005 fb1c 	bl	80064f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000ebe:	f7ff fcbd 	bl	800083c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ec2:	2360      	movs	r3, #96	; 0x60
 8000ec4:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 32700;
 8000ec6:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8000eca:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	2200      	movs	r2, #0
 8000eda:	4619      	mov	r1, r3
 8000edc:	4810      	ldr	r0, [pc, #64]	; (8000f20 <MX_TIM2_Init+0x130>)
 8000ede:	f004 fb3f 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_TIM2_Init+0xfc>
  {
    Error_Handler();
 8000ee8:	f7ff fca8 	bl	800083c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000eec:	2300      	movs	r3, #0
 8000eee:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000efc:	463b      	mov	r3, r7
 8000efe:	2204      	movs	r2, #4
 8000f00:	4619      	mov	r1, r3
 8000f02:	4807      	ldr	r0, [pc, #28]	; (8000f20 <MX_TIM2_Init+0x130>)
 8000f04:	f004 fa8f 	bl	8005426 <HAL_TIM_IC_ConfigChannel>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM2_Init+0x122>
  {
    Error_Handler();
 8000f0e:	f7ff fc95 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f12:	4803      	ldr	r0, [pc, #12]	; (8000f20 <MX_TIM2_Init+0x130>)
 8000f14:	f000 fcd8 	bl	80018c8 <HAL_TIM_MspPostInit>

}
 8000f18:	bf00      	nop
 8000f1a:	3748      	adds	r7, #72	; 0x48
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	200001bc 	.word	0x200001bc

08000f24 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b092      	sub	sp, #72	; 0x48
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f44:	f107 0310 	add.w	r3, r7, #16
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]
 8000f54:	615a      	str	r2, [r3, #20]
 8000f56:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f58:	463b      	mov	r3, r7
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f64:	4b3b      	ldr	r3, [pc, #236]	; (8001054 <MX_TIM3_Init+0x130>)
 8000f66:	4a3c      	ldr	r2, [pc, #240]	; (8001058 <MX_TIM3_Init+0x134>)
 8000f68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7;
 8000f6a:	4b3a      	ldr	r3, [pc, #232]	; (8001054 <MX_TIM3_Init+0x130>)
 8000f6c:	2207      	movs	r2, #7
 8000f6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f70:	4b38      	ldr	r3, [pc, #224]	; (8001054 <MX_TIM3_Init+0x130>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f76:	4b37      	ldr	r3, [pc, #220]	; (8001054 <MX_TIM3_Init+0x130>)
 8000f78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f7c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f7e:	4b35      	ldr	r3, [pc, #212]	; (8001054 <MX_TIM3_Init+0x130>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f84:	4b33      	ldr	r3, [pc, #204]	; (8001054 <MX_TIM3_Init+0x130>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f8a:	4832      	ldr	r0, [pc, #200]	; (8001054 <MX_TIM3_Init+0x130>)
 8000f8c:	f003 fbf0 	bl	8004770 <HAL_TIM_Base_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000f96:	f7ff fc51 	bl	800083c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f9e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fa0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	482b      	ldr	r0, [pc, #172]	; (8001054 <MX_TIM3_Init+0x130>)
 8000fa8:	f004 fbee 	bl	8005788 <HAL_TIM_ConfigClockSource>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000fb2:	f7ff fc43 	bl	800083c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fb6:	4827      	ldr	r0, [pc, #156]	; (8001054 <MX_TIM3_Init+0x130>)
 8000fb8:	f003 fca2 	bl	8004900 <HAL_TIM_PWM_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8000fc2:	f7ff fc3b 	bl	800083c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000fc6:	4823      	ldr	r0, [pc, #140]	; (8001054 <MX_TIM3_Init+0x130>)
 8000fc8:	f003 fea4 	bl	8004d14 <HAL_TIM_IC_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000fd2:	f7ff fc33 	bl	800083c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	481b      	ldr	r0, [pc, #108]	; (8001054 <MX_TIM3_Init+0x130>)
 8000fe6:	f005 fa83 	bl	80064f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8000ff0:	f7ff fc24 	bl	800083c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ff4:	2360      	movs	r3, #96	; 0x60
 8000ff6:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 32700;
 8000ff8:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8000ffc:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001002:	2300      	movs	r3, #0
 8001004:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001006:	f107 0310 	add.w	r3, r7, #16
 800100a:	2200      	movs	r2, #0
 800100c:	4619      	mov	r1, r3
 800100e:	4811      	ldr	r0, [pc, #68]	; (8001054 <MX_TIM3_Init+0x130>)
 8001010:	f004 faa6 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_TIM3_Init+0xfa>
  {
    Error_Handler();
 800101a:	f7ff fc0f 	bl	800083c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800101e:	2300      	movs	r3, #0
 8001020:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001022:	2301      	movs	r3, #1
 8001024:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001026:	2300      	movs	r3, #0
 8001028:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800102e:	463b      	mov	r3, r7
 8001030:	2204      	movs	r2, #4
 8001032:	4619      	mov	r1, r3
 8001034:	4807      	ldr	r0, [pc, #28]	; (8001054 <MX_TIM3_Init+0x130>)
 8001036:	f004 f9f6 	bl	8005426 <HAL_TIM_IC_ConfigChannel>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM3_Init+0x120>
  {
    Error_Handler();
 8001040:	f7ff fbfc 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001044:	4803      	ldr	r0, [pc, #12]	; (8001054 <MX_TIM3_Init+0x130>)
 8001046:	f000 fc3f 	bl	80018c8 <HAL_TIM_MspPostInit>

}
 800104a:	bf00      	nop
 800104c:	3748      	adds	r7, #72	; 0x48
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000208 	.word	0x20000208
 8001058:	40000400 	.word	0x40000400

0800105c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b092      	sub	sp, #72	; 0x48
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001062:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001070:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800107c:	f107 0310 	add.w	r3, r7, #16
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
 800108c:	615a      	str	r2, [r3, #20]
 800108e:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001090:	463b      	mov	r3, r7
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800109c:	4b3b      	ldr	r3, [pc, #236]	; (800118c <MX_TIM4_Init+0x130>)
 800109e:	4a3c      	ldr	r2, [pc, #240]	; (8001190 <MX_TIM4_Init+0x134>)
 80010a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7;
 80010a2:	4b3a      	ldr	r3, [pc, #232]	; (800118c <MX_TIM4_Init+0x130>)
 80010a4:	2207      	movs	r2, #7
 80010a6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a8:	4b38      	ldr	r3, [pc, #224]	; (800118c <MX_TIM4_Init+0x130>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80010ae:	4b37      	ldr	r3, [pc, #220]	; (800118c <MX_TIM4_Init+0x130>)
 80010b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010b4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010b6:	4b35      	ldr	r3, [pc, #212]	; (800118c <MX_TIM4_Init+0x130>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010bc:	4b33      	ldr	r3, [pc, #204]	; (800118c <MX_TIM4_Init+0x130>)
 80010be:	2200      	movs	r2, #0
 80010c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80010c2:	4832      	ldr	r0, [pc, #200]	; (800118c <MX_TIM4_Init+0x130>)
 80010c4:	f003 fb54 	bl	8004770 <HAL_TIM_Base_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80010ce:	f7ff fbb5 	bl	800083c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010d6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80010d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010dc:	4619      	mov	r1, r3
 80010de:	482b      	ldr	r0, [pc, #172]	; (800118c <MX_TIM4_Init+0x130>)
 80010e0:	f004 fb52 	bl	8005788 <HAL_TIM_ConfigClockSource>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80010ea:	f7ff fba7 	bl	800083c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80010ee:	4827      	ldr	r0, [pc, #156]	; (800118c <MX_TIM4_Init+0x130>)
 80010f0:	f003 fc06 	bl	8004900 <HAL_TIM_PWM_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 80010fa:	f7ff fb9f 	bl	800083c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 80010fe:	4823      	ldr	r0, [pc, #140]	; (800118c <MX_TIM4_Init+0x130>)
 8001100:	f003 fe08 	bl	8004d14 <HAL_TIM_IC_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800110a:	f7ff fb97 	bl	800083c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110e:	2300      	movs	r3, #0
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001116:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800111a:	4619      	mov	r1, r3
 800111c:	481b      	ldr	r0, [pc, #108]	; (800118c <MX_TIM4_Init+0x130>)
 800111e:	f005 f9e7 	bl	80064f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8001128:	f7ff fb88 	bl	800083c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800112c:	2360      	movs	r3, #96	; 0x60
 800112e:	613b      	str	r3, [r7, #16]
  sConfigOC.Pulse = 32700;
 8001130:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8001134:	617b      	str	r3, [r7, #20]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800113a:	2300      	movs	r3, #0
 800113c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800113e:	f107 0310 	add.w	r3, r7, #16
 8001142:	2200      	movs	r2, #0
 8001144:	4619      	mov	r1, r3
 8001146:	4811      	ldr	r0, [pc, #68]	; (800118c <MX_TIM4_Init+0x130>)
 8001148:	f004 fa0a 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM4_Init+0xfa>
  {
    Error_Handler();
 8001152:	f7ff fb73 	bl	800083c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001156:	2300      	movs	r3, #0
 8001158:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800115a:	2301      	movs	r3, #1
 800115c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001166:	463b      	mov	r3, r7
 8001168:	2204      	movs	r2, #4
 800116a:	4619      	mov	r1, r3
 800116c:	4807      	ldr	r0, [pc, #28]	; (800118c <MX_TIM4_Init+0x130>)
 800116e:	f004 f95a 	bl	8005426 <HAL_TIM_IC_ConfigChannel>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM4_Init+0x120>
  {
    Error_Handler();
 8001178:	f7ff fb60 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800117c:	4803      	ldr	r0, [pc, #12]	; (800118c <MX_TIM4_Init+0x130>)
 800117e:	f000 fba3 	bl	80018c8 <HAL_TIM_MspPostInit>

}
 8001182:	bf00      	nop
 8001184:	3748      	adds	r7, #72	; 0x48
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	20000254 	.word	0x20000254
 8001190:	40000800 	.word	0x40000800

08001194 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b09e      	sub	sp, #120	; 0x78
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
 80011c4:	615a      	str	r2, [r3, #20]
 80011c6:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	222c      	movs	r2, #44	; 0x2c
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f00a f995 	bl	800b50c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80011e2:	4b52      	ldr	r3, [pc, #328]	; (800132c <MX_TIM8_Init+0x198>)
 80011e4:	4a52      	ldr	r2, [pc, #328]	; (8001330 <MX_TIM8_Init+0x19c>)
 80011e6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 7;
 80011e8:	4b50      	ldr	r3, [pc, #320]	; (800132c <MX_TIM8_Init+0x198>)
 80011ea:	2207      	movs	r2, #7
 80011ec:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ee:	4b4f      	ldr	r3, [pc, #316]	; (800132c <MX_TIM8_Init+0x198>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80011f4:	4b4d      	ldr	r3, [pc, #308]	; (800132c <MX_TIM8_Init+0x198>)
 80011f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011fa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011fc:	4b4b      	ldr	r3, [pc, #300]	; (800132c <MX_TIM8_Init+0x198>)
 80011fe:	2200      	movs	r2, #0
 8001200:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001202:	4b4a      	ldr	r3, [pc, #296]	; (800132c <MX_TIM8_Init+0x198>)
 8001204:	2200      	movs	r2, #0
 8001206:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001208:	4b48      	ldr	r3, [pc, #288]	; (800132c <MX_TIM8_Init+0x198>)
 800120a:	2200      	movs	r2, #0
 800120c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800120e:	4847      	ldr	r0, [pc, #284]	; (800132c <MX_TIM8_Init+0x198>)
 8001210:	f003 faae 	bl	8004770 <HAL_TIM_Base_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 800121a:	f7ff fb0f 	bl	800083c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800121e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001222:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001224:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001228:	4619      	mov	r1, r3
 800122a:	4840      	ldr	r0, [pc, #256]	; (800132c <MX_TIM8_Init+0x198>)
 800122c:	f004 faac 	bl	8005788 <HAL_TIM_ConfigClockSource>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001236:	f7ff fb01 	bl	800083c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800123a:	483c      	ldr	r0, [pc, #240]	; (800132c <MX_TIM8_Init+0x198>)
 800123c:	f003 fb60 	bl	8004900 <HAL_TIM_PWM_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM8_Init+0xb6>
  {
    Error_Handler();
 8001246:	f7ff faf9 	bl	800083c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim8) != HAL_OK)
 800124a:	4838      	ldr	r0, [pc, #224]	; (800132c <MX_TIM8_Init+0x198>)
 800124c:	f003 fd62 	bl	8004d14 <HAL_TIM_IC_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8001256:	f7ff faf1 	bl	800083c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125a:	2300      	movs	r3, #0
 800125c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800125e:	2300      	movs	r3, #0
 8001260:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001266:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800126a:	4619      	mov	r1, r3
 800126c:	482f      	ldr	r0, [pc, #188]	; (800132c <MX_TIM8_Init+0x198>)
 800126e:	f005 f93f 	bl	80064f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM8_Init+0xe8>
  {
    Error_Handler();
 8001278:	f7ff fae0 	bl	800083c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800127c:	2360      	movs	r3, #96	; 0x60
 800127e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.Pulse = 32700;
 8001280:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8001284:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001286:	2300      	movs	r3, #0
 8001288:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800128a:	2300      	movs	r3, #0
 800128c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800128e:	2300      	movs	r3, #0
 8001290:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001292:	2300      	movs	r3, #0
 8001294:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001296:	2300      	movs	r3, #0
 8001298:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800129a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800129e:	2200      	movs	r2, #0
 80012a0:	4619      	mov	r1, r3
 80012a2:	4822      	ldr	r0, [pc, #136]	; (800132c <MX_TIM8_Init+0x198>)
 80012a4:	f004 f95c 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM8_Init+0x11e>
  {
    Error_Handler();
 80012ae:	f7ff fac5 	bl	800083c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012b2:	2300      	movs	r3, #0
 80012b4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012b6:	2301      	movs	r3, #1
 80012b8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012ba:	2300      	movs	r3, #0
 80012bc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 80012be:	2300      	movs	r3, #0
 80012c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim8, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80012c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012c6:	2204      	movs	r2, #4
 80012c8:	4619      	mov	r1, r3
 80012ca:	4818      	ldr	r0, [pc, #96]	; (800132c <MX_TIM8_Init+0x198>)
 80012cc:	f004 f8ab 	bl	8005426 <HAL_TIM_IC_ConfigChannel>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM8_Init+0x146>
  {
    Error_Handler();
 80012d6:	f7ff fab1 	bl	800083c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012ea:	2300      	movs	r3, #0
 80012ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80012fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001306:	2300      	movs	r3, #0
 8001308:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	4619      	mov	r1, r3
 800130e:	4807      	ldr	r0, [pc, #28]	; (800132c <MX_TIM8_Init+0x198>)
 8001310:	f005 f97a 	bl	8006608 <HAL_TIMEx_ConfigBreakDeadTime>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM8_Init+0x18a>
  {
    Error_Handler();
 800131a:	f7ff fa8f 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800131e:	4803      	ldr	r0, [pc, #12]	; (800132c <MX_TIM8_Init+0x198>)
 8001320:	f000 fad2 	bl	80018c8 <HAL_TIM_MspPostInit>

}
 8001324:	bf00      	nop
 8001326:	3778      	adds	r7, #120	; 0x78
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	200002a0 	.word	0x200002a0
 8001330:	40013400 	.word	0x40013400

08001334 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b09e      	sub	sp, #120	; 0x78
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001348:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001354:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
 8001364:	615a      	str	r2, [r3, #20]
 8001366:	619a      	str	r2, [r3, #24]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001368:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	222c      	movs	r2, #44	; 0x2c
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f00a f8c5 	bl	800b50c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001382:	4b4e      	ldr	r3, [pc, #312]	; (80014bc <MX_TIM15_Init+0x188>)
 8001384:	4a4e      	ldr	r2, [pc, #312]	; (80014c0 <MX_TIM15_Init+0x18c>)
 8001386:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 7;
 8001388:	4b4c      	ldr	r3, [pc, #304]	; (80014bc <MX_TIM15_Init+0x188>)
 800138a:	2207      	movs	r2, #7
 800138c:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138e:	4b4b      	ldr	r3, [pc, #300]	; (80014bc <MX_TIM15_Init+0x188>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001394:	4b49      	ldr	r3, [pc, #292]	; (80014bc <MX_TIM15_Init+0x188>)
 8001396:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800139a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139c:	4b47      	ldr	r3, [pc, #284]	; (80014bc <MX_TIM15_Init+0x188>)
 800139e:	2200      	movs	r2, #0
 80013a0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80013a2:	4b46      	ldr	r3, [pc, #280]	; (80014bc <MX_TIM15_Init+0x188>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a8:	4b44      	ldr	r3, [pc, #272]	; (80014bc <MX_TIM15_Init+0x188>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80013ae:	4843      	ldr	r0, [pc, #268]	; (80014bc <MX_TIM15_Init+0x188>)
 80013b0:	f003 f9de 	bl	8004770 <HAL_TIM_Base_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM15_Init+0x8a>
  {
    Error_Handler();
 80013ba:	f7ff fa3f 	bl	800083c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c2:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80013c4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013c8:	4619      	mov	r1, r3
 80013ca:	483c      	ldr	r0, [pc, #240]	; (80014bc <MX_TIM15_Init+0x188>)
 80013cc:	f004 f9dc 	bl	8005788 <HAL_TIM_ConfigClockSource>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM15_Init+0xa6>
  {
    Error_Handler();
 80013d6:	f7ff fa31 	bl	800083c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80013da:	4838      	ldr	r0, [pc, #224]	; (80014bc <MX_TIM15_Init+0x188>)
 80013dc:	f003 fa90 	bl	8004900 <HAL_TIM_PWM_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_TIM15_Init+0xb6>
  {
    Error_Handler();
 80013e6:	f7ff fa29 	bl	800083c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim15) != HAL_OK)
 80013ea:	4834      	ldr	r0, [pc, #208]	; (80014bc <MX_TIM15_Init+0x188>)
 80013ec:	f003 fc92 	bl	8004d14 <HAL_TIM_IC_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 80013f6:	f7ff fa21 	bl	800083c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fa:	2300      	movs	r3, #0
 80013fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fe:	2300      	movs	r3, #0
 8001400:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001402:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001406:	4619      	mov	r1, r3
 8001408:	482c      	ldr	r0, [pc, #176]	; (80014bc <MX_TIM15_Init+0x188>)
 800140a:	f005 f871 	bl	80064f0 <HAL_TIMEx_MasterConfigSynchronization>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM15_Init+0xe4>
  {
    Error_Handler();
 8001414:	f7ff fa12 	bl	800083c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001418:	2360      	movs	r3, #96	; 0x60
 800141a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.Pulse = 32700;
 800141c:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 8001420:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001422:	2300      	movs	r3, #0
 8001424:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001426:	2300      	movs	r3, #0
 8001428:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800142a:	2300      	movs	r3, #0
 800142c:	653b      	str	r3, [r7, #80]	; 0x50
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	657b      	str	r3, [r7, #84]	; 0x54
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001432:	2300      	movs	r3, #0
 8001434:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001436:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800143a:	2200      	movs	r2, #0
 800143c:	4619      	mov	r1, r3
 800143e:	481f      	ldr	r0, [pc, #124]	; (80014bc <MX_TIM15_Init+0x188>)
 8001440:	f004 f88e 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM15_Init+0x11a>
  {
    Error_Handler();
 800144a:	f7ff f9f7 	bl	800083c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800144e:	2300      	movs	r3, #0
 8001450:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001452:	2301      	movs	r3, #1
 8001454:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001456:	2300      	movs	r3, #0
 8001458:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigIC.ICFilter = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_IC_ConfigChannel(&htim15, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800145e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001462:	2204      	movs	r2, #4
 8001464:	4619      	mov	r1, r3
 8001466:	4815      	ldr	r0, [pc, #84]	; (80014bc <MX_TIM15_Init+0x188>)
 8001468:	f003 ffdd 	bl	8005426 <HAL_TIM_IC_ConfigChannel>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM15_Init+0x142>
  {
    Error_Handler();
 8001472:	f7ff f9e3 	bl	800083c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001486:	2300      	movs	r3, #0
 8001488:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800148a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800148e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001490:	2300      	movs	r3, #0
 8001492:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001494:	2300      	movs	r3, #0
 8001496:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	4619      	mov	r1, r3
 800149c:	4807      	ldr	r0, [pc, #28]	; (80014bc <MX_TIM15_Init+0x188>)
 800149e:	f005 f8b3 	bl	8006608 <HAL_TIMEx_ConfigBreakDeadTime>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM15_Init+0x178>
  {
    Error_Handler();
 80014a8:	f7ff f9c8 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80014ac:	4803      	ldr	r0, [pc, #12]	; (80014bc <MX_TIM15_Init+0x188>)
 80014ae:	f000 fa0b 	bl	80018c8 <HAL_TIM_MspPostInit>

}
 80014b2:	bf00      	nop
 80014b4:	3778      	adds	r7, #120	; 0x78
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200002ec 	.word	0x200002ec
 80014c0:	40014000 	.word	0x40014000

080014c4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b092      	sub	sp, #72	; 0x48
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]
 80014d8:	611a      	str	r2, [r3, #16]
 80014da:	615a      	str	r2, [r3, #20]
 80014dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014de:	463b      	mov	r3, r7
 80014e0:	222c      	movs	r2, #44	; 0x2c
 80014e2:	2100      	movs	r1, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f00a f811 	bl	800b50c <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80014ea:	4b31      	ldr	r3, [pc, #196]	; (80015b0 <MX_TIM16_Init+0xec>)
 80014ec:	4a31      	ldr	r2, [pc, #196]	; (80015b4 <MX_TIM16_Init+0xf0>)
 80014ee:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7;
 80014f0:	4b2f      	ldr	r3, [pc, #188]	; (80015b0 <MX_TIM16_Init+0xec>)
 80014f2:	2207      	movs	r2, #7
 80014f4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f6:	4b2e      	ldr	r3, [pc, #184]	; (80015b0 <MX_TIM16_Init+0xec>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80014fc:	4b2c      	ldr	r3, [pc, #176]	; (80015b0 <MX_TIM16_Init+0xec>)
 80014fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001502:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001504:	4b2a      	ldr	r3, [pc, #168]	; (80015b0 <MX_TIM16_Init+0xec>)
 8001506:	2200      	movs	r2, #0
 8001508:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800150a:	4b29      	ldr	r3, [pc, #164]	; (80015b0 <MX_TIM16_Init+0xec>)
 800150c:	2200      	movs	r2, #0
 800150e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001510:	4b27      	ldr	r3, [pc, #156]	; (80015b0 <MX_TIM16_Init+0xec>)
 8001512:	2200      	movs	r2, #0
 8001514:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001516:	4826      	ldr	r0, [pc, #152]	; (80015b0 <MX_TIM16_Init+0xec>)
 8001518:	f003 f92a 	bl	8004770 <HAL_TIM_Base_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001522:	f7ff f98b 	bl	800083c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001526:	4822      	ldr	r0, [pc, #136]	; (80015b0 <MX_TIM16_Init+0xec>)
 8001528:	f003 f9ea 	bl	8004900 <HAL_TIM_PWM_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001532:	f7ff f983 	bl	800083c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001536:	2360      	movs	r3, #96	; 0x60
 8001538:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 32700;
 800153a:	f647 73bc 	movw	r3, #32700	; 0x7fbc
 800153e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001540:	2300      	movs	r3, #0
 8001542:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001544:	2300      	movs	r3, #0
 8001546:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800154c:	2300      	movs	r3, #0
 800154e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001550:	2300      	movs	r3, #0
 8001552:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001554:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001558:	2200      	movs	r2, #0
 800155a:	4619      	mov	r1, r3
 800155c:	4814      	ldr	r0, [pc, #80]	; (80015b0 <MX_TIM16_Init+0xec>)
 800155e:	f003 ffff 	bl	8005560 <HAL_TIM_PWM_ConfigChannel>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM16_Init+0xa8>
  {
    Error_Handler();
 8001568:	f7ff f968 	bl	800083c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001580:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001584:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800158a:	2300      	movs	r3, #0
 800158c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 800158e:	463b      	mov	r3, r7
 8001590:	4619      	mov	r1, r3
 8001592:	4807      	ldr	r0, [pc, #28]	; (80015b0 <MX_TIM16_Init+0xec>)
 8001594:	f005 f838 	bl	8006608 <HAL_TIMEx_ConfigBreakDeadTime>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM16_Init+0xde>
  {
    Error_Handler();
 800159e:	f7ff f94d 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80015a2:	4803      	ldr	r0, [pc, #12]	; (80015b0 <MX_TIM16_Init+0xec>)
 80015a4:	f000 f990 	bl	80018c8 <HAL_TIM_MspPostInit>

}
 80015a8:	bf00      	nop
 80015aa:	3748      	adds	r7, #72	; 0x48
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	20000338 	.word	0x20000338
 80015b4:	40014400 	.word	0x40014400

080015b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b094      	sub	sp, #80	; 0x50
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4aa7      	ldr	r2, [pc, #668]	; (8001874 <HAL_TIM_Base_MspInit+0x2bc>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d138      	bne.n	800164c <HAL_TIM_Base_MspInit+0x94>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015da:	4ba7      	ldr	r3, [pc, #668]	; (8001878 <HAL_TIM_Base_MspInit+0x2c0>)
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	4aa6      	ldr	r2, [pc, #664]	; (8001878 <HAL_TIM_Base_MspInit+0x2c0>)
 80015e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015e4:	6193      	str	r3, [r2, #24]
 80015e6:	4ba4      	ldr	r3, [pc, #656]	; (8001878 <HAL_TIM_Base_MspInit+0x2c0>)
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80015f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f2:	4ba1      	ldr	r3, [pc, #644]	; (8001878 <HAL_TIM_Base_MspInit+0x2c0>)
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	4aa0      	ldr	r2, [pc, #640]	; (8001878 <HAL_TIM_Base_MspInit+0x2c0>)
 80015f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80015fc:	6153      	str	r3, [r2, #20]
 80015fe:	4b9e      	ldr	r3, [pc, #632]	; (8001878 <HAL_TIM_Base_MspInit+0x2c0>)
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001606:	637b      	str	r3, [r7, #52]	; 0x34
 8001608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    /**TIM1 GPIO Configuration
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800160a:	2302      	movs	r3, #2
 800160c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001612:	2300      	movs	r3, #0
 8001614:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	2300      	movs	r3, #0
 8001618:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800161a:	2302      	movs	r3, #2
 800161c:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001622:	4619      	mov	r1, r3
 8001624:	4895      	ldr	r0, [pc, #596]	; (800187c <HAL_TIM_Base_MspInit+0x2c4>)
 8001626:	f001 fa27 	bl	8002a78 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 800162a:	2200      	movs	r2, #0
 800162c:	2105      	movs	r1, #5
 800162e:	2018      	movs	r0, #24
 8001630:	f001 f980 	bl	8002934 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001634:	2018      	movs	r0, #24
 8001636:	f001 f999 	bl	800296c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800163a:	2200      	movs	r2, #0
 800163c:	2105      	movs	r1, #5
 800163e:	201b      	movs	r0, #27
 8001640:	f001 f978 	bl	8002934 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001644:	201b      	movs	r0, #27
 8001646:	f001 f991 	bl	800296c <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800164a:	e134      	b.n	80018b6 <HAL_TIM_Base_MspInit+0x2fe>
  else if(tim_baseHandle->Instance==TIM2)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001654:	d131      	bne.n	80016ba <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001656:	4b88      	ldr	r3, [pc, #544]	; (8001878 <HAL_TIM_Base_MspInit+0x2c0>)
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	4a87      	ldr	r2, [pc, #540]	; (8001878 <HAL_TIM_Base_MspInit+0x2c0>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	61d3      	str	r3, [r2, #28]
 8001662:	4b85      	ldr	r3, [pc, #532]	; (8001878 <HAL_TIM_Base_MspInit+0x2c0>)
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	633b      	str	r3, [r7, #48]	; 0x30
 800166c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166e:	4b82      	ldr	r3, [pc, #520]	; (8001878 <HAL_TIM_Base_MspInit+0x2c0>)
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	4a81      	ldr	r2, [pc, #516]	; (8001878 <HAL_TIM_Base_MspInit+0x2c0>)
 8001674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001678:	6153      	str	r3, [r2, #20]
 800167a:	4b7f      	ldr	r3, [pc, #508]	; (8001878 <HAL_TIM_Base_MspInit+0x2c0>)
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001682:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001686:	2302      	movs	r3, #2
 8001688:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001692:	2300      	movs	r3, #0
 8001694:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001696:	2301      	movs	r3, #1
 8001698:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800169e:	4619      	mov	r1, r3
 80016a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a4:	f001 f9e8 	bl	8002a78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80016a8:	2200      	movs	r2, #0
 80016aa:	2105      	movs	r1, #5
 80016ac:	201c      	movs	r0, #28
 80016ae:	f001 f941 	bl	8002934 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016b2:	201c      	movs	r0, #28
 80016b4:	f001 f95a 	bl	800296c <HAL_NVIC_EnableIRQ>
}
 80016b8:	e0fd      	b.n	80018b6 <HAL_TIM_Base_MspInit+0x2fe>
  else if(tim_baseHandle->Instance==TIM3)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a70      	ldr	r2, [pc, #448]	; (8001880 <HAL_TIM_Base_MspInit+0x2c8>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d131      	bne.n	8001728 <HAL_TIM_Base_MspInit+0x170>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016c4:	4b6c      	ldr	r3, [pc, #432]	; (8001878 <HAL_TIM_Base_MspInit+0x2c0>)
 80016c6:	69db      	ldr	r3, [r3, #28]
 80016c8:	4a6b      	ldr	r2, [pc, #428]	; (8001878 <HAL_TIM_Base_MspInit+0x2c0>)
 80016ca:	f043 0302 	orr.w	r3, r3, #2
 80016ce:	61d3      	str	r3, [r2, #28]
 80016d0:	4b69      	ldr	r3, [pc, #420]	; (8001878 <HAL_TIM_Base_MspInit+0x2c0>)
 80016d2:	69db      	ldr	r3, [r3, #28]
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80016da:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016dc:	4b66      	ldr	r3, [pc, #408]	; (8001878 <HAL_TIM_Base_MspInit+0x2c0>)
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	4a65      	ldr	r2, [pc, #404]	; (8001878 <HAL_TIM_Base_MspInit+0x2c0>)
 80016e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e6:	6153      	str	r3, [r2, #20]
 80016e8:	4b63      	ldr	r3, [pc, #396]	; (8001878 <HAL_TIM_Base_MspInit+0x2c0>)
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016f4:	2310      	movs	r3, #16
 80016f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f8:	2302      	movs	r3, #2
 80016fa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001704:	2302      	movs	r3, #2
 8001706:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001708:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800170c:	4619      	mov	r1, r3
 800170e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001712:	f001 f9b1 	bl	8002a78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2105      	movs	r1, #5
 800171a:	201d      	movs	r0, #29
 800171c:	f001 f90a 	bl	8002934 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001720:	201d      	movs	r0, #29
 8001722:	f001 f923 	bl	800296c <HAL_NVIC_EnableIRQ>
}
 8001726:	e0c6      	b.n	80018b6 <HAL_TIM_Base_MspInit+0x2fe>
  else if(tim_baseHandle->Instance==TIM4)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a55      	ldr	r2, [pc, #340]	; (8001884 <HAL_TIM_Base_MspInit+0x2cc>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d132      	bne.n	8001798 <HAL_TIM_Base_MspInit+0x1e0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001732:	4b51      	ldr	r3, [pc, #324]	; (8001878 <HAL_TIM_Base_MspInit+0x2c0>)
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	4a50      	ldr	r2, [pc, #320]	; (8001878 <HAL_TIM_Base_MspInit+0x2c0>)
 8001738:	f043 0304 	orr.w	r3, r3, #4
 800173c:	61d3      	str	r3, [r2, #28]
 800173e:	4b4e      	ldr	r3, [pc, #312]	; (8001878 <HAL_TIM_Base_MspInit+0x2c0>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	f003 0304 	and.w	r3, r3, #4
 8001746:	623b      	str	r3, [r7, #32]
 8001748:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174a:	4b4b      	ldr	r3, [pc, #300]	; (8001878 <HAL_TIM_Base_MspInit+0x2c0>)
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	4a4a      	ldr	r2, [pc, #296]	; (8001878 <HAL_TIM_Base_MspInit+0x2c0>)
 8001750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001754:	6153      	str	r3, [r2, #20]
 8001756:	4b48      	ldr	r3, [pc, #288]	; (8001878 <HAL_TIM_Base_MspInit+0x2c0>)
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175e:	61fb      	str	r3, [r7, #28]
 8001760:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001766:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001768:	2302      	movs	r3, #2
 800176a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2300      	movs	r3, #0
 8001772:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001774:	230a      	movs	r3, #10
 8001776:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001778:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800177c:	4619      	mov	r1, r3
 800177e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001782:	f001 f979 	bl	8002a78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001786:	2200      	movs	r2, #0
 8001788:	2105      	movs	r1, #5
 800178a:	201e      	movs	r0, #30
 800178c:	f001 f8d2 	bl	8002934 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001790:	201e      	movs	r0, #30
 8001792:	f001 f8eb 	bl	800296c <HAL_NVIC_EnableIRQ>
}
 8001796:	e08e      	b.n	80018b6 <HAL_TIM_Base_MspInit+0x2fe>
  else if(tim_baseHandle->Instance==TIM8)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a3a      	ldr	r2, [pc, #232]	; (8001888 <HAL_TIM_Base_MspInit+0x2d0>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d130      	bne.n	8001804 <HAL_TIM_Base_MspInit+0x24c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80017a2:	4b35      	ldr	r3, [pc, #212]	; (8001878 <HAL_TIM_Base_MspInit+0x2c0>)
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	4a34      	ldr	r2, [pc, #208]	; (8001878 <HAL_TIM_Base_MspInit+0x2c0>)
 80017a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017ac:	6193      	str	r3, [r2, #24]
 80017ae:	4b32      	ldr	r3, [pc, #200]	; (8001878 <HAL_TIM_Base_MspInit+0x2c0>)
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017b6:	61bb      	str	r3, [r7, #24]
 80017b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ba:	4b2f      	ldr	r3, [pc, #188]	; (8001878 <HAL_TIM_Base_MspInit+0x2c0>)
 80017bc:	695b      	ldr	r3, [r3, #20]
 80017be:	4a2e      	ldr	r2, [pc, #184]	; (8001878 <HAL_TIM_Base_MspInit+0x2c0>)
 80017c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017c4:	6153      	str	r3, [r2, #20]
 80017c6:	4b2c      	ldr	r3, [pc, #176]	; (8001878 <HAL_TIM_Base_MspInit+0x2c0>)
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80017d2:	2380      	movs	r3, #128	; 0x80
 80017d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d6:	2302      	movs	r3, #2
 80017d8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80017e2:	2304      	movs	r3, #4
 80017e4:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80017ea:	4619      	mov	r1, r3
 80017ec:	4823      	ldr	r0, [pc, #140]	; (800187c <HAL_TIM_Base_MspInit+0x2c4>)
 80017ee:	f001 f943 	bl	8002a78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 5, 0);
 80017f2:	2200      	movs	r2, #0
 80017f4:	2105      	movs	r1, #5
 80017f6:	202e      	movs	r0, #46	; 0x2e
 80017f8:	f001 f89c 	bl	8002934 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80017fc:	202e      	movs	r0, #46	; 0x2e
 80017fe:	f001 f8b5 	bl	800296c <HAL_NVIC_EnableIRQ>
}
 8001802:	e058      	b.n	80018b6 <HAL_TIM_Base_MspInit+0x2fe>
  else if(tim_baseHandle->Instance==TIM15)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a20      	ldr	r2, [pc, #128]	; (800188c <HAL_TIM_Base_MspInit+0x2d4>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d142      	bne.n	8001894 <HAL_TIM_Base_MspInit+0x2dc>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800180e:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <HAL_TIM_Base_MspInit+0x2c0>)
 8001810:	699b      	ldr	r3, [r3, #24]
 8001812:	4a19      	ldr	r2, [pc, #100]	; (8001878 <HAL_TIM_Base_MspInit+0x2c0>)
 8001814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001818:	6193      	str	r3, [r2, #24]
 800181a:	4b17      	ldr	r3, [pc, #92]	; (8001878 <HAL_TIM_Base_MspInit+0x2c0>)
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001826:	4b14      	ldr	r3, [pc, #80]	; (8001878 <HAL_TIM_Base_MspInit+0x2c0>)
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	4a13      	ldr	r2, [pc, #76]	; (8001878 <HAL_TIM_Base_MspInit+0x2c0>)
 800182c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001830:	6153      	str	r3, [r2, #20]
 8001832:	4b11      	ldr	r3, [pc, #68]	; (8001878 <HAL_TIM_Base_MspInit+0x2c0>)
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800183e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001842:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8001850:	2301      	movs	r3, #1
 8001852:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001854:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001858:	4619      	mov	r1, r3
 800185a:	480d      	ldr	r0, [pc, #52]	; (8001890 <HAL_TIM_Base_MspInit+0x2d8>)
 800185c:	f001 f90c 	bl	8002a78 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 5, 0);
 8001860:	2200      	movs	r2, #0
 8001862:	2105      	movs	r1, #5
 8001864:	2018      	movs	r0, #24
 8001866:	f001 f865 	bl	8002934 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800186a:	2018      	movs	r0, #24
 800186c:	f001 f87e 	bl	800296c <HAL_NVIC_EnableIRQ>
}
 8001870:	e021      	b.n	80018b6 <HAL_TIM_Base_MspInit+0x2fe>
 8001872:	bf00      	nop
 8001874:	40012c00 	.word	0x40012c00
 8001878:	40021000 	.word	0x40021000
 800187c:	48000800 	.word	0x48000800
 8001880:	40000400 	.word	0x40000400
 8001884:	40000800 	.word	0x40000800
 8001888:	40013400 	.word	0x40013400
 800188c:	40014000 	.word	0x40014000
 8001890:	48000400 	.word	0x48000400
  else if(tim_baseHandle->Instance==TIM16)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a09      	ldr	r2, [pc, #36]	; (80018c0 <HAL_TIM_Base_MspInit+0x308>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d10b      	bne.n	80018b6 <HAL_TIM_Base_MspInit+0x2fe>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <HAL_TIM_Base_MspInit+0x30c>)
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	4a08      	ldr	r2, [pc, #32]	; (80018c4 <HAL_TIM_Base_MspInit+0x30c>)
 80018a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018a8:	6193      	str	r3, [r2, #24]
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_TIM_Base_MspInit+0x30c>)
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	68bb      	ldr	r3, [r7, #8]
}
 80018b6:	bf00      	nop
 80018b8:	3750      	adds	r7, #80	; 0x50
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40014400 	.word	0x40014400
 80018c4:	40021000 	.word	0x40021000

080018c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08e      	sub	sp, #56	; 0x38
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a79      	ldr	r2, [pc, #484]	; (8001acc <HAL_TIM_MspPostInit+0x204>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d11c      	bne.n	8001924 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ea:	4b79      	ldr	r3, [pc, #484]	; (8001ad0 <HAL_TIM_MspPostInit+0x208>)
 80018ec:	695b      	ldr	r3, [r3, #20]
 80018ee:	4a78      	ldr	r2, [pc, #480]	; (8001ad0 <HAL_TIM_MspPostInit+0x208>)
 80018f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80018f4:	6153      	str	r3, [r2, #20]
 80018f6:	4b76      	ldr	r3, [pc, #472]	; (8001ad0 <HAL_TIM_MspPostInit+0x208>)
 80018f8:	695b      	ldr	r3, [r3, #20]
 80018fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018fe:	623b      	str	r3, [r7, #32]
 8001900:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001902:	2301      	movs	r3, #1
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001906:	2302      	movs	r3, #2
 8001908:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800190a:	2302      	movs	r3, #2
 800190c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800190e:	2303      	movs	r3, #3
 8001910:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001912:	2302      	movs	r3, #2
 8001914:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001916:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191a:	4619      	mov	r1, r3
 800191c:	486d      	ldr	r0, [pc, #436]	; (8001ad4 <HAL_TIM_MspPostInit+0x20c>)
 800191e:	f001 f8ab 	bl	8002a78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 8001922:	e0cf      	b.n	8001ac4 <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM2)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800192c:	d11d      	bne.n	800196a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192e:	4b68      	ldr	r3, [pc, #416]	; (8001ad0 <HAL_TIM_MspPostInit+0x208>)
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	4a67      	ldr	r2, [pc, #412]	; (8001ad0 <HAL_TIM_MspPostInit+0x208>)
 8001934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001938:	6153      	str	r3, [r2, #20]
 800193a:	4b65      	ldr	r3, [pc, #404]	; (8001ad0 <HAL_TIM_MspPostInit+0x208>)
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001942:	61fb      	str	r3, [r7, #28]
 8001944:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001946:	2301      	movs	r3, #1
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194a:	2302      	movs	r3, #2
 800194c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800194e:	2302      	movs	r3, #2
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001952:	2303      	movs	r3, #3
 8001954:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001956:	2301      	movs	r3, #1
 8001958:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800195e:	4619      	mov	r1, r3
 8001960:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001964:	f001 f888 	bl	8002a78 <HAL_GPIO_Init>
}
 8001968:	e0ac      	b.n	8001ac4 <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM3)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a5a      	ldr	r2, [pc, #360]	; (8001ad8 <HAL_TIM_MspPostInit+0x210>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d11d      	bne.n	80019b0 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001974:	4b56      	ldr	r3, [pc, #344]	; (8001ad0 <HAL_TIM_MspPostInit+0x208>)
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	4a55      	ldr	r2, [pc, #340]	; (8001ad0 <HAL_TIM_MspPostInit+0x208>)
 800197a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800197e:	6153      	str	r3, [r2, #20]
 8001980:	4b53      	ldr	r3, [pc, #332]	; (8001ad0 <HAL_TIM_MspPostInit+0x208>)
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001988:	61bb      	str	r3, [r7, #24]
 800198a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800198c:	2340      	movs	r3, #64	; 0x40
 800198e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001990:	2302      	movs	r3, #2
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001994:	2302      	movs	r3, #2
 8001996:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001998:	2303      	movs	r3, #3
 800199a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800199c:	2302      	movs	r3, #2
 800199e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a4:	4619      	mov	r1, r3
 80019a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019aa:	f001 f865 	bl	8002a78 <HAL_GPIO_Init>
}
 80019ae:	e089      	b.n	8001ac4 <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM4)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a49      	ldr	r2, [pc, #292]	; (8001adc <HAL_TIM_MspPostInit+0x214>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d11e      	bne.n	80019f8 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ba:	4b45      	ldr	r3, [pc, #276]	; (8001ad0 <HAL_TIM_MspPostInit+0x208>)
 80019bc:	695b      	ldr	r3, [r3, #20]
 80019be:	4a44      	ldr	r2, [pc, #272]	; (8001ad0 <HAL_TIM_MspPostInit+0x208>)
 80019c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c4:	6153      	str	r3, [r2, #20]
 80019c6:	4b42      	ldr	r3, [pc, #264]	; (8001ad0 <HAL_TIM_MspPostInit+0x208>)
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	617b      	str	r3, [r7, #20]
 80019d0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80019d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d8:	2302      	movs	r3, #2
 80019da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80019dc:	2302      	movs	r3, #2
 80019de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019e0:	2303      	movs	r3, #3
 80019e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 80019e4:	230a      	movs	r3, #10
 80019e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019ec:	4619      	mov	r1, r3
 80019ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f2:	f001 f841 	bl	8002a78 <HAL_GPIO_Init>
}
 80019f6:	e065      	b.n	8001ac4 <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM8)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a38      	ldr	r2, [pc, #224]	; (8001ae0 <HAL_TIM_MspPostInit+0x218>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d11c      	bne.n	8001a3c <HAL_TIM_MspPostInit+0x174>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a02:	4b33      	ldr	r3, [pc, #204]	; (8001ad0 <HAL_TIM_MspPostInit+0x208>)
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	4a32      	ldr	r2, [pc, #200]	; (8001ad0 <HAL_TIM_MspPostInit+0x208>)
 8001a08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001a0c:	6153      	str	r3, [r2, #20]
 8001a0e:	4b30      	ldr	r3, [pc, #192]	; (8001ad0 <HAL_TIM_MspPostInit+0x208>)
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a1a:	2340      	movs	r3, #64	; 0x40
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a22:	2302      	movs	r3, #2
 8001a24:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a26:	2303      	movs	r3, #3
 8001a28:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8001a2a:	2304      	movs	r3, #4
 8001a2c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a32:	4619      	mov	r1, r3
 8001a34:	4827      	ldr	r0, [pc, #156]	; (8001ad4 <HAL_TIM_MspPostInit+0x20c>)
 8001a36:	f001 f81f 	bl	8002a78 <HAL_GPIO_Init>
}
 8001a3a:	e043      	b.n	8001ac4 <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM15)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a28      	ldr	r2, [pc, #160]	; (8001ae4 <HAL_TIM_MspPostInit+0x21c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d11d      	bne.n	8001a82 <HAL_TIM_MspPostInit+0x1ba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a46:	4b22      	ldr	r3, [pc, #136]	; (8001ad0 <HAL_TIM_MspPostInit+0x208>)
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	4a21      	ldr	r2, [pc, #132]	; (8001ad0 <HAL_TIM_MspPostInit+0x208>)
 8001a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a50:	6153      	str	r3, [r2, #20]
 8001a52:	4b1f      	ldr	r3, [pc, #124]	; (8001ad0 <HAL_TIM_MspPostInit+0x208>)
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a5a:	60fb      	str	r3, [r7, #12]
 8001a5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001a5e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM15;
 8001a70:	2301      	movs	r3, #1
 8001a72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a78:	4619      	mov	r1, r3
 8001a7a:	481b      	ldr	r0, [pc, #108]	; (8001ae8 <HAL_TIM_MspPostInit+0x220>)
 8001a7c:	f000 fffc 	bl	8002a78 <HAL_GPIO_Init>
}
 8001a80:	e020      	b.n	8001ac4 <HAL_TIM_MspPostInit+0x1fc>
  else if(timHandle->Instance==TIM16)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a19      	ldr	r2, [pc, #100]	; (8001aec <HAL_TIM_MspPostInit+0x224>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d11b      	bne.n	8001ac4 <HAL_TIM_MspPostInit+0x1fc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a8c:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <HAL_TIM_MspPostInit+0x208>)
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	4a0f      	ldr	r2, [pc, #60]	; (8001ad0 <HAL_TIM_MspPostInit+0x208>)
 8001a92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a96:	6153      	str	r3, [r2, #20]
 8001a98:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <HAL_TIM_MspPostInit+0x208>)
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001aa4:	2310      	movs	r3, #16
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001aac:	2302      	movs	r3, #2
 8001aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001abc:	4619      	mov	r1, r3
 8001abe:	480a      	ldr	r0, [pc, #40]	; (8001ae8 <HAL_TIM_MspPostInit+0x220>)
 8001ac0:	f000 ffda 	bl	8002a78 <HAL_GPIO_Init>
}
 8001ac4:	bf00      	nop
 8001ac6:	3738      	adds	r7, #56	; 0x38
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	40012c00 	.word	0x40012c00
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	48000800 	.word	0x48000800
 8001ad8:	40000400 	.word	0x40000400
 8001adc:	40000800 	.word	0x40000800
 8001ae0:	40013400 	.word	0x40013400
 8001ae4:	40014000 	.word	0x40014000
 8001ae8:	48000400 	.word	0x48000400
 8001aec:	40014400 	.word	0x40014400

08001af0 <MX_UART4_Init>:
UART_HandleTypeDef huart4;
UART_HandleTypeDef huart2;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001af4:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <MX_UART4_Init+0x58>)
 8001af6:	4a15      	ldr	r2, [pc, #84]	; (8001b4c <MX_UART4_Init+0x5c>)
 8001af8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8001afa:	4b13      	ldr	r3, [pc, #76]	; (8001b48 <MX_UART4_Init+0x58>)
 8001afc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b00:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001b02:	4b11      	ldr	r3, [pc, #68]	; (8001b48 <MX_UART4_Init+0x58>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001b08:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <MX_UART4_Init+0x58>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001b0e:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <MX_UART4_Init+0x58>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <MX_UART4_Init+0x58>)
 8001b16:	220c      	movs	r2, #12
 8001b18:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b1a:	4b0b      	ldr	r3, [pc, #44]	; (8001b48 <MX_UART4_Init+0x58>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b20:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <MX_UART4_Init+0x58>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b26:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <MX_UART4_Init+0x58>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b2c:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <MX_UART4_Init+0x58>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001b32:	4805      	ldr	r0, [pc, #20]	; (8001b48 <MX_UART4_Init+0x58>)
 8001b34:	f004 fe0c 	bl	8006750 <HAL_UART_Init>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001b3e:	f7fe fe7d 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000384 	.word	0x20000384
 8001b4c:	40004c00 	.word	0x40004c00

08001b50 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b54:	4b14      	ldr	r3, [pc, #80]	; (8001ba8 <MX_USART2_UART_Init+0x58>)
 8001b56:	4a15      	ldr	r2, [pc, #84]	; (8001bac <MX_USART2_UART_Init+0x5c>)
 8001b58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001b5a:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <MX_USART2_UART_Init+0x58>)
 8001b5c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001b60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b62:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <MX_USART2_UART_Init+0x58>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b68:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <MX_USART2_UART_Init+0x58>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <MX_USART2_UART_Init+0x58>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <MX_USART2_UART_Init+0x58>)
 8001b76:	220c      	movs	r2, #12
 8001b78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <MX_USART2_UART_Init+0x58>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <MX_USART2_UART_Init+0x58>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b86:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <MX_USART2_UART_Init+0x58>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <MX_USART2_UART_Init+0x58>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b92:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <MX_USART2_UART_Init+0x58>)
 8001b94:	f004 fddc 	bl	8006750 <HAL_UART_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b9e:	f7fe fe4d 	bl	800083c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	2000040c 	.word	0x2000040c
 8001bac:	40004400 	.word	0x40004400

08001bb0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08c      	sub	sp, #48	; 0x30
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb8:	f107 031c 	add.w	r3, r7, #28
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a33      	ldr	r2, [pc, #204]	; (8001c9c <HAL_UART_MspInit+0xec>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d131      	bne.n	8001c36 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001bd2:	4b33      	ldr	r3, [pc, #204]	; (8001ca0 <HAL_UART_MspInit+0xf0>)
 8001bd4:	69db      	ldr	r3, [r3, #28]
 8001bd6:	4a32      	ldr	r2, [pc, #200]	; (8001ca0 <HAL_UART_MspInit+0xf0>)
 8001bd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001bdc:	61d3      	str	r3, [r2, #28]
 8001bde:	4b30      	ldr	r3, [pc, #192]	; (8001ca0 <HAL_UART_MspInit+0xf0>)
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001be6:	61bb      	str	r3, [r7, #24]
 8001be8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bea:	4b2d      	ldr	r3, [pc, #180]	; (8001ca0 <HAL_UART_MspInit+0xf0>)
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	4a2c      	ldr	r2, [pc, #176]	; (8001ca0 <HAL_UART_MspInit+0xf0>)
 8001bf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001bf4:	6153      	str	r3, [r2, #20]
 8001bf6:	4b2a      	ldr	r3, [pc, #168]	; (8001ca0 <HAL_UART_MspInit+0xf0>)
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c02:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c10:	2303      	movs	r3, #3
 8001c12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8001c14:	2305      	movs	r3, #5
 8001c16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c18:	f107 031c 	add.w	r3, r7, #28
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4821      	ldr	r0, [pc, #132]	; (8001ca4 <HAL_UART_MspInit+0xf4>)
 8001c20:	f000 ff2a 	bl	8002a78 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001c24:	2200      	movs	r2, #0
 8001c26:	2105      	movs	r1, #5
 8001c28:	2034      	movs	r0, #52	; 0x34
 8001c2a:	f000 fe83 	bl	8002934 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001c2e:	2034      	movs	r0, #52	; 0x34
 8001c30:	f000 fe9c 	bl	800296c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c34:	e02d      	b.n	8001c92 <HAL_UART_MspInit+0xe2>
  else if(uartHandle->Instance==USART2)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a1b      	ldr	r2, [pc, #108]	; (8001ca8 <HAL_UART_MspInit+0xf8>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d128      	bne.n	8001c92 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c40:	4b17      	ldr	r3, [pc, #92]	; (8001ca0 <HAL_UART_MspInit+0xf0>)
 8001c42:	69db      	ldr	r3, [r3, #28]
 8001c44:	4a16      	ldr	r2, [pc, #88]	; (8001ca0 <HAL_UART_MspInit+0xf0>)
 8001c46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c4a:	61d3      	str	r3, [r2, #28]
 8001c4c:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <HAL_UART_MspInit+0xf0>)
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c54:	613b      	str	r3, [r7, #16]
 8001c56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c58:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <HAL_UART_MspInit+0xf0>)
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	4a10      	ldr	r2, [pc, #64]	; (8001ca0 <HAL_UART_MspInit+0xf0>)
 8001c5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c62:	6153      	str	r3, [r2, #20]
 8001c64:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <HAL_UART_MspInit+0xf0>)
 8001c66:	695b      	ldr	r3, [r3, #20]
 8001c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c70:	230c      	movs	r3, #12
 8001c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c80:	2307      	movs	r3, #7
 8001c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c84:	f107 031c 	add.w	r3, r7, #28
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c8e:	f000 fef3 	bl	8002a78 <HAL_GPIO_Init>
}
 8001c92:	bf00      	nop
 8001c94:	3730      	adds	r7, #48	; 0x30
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40004c00 	.word	0x40004c00
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	48000800 	.word	0x48000800
 8001ca8:	40004400 	.word	0x40004400

08001cac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ce4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cb0:	f7fe ffbc 	bl	8000c2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cb4:	480c      	ldr	r0, [pc, #48]	; (8001ce8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cb6:	490d      	ldr	r1, [pc, #52]	; (8001cec <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cb8:	4a0d      	ldr	r2, [pc, #52]	; (8001cf0 <LoopForever+0xe>)
  movs r3, #0
 8001cba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cbc:	e002      	b.n	8001cc4 <LoopCopyDataInit>

08001cbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cc2:	3304      	adds	r3, #4

08001cc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc8:	d3f9      	bcc.n	8001cbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cca:	4a0a      	ldr	r2, [pc, #40]	; (8001cf4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ccc:	4c0a      	ldr	r4, [pc, #40]	; (8001cf8 <LoopForever+0x16>)
  movs r3, #0
 8001cce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cd0:	e001      	b.n	8001cd6 <LoopFillZerobss>

08001cd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd4:	3204      	adds	r2, #4

08001cd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd8:	d3fb      	bcc.n	8001cd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cda:	f009 fcc1 	bl	800b660 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cde:	f7fe fd17 	bl	8000710 <main>

08001ce2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ce2:	e7fe      	b.n	8001ce2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ce4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cec:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8001cf0:	0800c504 	.word	0x0800c504
  ldr r2, =_sbss
 8001cf4:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8001cf8:	2000283c 	.word	0x2000283c

08001cfc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cfc:	e7fe      	b.n	8001cfc <ADC1_2_IRQHandler>
	...

08001d00 <HAL_UART_RxCpltCallback>:

uint8_t Bluetooth_RX_Data = 'S';
uint8_t temp = 0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	printf("----------------------> is %c\n",temp);
 8001d08:	4b27      	ldr	r3, [pc, #156]	; (8001da8 <HAL_UART_RxCpltCallback+0xa8>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4827      	ldr	r0, [pc, #156]	; (8001dac <HAL_UART_RxCpltCallback+0xac>)
 8001d10:	f009 fab6 	bl	800b280 <iprintf>
	if( BLUETOOTH_CONDITION(temp) ){
 8001d14:	4b24      	ldr	r3, [pc, #144]	; (8001da8 <HAL_UART_RxCpltCallback+0xa8>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b46      	cmp	r3, #70	; 0x46
 8001d1a:	d037      	beq.n	8001d8c <HAL_UART_RxCpltCallback+0x8c>
 8001d1c:	4b22      	ldr	r3, [pc, #136]	; (8001da8 <HAL_UART_RxCpltCallback+0xa8>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b42      	cmp	r3, #66	; 0x42
 8001d22:	d033      	beq.n	8001d8c <HAL_UART_RxCpltCallback+0x8c>
 8001d24:	4b20      	ldr	r3, [pc, #128]	; (8001da8 <HAL_UART_RxCpltCallback+0xa8>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b47      	cmp	r3, #71	; 0x47
 8001d2a:	d02f      	beq.n	8001d8c <HAL_UART_RxCpltCallback+0x8c>
 8001d2c:	4b1e      	ldr	r3, [pc, #120]	; (8001da8 <HAL_UART_RxCpltCallback+0xa8>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b49      	cmp	r3, #73	; 0x49
 8001d32:	d02b      	beq.n	8001d8c <HAL_UART_RxCpltCallback+0x8c>
 8001d34:	4b1c      	ldr	r3, [pc, #112]	; (8001da8 <HAL_UART_RxCpltCallback+0xa8>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b48      	cmp	r3, #72	; 0x48
 8001d3a:	d027      	beq.n	8001d8c <HAL_UART_RxCpltCallback+0x8c>
 8001d3c:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <HAL_UART_RxCpltCallback+0xa8>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b4a      	cmp	r3, #74	; 0x4a
 8001d42:	d023      	beq.n	8001d8c <HAL_UART_RxCpltCallback+0x8c>
 8001d44:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <HAL_UART_RxCpltCallback+0xa8>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b52      	cmp	r3, #82	; 0x52
 8001d4a:	d01f      	beq.n	8001d8c <HAL_UART_RxCpltCallback+0x8c>
 8001d4c:	4b16      	ldr	r3, [pc, #88]	; (8001da8 <HAL_UART_RxCpltCallback+0xa8>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b4c      	cmp	r3, #76	; 0x4c
 8001d52:	d01b      	beq.n	8001d8c <HAL_UART_RxCpltCallback+0x8c>
 8001d54:	4b14      	ldr	r3, [pc, #80]	; (8001da8 <HAL_UART_RxCpltCallback+0xa8>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	2b53      	cmp	r3, #83	; 0x53
 8001d5a:	d017      	beq.n	8001d8c <HAL_UART_RxCpltCallback+0x8c>
 8001d5c:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <HAL_UART_RxCpltCallback+0xa8>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b23      	cmp	r3, #35	; 0x23
 8001d62:	d013      	beq.n	8001d8c <HAL_UART_RxCpltCallback+0x8c>
 8001d64:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <HAL_UART_RxCpltCallback+0xa8>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b40      	cmp	r3, #64	; 0x40
 8001d6a:	d00f      	beq.n	8001d8c <HAL_UART_RxCpltCallback+0x8c>
 8001d6c:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <HAL_UART_RxCpltCallback+0xa8>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b21      	cmp	r3, #33	; 0x21
 8001d72:	d00b      	beq.n	8001d8c <HAL_UART_RxCpltCallback+0x8c>
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <HAL_UART_RxCpltCallback+0xa8>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b57      	cmp	r3, #87	; 0x57
 8001d7a:	d007      	beq.n	8001d8c <HAL_UART_RxCpltCallback+0x8c>
 8001d7c:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <HAL_UART_RxCpltCallback+0xa8>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b55      	cmp	r3, #85	; 0x55
 8001d82:	d003      	beq.n	8001d8c <HAL_UART_RxCpltCallback+0x8c>
 8001d84:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <HAL_UART_RxCpltCallback+0xa8>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b77      	cmp	r3, #119	; 0x77
 8001d8a:	d103      	bne.n	8001d94 <HAL_UART_RxCpltCallback+0x94>
		Bluetooth_RX_Data = temp;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <HAL_UART_RxCpltCallback+0xa8>)
 8001d8e:	781a      	ldrb	r2, [r3, #0]
 8001d90:	4b07      	ldr	r3, [pc, #28]	; (8001db0 <HAL_UART_RxCpltCallback+0xb0>)
 8001d92:	701a      	strb	r2, [r3, #0]
		//printf("ISR is %c\n",Bluetooth_RX_Data);
	}
	HAL_UART_Receive_IT(huart, &temp, 1);
 8001d94:	2201      	movs	r2, #1
 8001d96:	4904      	ldr	r1, [pc, #16]	; (8001da8 <HAL_UART_RxCpltCallback+0xa8>)
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f004 fd27 	bl	80067ec <HAL_UART_Receive_IT>
}
 8001d9e:	bf00      	nop
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000494 	.word	0x20000494
 8001dac:	0800c2f0 	.word	0x0800c2f0
 8001db0:	20000064 	.word	0x20000064

08001db4 <ECU_Bluetooth_ReciveData>:
  *
  * @param  bluetooth_obj: bluetooth handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Bluetooth_ReciveData(const bluetooth_obj_t *bluetooth_obj){
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == bluetooth_obj)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <ECU_Bluetooth_ReciveData+0x12>
	{
		return ECU_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e009      	b.n	8001dda <ECU_Bluetooth_ReciveData+0x26>
	}

	HAL_UART_Receive_IT(bluetooth_obj->huart, &temp, bluetooth_obj->Numberofdata);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6818      	ldr	r0, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	791b      	ldrb	r3, [r3, #4]
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4904      	ldr	r1, [pc, #16]	; (8001de4 <ECU_Bluetooth_ReciveData+0x30>)
 8001dd4:	f004 fd0a 	bl	80067ec <HAL_UART_Receive_IT>

	return ECU_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000494 	.word	0x20000494

08001de8 <ECU_Motor_GeneratePWM>:
  * @param  Period of the PWM signal in Microseconds
  * @param  Duty Cycle for the generated wave
  *          This parameter can be in the floating range values of 0 to 1:
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_GeneratePWM(motor_obj_t *motor_obj){
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]

	uint32_t Period = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60fb      	str	r3, [r7, #12]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <ECU_Motor_GeneratePWM+0x16>
	{
		return ECU_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e07e      	b.n	8001efc <ECU_Motor_GeneratePWM+0x114>
	}

	/* Check the TIM channel state */
	if (TIM_CHANNEL_STATE_GET(motor_obj->htim, motor_obj->PWM_Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10a      	bne.n	8001e1c <ECU_Motor_GeneratePWM+0x34>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	bf14      	ite	ne
 8001e14:	2301      	movne	r3, #1
 8001e16:	2300      	moveq	r3, #0
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	e045      	b.n	8001ea8 <ECU_Motor_GeneratePWM+0xc0>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d10a      	bne.n	8001e3a <ECU_Motor_GeneratePWM+0x52>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	bf14      	ite	ne
 8001e32:	2301      	movne	r3, #1
 8001e34:	2300      	moveq	r3, #0
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	e036      	b.n	8001ea8 <ECU_Motor_GeneratePWM+0xc0>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b08      	cmp	r3, #8
 8001e40:	d10a      	bne.n	8001e58 <ECU_Motor_GeneratePWM+0x70>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	bf14      	ite	ne
 8001e50:	2301      	movne	r3, #1
 8001e52:	2300      	moveq	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	e027      	b.n	8001ea8 <ECU_Motor_GeneratePWM+0xc0>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b0c      	cmp	r3, #12
 8001e5e:	d10a      	bne.n	8001e76 <ECU_Motor_GeneratePWM+0x8e>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	bf14      	ite	ne
 8001e6e:	2301      	movne	r3, #1
 8001e70:	2300      	moveq	r3, #0
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	e018      	b.n	8001ea8 <ECU_Motor_GeneratePWM+0xc0>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b10      	cmp	r3, #16
 8001e7c:	d10a      	bne.n	8001e94 <ECU_Motor_GeneratePWM+0xac>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	bf14      	ite	ne
 8001e8c:	2301      	movne	r3, #1
 8001e8e:	2300      	moveq	r3, #0
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	e009      	b.n	8001ea8 <ECU_Motor_GeneratePWM+0xc0>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	bf14      	ite	ne
 8001ea2:	2301      	movne	r3, #1
 8001ea4:	2300      	moveq	r3, #0
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <ECU_Motor_GeneratePWM+0xc8>
	{
		return ECU_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e025      	b.n	8001efc <ECU_Motor_GeneratePWM+0x114>
	}

	/* Convert Frequency (Hz) to Period (us) */
	Period = (uint32_t)(1000000 /(motor_obj->speed.Frequency));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	4a13      	ldr	r2, [pc, #76]	; (8001f04 <ECU_Motor_GeneratePWM+0x11c>)
 8001eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eba:	60fb      	str	r3, [r7, #12]

	/* Update The Timer with the new Period */
	motor_obj->htim->Instance->ARR = Period;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Update The Timer with the new Duty cycle */
	motor_obj->htim->Instance->CCR1 = (uint32_t)(Period * (motor_obj->speed.Duty_Cycle));
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	ee07 3a90 	vmov	s15, r3
 8001ecc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ee4:	ee17 2a90 	vmov	r2, s15
 8001ee8:	635a      	str	r2, [r3, #52]	; 0x34

	/* Starts the PWM signal generation */
	HAL_TIM_PWM_Start(motor_obj->htim, motor_obj->PWM_Channel);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	f002 fd65 	bl	80049c4 <HAL_TIM_PWM_Start>

	return ECU_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	000f4240 	.word	0x000f4240

08001f08 <ECU_Motor_ChangeSpeed>:
  * @param  speed: Speed of motor
  *         the can be either ( &high_speed or &medium_speed or &low_speed )
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_ChangeSpeed(motor_obj_t *motor_obj, const motor_speed_t *speed){
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
	/* Check NULL Pointer */
	if ( (NULL == motor_obj) || (NULL == speed))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d002      	beq.n	8001f1e <ECU_Motor_ChangeSpeed+0x16>
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <ECU_Motor_ChangeSpeed+0x1a>
	{
		return ECU_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e00b      	b.n	8001f3a <ECU_Motor_ChangeSpeed+0x32>
	}

	/* Update the Frequency of PWM Signal */
	motor_obj->speed.Frequency = speed->Frequency;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	609a      	str	r2, [r3, #8]

	/* Update the Duty Cycle of PWM Signal */
	motor_obj->speed.Duty_Cycle = speed->Duty_Cycle;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	60da      	str	r2, [r3, #12]

	/* Starts the Updated PWM signal generation */
	ECU_Motor_GeneratePWM(motor_obj);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f7ff ff58 	bl	8001de8 <ECU_Motor_GeneratePWM>

	return ECU_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <ECU_Motor_NextStep>:
  * @param  direction: Direction of the Motor
  * @param  speed: Speed of the Motor
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_NextStep(motor_obj_t *motor_obj, uint8_t *direction){
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
	/* Check NULL Pointer */
	if ((NULL == motor_obj) || (NULL == direction))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <ECU_Motor_NextStep+0x16>
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <ECU_Motor_NextStep+0x1a>
	{
		return ECU_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e0a3      	b.n	80020a6 <ECU_Motor_NextStep+0x162>
	}

	/* Stop the PWM signal generation */
	switch(*direction)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	3b21      	subs	r3, #33	; 0x21
 8001f64:	2b32      	cmp	r3, #50	; 0x32
 8001f66:	f200 8099 	bhi.w	800209c <ECU_Motor_NextStep+0x158>
 8001f6a:	a201      	add	r2, pc, #4	; (adr r2, 8001f70 <ECU_Motor_NextStep+0x2c>)
 8001f6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f70:	08002095 	.word	0x08002095
 8001f74:	0800209d 	.word	0x0800209d
 8001f78:	08002085 	.word	0x08002085
 8001f7c:	0800209d 	.word	0x0800209d
 8001f80:	0800209d 	.word	0x0800209d
 8001f84:	0800209d 	.word	0x0800209d
 8001f88:	0800209d 	.word	0x0800209d
 8001f8c:	0800209d 	.word	0x0800209d
 8001f90:	0800209d 	.word	0x0800209d
 8001f94:	0800209d 	.word	0x0800209d
 8001f98:	0800209d 	.word	0x0800209d
 8001f9c:	0800209d 	.word	0x0800209d
 8001fa0:	0800209d 	.word	0x0800209d
 8001fa4:	0800209d 	.word	0x0800209d
 8001fa8:	0800209d 	.word	0x0800209d
 8001fac:	0800209d 	.word	0x0800209d
 8001fb0:	0800209d 	.word	0x0800209d
 8001fb4:	0800209d 	.word	0x0800209d
 8001fb8:	0800209d 	.word	0x0800209d
 8001fbc:	0800209d 	.word	0x0800209d
 8001fc0:	0800209d 	.word	0x0800209d
 8001fc4:	0800209d 	.word	0x0800209d
 8001fc8:	0800209d 	.word	0x0800209d
 8001fcc:	0800209d 	.word	0x0800209d
 8001fd0:	0800209d 	.word	0x0800209d
 8001fd4:	0800209d 	.word	0x0800209d
 8001fd8:	0800209d 	.word	0x0800209d
 8001fdc:	0800209d 	.word	0x0800209d
 8001fe0:	0800209d 	.word	0x0800209d
 8001fe4:	0800209d 	.word	0x0800209d
 8001fe8:	0800209d 	.word	0x0800209d
 8001fec:	0800208d 	.word	0x0800208d
 8001ff0:	0800209d 	.word	0x0800209d
 8001ff4:	08002045 	.word	0x08002045
 8001ff8:	0800209d 	.word	0x0800209d
 8001ffc:	0800209d 	.word	0x0800209d
 8002000:	0800209d 	.word	0x0800209d
 8002004:	0800203d 	.word	0x0800203d
 8002008:	0800204d 	.word	0x0800204d
 800200c:	0800205d 	.word	0x0800205d
 8002010:	08002055 	.word	0x08002055
 8002014:	08002065 	.word	0x08002065
 8002018:	0800209d 	.word	0x0800209d
 800201c:	08002075 	.word	0x08002075
 8002020:	0800209d 	.word	0x0800209d
 8002024:	0800209d 	.word	0x0800209d
 8002028:	0800209d 	.word	0x0800209d
 800202c:	0800209d 	.word	0x0800209d
 8002030:	0800209d 	.word	0x0800209d
 8002034:	0800206d 	.word	0x0800206d
 8002038:	0800207d 	.word	0x0800207d
	{
		case FORWARD:       ECU_Motor_MoveForward     (motor_obj); break;
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f000 f83d 	bl	80020bc <ECU_Motor_MoveForward>
 8002042:	e02f      	b.n	80020a4 <ECU_Motor_NextStep+0x160>
		case REVERSE:       ECU_Motor_MoveReverse     (motor_obj); break;
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f000 f85b 	bl	8002100 <ECU_Motor_MoveReverse>
 800204a:	e02b      	b.n	80020a4 <ECU_Motor_NextStep+0x160>
		case FORWARD_LEFT:  ECU_Motor_MoveForwardLeft (motor_obj); break;
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f000 f8a9 	bl	80021a4 <ECU_Motor_MoveForwardLeft>
 8002052:	e027      	b.n	80020a4 <ECU_Motor_NextStep+0x160>
		case FORWARD_RIGHT: ECU_Motor_MoveForwardRight(motor_obj); break;
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f875 	bl	8002144 <ECU_Motor_MoveForwardRight>
 800205a:	e023      	b.n	80020a4 <ECU_Motor_NextStep+0x160>
		case REVERSE_LEFT:  ECU_Motor_MoveReverseLeft (motor_obj); break;
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 f905 	bl	800226c <ECU_Motor_MoveReverseLeft>
 8002062:	e01f      	b.n	80020a4 <ECU_Motor_NextStep+0x160>
		case REVERSE_RIGHT: ECU_Motor_MoveReverseRight(motor_obj); break;
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 f8cd 	bl	8002204 <ECU_Motor_MoveReverseRight>
 800206a:	e01b      	b.n	80020a4 <ECU_Motor_NextStep+0x160>
		case RIGHT:         ECU_Motor_MoveRight       (motor_obj); break;
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f95d 	bl	800232c <ECU_Motor_MoveRight>
 8002072:	e017      	b.n	80020a4 <ECU_Motor_NextStep+0x160>
		case LEFT:          ECU_Motor_MoveLeft        (motor_obj); break;
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f989 	bl	800238c <ECU_Motor_MoveLeft>
 800207a:	e013      	b.n	80020a4 <ECU_Motor_NextStep+0x160>
		case STOP:          ECU_Motor_Stop            (motor_obj); break;
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f925 	bl	80022cc <ECU_Motor_Stop>
 8002082:	e00f      	b.n	80020a4 <ECU_Motor_NextStep+0x160>
		case HIGH_SPEED:    ECU_Motor_ChangeSpeed     (motor_obj, &high_speed);
 8002084:	490a      	ldr	r1, [pc, #40]	; (80020b0 <ECU_Motor_NextStep+0x16c>)
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff ff3e 	bl	8001f08 <ECU_Motor_ChangeSpeed>
		case MEDIUM_SPEED:  ECU_Motor_ChangeSpeed     (motor_obj, &medium_speed);
 800208c:	4909      	ldr	r1, [pc, #36]	; (80020b4 <ECU_Motor_NextStep+0x170>)
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff ff3a 	bl	8001f08 <ECU_Motor_ChangeSpeed>
		case LOW_SPEED:     ECU_Motor_ChangeSpeed     (motor_obj, &low_speed);
 8002094:	4908      	ldr	r1, [pc, #32]	; (80020b8 <ECU_Motor_NextStep+0x174>)
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff ff36 	bl	8001f08 <ECU_Motor_ChangeSpeed>
		default:            ECU_Motor_Stop            (motor_obj); break;
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f915 	bl	80022cc <ECU_Motor_Stop>
 80020a2:	bf00      	nop
	}

	return ECU_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000068 	.word	0x20000068
 80020b4:	20000070 	.word	0x20000070
 80020b8:	20000078 	.word	0x20000078

080020bc <ECU_Motor_MoveForward>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveForward(motor_obj_t *motor_obj){
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d101      	bne.n	80020ce <ECU_Motor_MoveForward+0x12>
	{
		return ECU_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e011      	b.n	80020f2 <ECU_Motor_MoveForward+0x36>
	}

	printf("Motor_MoveForward\n");
 80020ce:	480b      	ldr	r0, [pc, #44]	; (80020fc <ECU_Motor_MoveForward+0x40>)
 80020d0:	f009 f93c 	bl	800b34c <puts>

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_RESET);

	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 80020d4:	2201      	movs	r2, #1
 80020d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020de:	f000 fe55 	bl	8002d8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 80020e2:	2200      	movs	r2, #0
 80020e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ec:	f000 fe4e 	bl	8002d8c <HAL_GPIO_WritePin>

	return ECU_OK;
 80020f0:	2300      	movs	r3, #0
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	0800c310 	.word	0x0800c310

08002100 <ECU_Motor_MoveReverse>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveReverse(motor_obj_t *motor_obj){
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <ECU_Motor_MoveReverse+0x12>
	{
		return ECU_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e011      	b.n	8002136 <ECU_Motor_MoveReverse+0x36>
	}

	printf("MoveReverse\n");
 8002112:	480b      	ldr	r0, [pc, #44]	; (8002140 <ECU_Motor_MoveReverse+0x40>)
 8002114:	f009 f91a 	bl	800b34c <puts>

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_RESET);

	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8002118:	2200      	movs	r2, #0
 800211a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800211e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002122:	f000 fe33 	bl	8002d8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 8002126:	2201      	movs	r2, #1
 8002128:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800212c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002130:	f000 fe2c 	bl	8002d8c <HAL_GPIO_WritePin>

	return ECU_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	0800c324 	.word	0x0800c324

08002144 <ECU_Motor_MoveForwardRight>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveForwardRight(motor_obj_t *motor_obj){
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <ECU_Motor_MoveForwardRight+0x12>
	{
		return ECU_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e01d      	b.n	8002192 <ECU_Motor_MoveForwardRight+0x4e>
	}

	printf("MoveForwardRight\n");
 8002156:	4811      	ldr	r0, [pc, #68]	; (800219c <ECU_Motor_MoveForwardRight+0x58>)
 8002158:	f009 f8f8 	bl	800b34c <puts>

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 800215c:	2201      	movs	r2, #1
 800215e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002162:	480f      	ldr	r0, [pc, #60]	; (80021a0 <ECU_Motor_MoveForwardRight+0x5c>)
 8002164:	f000 fe12 	bl	8002d8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8002168:	2200      	movs	r2, #0
 800216a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800216e:	480c      	ldr	r0, [pc, #48]	; (80021a0 <ECU_Motor_MoveForwardRight+0x5c>)
 8002170:	f000 fe0c 	bl	8002d8c <HAL_GPIO_WritePin>
	//HAL_Delay(50);
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 8002174:	2201      	movs	r2, #1
 8002176:	f44f 7100 	mov.w	r1, #512	; 0x200
 800217a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800217e:	f000 fe05 	bl	8002d8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8002182:	2200      	movs	r2, #0
 8002184:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002188:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800218c:	f000 fdfe 	bl	8002d8c <HAL_GPIO_WritePin>

	return ECU_OK;
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	0800c330 	.word	0x0800c330
 80021a0:	48000800 	.word	0x48000800

080021a4 <ECU_Motor_MoveForwardLeft>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveForwardLeft(motor_obj_t *motor_obj){
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d101      	bne.n	80021b6 <ECU_Motor_MoveForwardLeft+0x12>
	{
		return ECU_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e01d      	b.n	80021f2 <ECU_Motor_MoveForwardLeft+0x4e>
	}

	printf("MoveForwardLeft\n");
 80021b6:	4811      	ldr	r0, [pc, #68]	; (80021fc <ECU_Motor_MoveForwardLeft+0x58>)
 80021b8:	f009 f8c8 	bl	800b34c <puts>

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 80021bc:	2200      	movs	r2, #0
 80021be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021c2:	480f      	ldr	r0, [pc, #60]	; (8002200 <ECU_Motor_MoveForwardLeft+0x5c>)
 80021c4:	f000 fde2 	bl	8002d8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 80021c8:	2201      	movs	r2, #1
 80021ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021ce:	480c      	ldr	r0, [pc, #48]	; (8002200 <ECU_Motor_MoveForwardLeft+0x5c>)
 80021d0:	f000 fddc 	bl	8002d8c <HAL_GPIO_WritePin>
	//HAL_Delay(50);
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 80021d4:	2201      	movs	r2, #1
 80021d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021de:	f000 fdd5 	bl	8002d8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 80021e2:	2200      	movs	r2, #0
 80021e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021ec:	f000 fdce 	bl	8002d8c <HAL_GPIO_WritePin>

	return ECU_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	0800c344 	.word	0x0800c344
 8002200:	48000800 	.word	0x48000800

08002204 <ECU_Motor_MoveReverseRight>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveReverseRight(motor_obj_t *motor_obj){
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <ECU_Motor_MoveReverseRight+0x12>
	{
		return ECU_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e021      	b.n	800225a <ECU_Motor_MoveReverseRight+0x56>
	}

	printf("MoveReverseRight\n");
 8002216:	4813      	ldr	r0, [pc, #76]	; (8002264 <ECU_Motor_MoveReverseRight+0x60>)
 8002218:	f009 f898 	bl	800b34c <puts>

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 800221c:	2201      	movs	r2, #1
 800221e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002222:	4811      	ldr	r0, [pc, #68]	; (8002268 <ECU_Motor_MoveReverseRight+0x64>)
 8002224:	f000 fdb2 	bl	8002d8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8002228:	2200      	movs	r2, #0
 800222a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800222e:	480e      	ldr	r0, [pc, #56]	; (8002268 <ECU_Motor_MoveReverseRight+0x64>)
 8002230:	f000 fdac 	bl	8002d8c <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 8002234:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002238:	f000 faa0 	bl	800277c <HAL_Delay>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 800223c:	2200      	movs	r2, #0
 800223e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002246:	f000 fda1 	bl	8002d8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 800224a:	2201      	movs	r2, #1
 800224c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002254:	f000 fd9a 	bl	8002d8c <HAL_GPIO_WritePin>

	return ECU_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	0800c354 	.word	0x0800c354
 8002268:	48000800 	.word	0x48000800

0800226c <ECU_Motor_MoveReverseLeft>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveReverseLeft(motor_obj_t *motor_obj){
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <ECU_Motor_MoveReverseLeft+0x12>
	{
		return ECU_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e01d      	b.n	80022ba <ECU_Motor_MoveReverseLeft+0x4e>
	}

	printf("MoveReverseLeft\n");
 800227e:	4811      	ldr	r0, [pc, #68]	; (80022c4 <ECU_Motor_MoveReverseLeft+0x58>)
 8002280:	f009 f864 	bl	800b34c <puts>

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 8002284:	2200      	movs	r2, #0
 8002286:	f44f 7180 	mov.w	r1, #256	; 0x100
 800228a:	480f      	ldr	r0, [pc, #60]	; (80022c8 <ECU_Motor_MoveReverseLeft+0x5c>)
 800228c:	f000 fd7e 	bl	8002d8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 8002290:	2201      	movs	r2, #1
 8002292:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002296:	480c      	ldr	r0, [pc, #48]	; (80022c8 <ECU_Motor_MoveReverseLeft+0x5c>)
 8002298:	f000 fd78 	bl	8002d8c <HAL_GPIO_WritePin>
	//HAL_Delay(50);
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 800229c:	2200      	movs	r2, #0
 800229e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022a6:	f000 fd71 	bl	8002d8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 80022aa:	2201      	movs	r2, #1
 80022ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022b4:	f000 fd6a 	bl	8002d8c <HAL_GPIO_WritePin>

	return ECU_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	0800c368 	.word	0x0800c368
 80022c8:	48000800 	.word	0x48000800

080022cc <ECU_Motor_Stop>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_Stop(motor_obj_t *motor_obj){
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <ECU_Motor_Stop+0x12>
	{
		return ECU_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e01d      	b.n	800231a <ECU_Motor_Stop+0x4e>
	}

	printf("Stop\n");
 80022de:	4811      	ldr	r0, [pc, #68]	; (8002324 <ECU_Motor_Stop+0x58>)
 80022e0:	f009 f834 	bl	800b34c <puts>

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_RESET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 80022e4:	2200      	movs	r2, #0
 80022e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022ea:	480f      	ldr	r0, [pc, #60]	; (8002328 <ECU_Motor_Stop+0x5c>)
 80022ec:	f000 fd4e 	bl	8002d8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 80022f0:	2200      	movs	r2, #0
 80022f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022f6:	480c      	ldr	r0, [pc, #48]	; (8002328 <ECU_Motor_Stop+0x5c>)
 80022f8:	f000 fd48 	bl	8002d8c <HAL_GPIO_WritePin>
	//HAL_Delay(50);
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 80022fc:	2201      	movs	r2, #1
 80022fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002302:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002306:	f000 fd41 	bl	8002d8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 800230a:	2201      	movs	r2, #1
 800230c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002310:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002314:	f000 fd3a 	bl	8002d8c <HAL_GPIO_WritePin>

	return ECU_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3708      	adds	r7, #8
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	0800c378 	.word	0x0800c378
 8002328:	48000800 	.word	0x48000800

0800232c <ECU_Motor_MoveRight>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveRight(motor_obj_t *motor_obj){
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <ECU_Motor_MoveRight+0x12>
	{
		return ECU_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e01d      	b.n	800237a <ECU_Motor_MoveRight+0x4e>
	}

	printf("MoveRight\n");
 800233e:	4811      	ldr	r0, [pc, #68]	; (8002384 <ECU_Motor_MoveRight+0x58>)
 8002340:	f009 f804 	bl	800b34c <puts>

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_SET);
 8002344:	2201      	movs	r2, #1
 8002346:	f44f 7180 	mov.w	r1, #256	; 0x100
 800234a:	480f      	ldr	r0, [pc, #60]	; (8002388 <ECU_Motor_MoveRight+0x5c>)
 800234c:	f000 fd1e 	bl	8002d8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 8002350:	2200      	movs	r2, #0
 8002352:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002356:	480c      	ldr	r0, [pc, #48]	; (8002388 <ECU_Motor_MoveRight+0x5c>)
 8002358:	f000 fd18 	bl	8002d8c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 800235c:	2200      	movs	r2, #0
 800235e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002362:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002366:	f000 fd11 	bl	8002d8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 800236a:	2200      	movs	r2, #0
 800236c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002370:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002374:	f000 fd0a 	bl	8002d8c <HAL_GPIO_WritePin>

	return ECU_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	0800c380 	.word	0x0800c380
 8002388:	48000800 	.word	0x48000800

0800238c <ECU_Motor_MoveLeft>:
  *
  * @param  motor_obj: Motor handle
  *
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Motor_MoveLeft(motor_obj_t *motor_obj){
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == motor_obj)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <ECU_Motor_MoveLeft+0x12>
	{
		return ECU_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e01d      	b.n	80023da <ECU_Motor_MoveLeft+0x4e>
	}

	printf("MoveLeft\n");
 800239e:	4811      	ldr	r0, [pc, #68]	; (80023e4 <ECU_Motor_MoveLeft+0x58>)
 80023a0:	f008 ffd4 	bl	800b34c <puts>

	//HAL_GPIO_WritePin(STEERING_MOTOR_EN_PORT, STEERING_MOTOR_EN_PIN, GPIO_PIN_SET);

	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 80023a4:	2200      	movs	r2, #0
 80023a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023aa:	480f      	ldr	r0, [pc, #60]	; (80023e8 <ECU_Motor_MoveLeft+0x5c>)
 80023ac:	f000 fcee 	bl	8002d8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(STEERING_MOTOR_PORT, STEERING_MOTOR_NEGITVE_PIN, GPIO_PIN_SET);
 80023b0:	2201      	movs	r2, #1
 80023b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023b6:	480c      	ldr	r0, [pc, #48]	; (80023e8 <ECU_Motor_MoveLeft+0x5c>)
 80023b8:	f000 fce8 	bl	8002d8c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_POSITIVE_PIN, GPIO_PIN_RESET);
 80023bc:	2200      	movs	r2, #0
 80023be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023c6:	f000 fce1 	bl	8002d8c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOVING_MOTOR_PORT, MOVING_MOTOR_NEGITVE_PIN, GPIO_PIN_RESET);
 80023ca:	2200      	movs	r2, #0
 80023cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023d4:	f000 fcda 	bl	8002d8c <HAL_GPIO_WritePin>

	return ECU_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	0800c38c 	.word	0x0800c38c
 80023e8:	48000800 	.word	0x48000800

080023ec <HAL_TIM_IC_CaptureCallback>:

/* Helper Function to Capture the Time of the Falling Edge and calculate the distance */
static void IC_second_Capture(TIM_HandleTypeDef *htim, uint32_t *IC_Val1, uint32_t *IC_Val2, uint32_t *IC_difference, uint8_t *Is_first_Capture);

/* Implementation of Timer Input Capture Callback function */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80023ec:	b590      	push	{r4, r7, lr}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af02      	add	r7, sp, #8
 80023f2:	6078      	str	r0, [r7, #4]
	static uint32_t IC_Val1[ULTRASONIC_SENSOR_NUMBER];
	static uint32_t IC_Val2[ULTRASONIC_SENSOR_NUMBER];
	static uint32_t IC_difference[ULTRASONIC_SENSOR_NUMBER];
	static uint8_t Is_first_Capture[ULTRASONIC_SENSOR_NUMBER];

	if((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)){
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	7f1b      	ldrb	r3, [r3, #28]
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d145      	bne.n	8002488 <HAL_TIM_IC_CaptureCallback+0x9c>
		//printf("---------------> ultrasonic index is %d\n",sensor_index);
		if(Is_first_Capture[sensor_index] == 0){
 80023fc:	4b24      	ldr	r3, [pc, #144]	; (8002490 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	b2db      	uxtb	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	4b23      	ldr	r3, [pc, #140]	; (8002494 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002406:	5c9b      	ldrb	r3, [r3, r2]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d114      	bne.n	8002436 <HAL_TIM_IC_CaptureCallback+0x4a>

			/* Capture the Time of the Rising Edge */
			IC_first_Capture(htim, &IC_Val1[sensor_index], &Is_first_Capture[sensor_index]);
 800240c:	4b20      	ldr	r3, [pc, #128]	; (8002490 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	b2db      	uxtb	r3, r3
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4a20      	ldr	r2, [pc, #128]	; (8002498 <HAL_TIM_IC_CaptureCallback+0xac>)
 8002416:	4413      	add	r3, r2
 8002418:	4a1d      	ldr	r2, [pc, #116]	; (8002490 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800241a:	7812      	ldrb	r2, [r2, #0]
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	4611      	mov	r1, r2
 8002420:	4a1c      	ldr	r2, [pc, #112]	; (8002494 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002422:	440a      	add	r2, r1
 8002424:	4619      	mov	r1, r3
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f8e4 	bl	80025f4 <IC_first_Capture>

			/* Stop the generation of PWM Trigger Pulse */
			HAL_TIM_PWM_Stop(htim, TIM_CHANNEL_1);
 800242c:	2100      	movs	r1, #0
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f002 fbd4 	bl	8004bdc <HAL_TIM_PWM_Stop>
		}

	}
	else{/* Do Nothing */}

}
 8002434:	e028      	b.n	8002488 <HAL_TIM_IC_CaptureCallback+0x9c>
		else if (Is_first_Capture[sensor_index] == 1){
 8002436:	4b16      	ldr	r3, [pc, #88]	; (8002490 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	b2db      	uxtb	r3, r3
 800243c:	461a      	mov	r2, r3
 800243e:	4b15      	ldr	r3, [pc, #84]	; (8002494 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002440:	5c9b      	ldrb	r3, [r3, r2]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d120      	bne.n	8002488 <HAL_TIM_IC_CaptureCallback+0x9c>
			IC_second_Capture(htim, &IC_Val1[sensor_index], &IC_Val2[sensor_index], &IC_difference[sensor_index], &Is_first_Capture[sensor_index]);
 8002446:	4b12      	ldr	r3, [pc, #72]	; (8002490 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	b2db      	uxtb	r3, r3
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4a12      	ldr	r2, [pc, #72]	; (8002498 <HAL_TIM_IC_CaptureCallback+0xac>)
 8002450:	1899      	adds	r1, r3, r2
 8002452:	4b0f      	ldr	r3, [pc, #60]	; (8002490 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	b2db      	uxtb	r3, r3
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4a10      	ldr	r2, [pc, #64]	; (800249c <HAL_TIM_IC_CaptureCallback+0xb0>)
 800245c:	441a      	add	r2, r3
 800245e:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <HAL_TIM_IC_CaptureCallback+0xa4>)
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	b2db      	uxtb	r3, r3
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	480e      	ldr	r0, [pc, #56]	; (80024a0 <HAL_TIM_IC_CaptureCallback+0xb4>)
 8002468:	4418      	add	r0, r3
 800246a:	4b09      	ldr	r3, [pc, #36]	; (8002490 <HAL_TIM_IC_CaptureCallback+0xa4>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	b2db      	uxtb	r3, r3
 8002470:	461c      	mov	r4, r3
 8002472:	4b08      	ldr	r3, [pc, #32]	; (8002494 <HAL_TIM_IC_CaptureCallback+0xa8>)
 8002474:	4423      	add	r3, r4
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	4603      	mov	r3, r0
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f8e4 	bl	8002648 <IC_second_Capture>
			HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_2);
 8002480:	2104      	movs	r1, #4
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f002 fdf2 	bl	800506c <HAL_TIM_IC_Stop_IT>
}
 8002488:	bf00      	nop
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	bd90      	pop	{r4, r7, pc}
 8002490:	200004b0 	.word	0x200004b0
 8002494:	200004b4 	.word	0x200004b4
 8002498:	200004bc 	.word	0x200004bc
 800249c:	200004d4 	.word	0x200004d4
 80024a0:	200004ec 	.word	0x200004ec

080024a4 <ECU_Ultrasonic_Read>:
/**
  * @brief  Generate Trigger to Ultrasonic and Calculate the Distance Asynchronous.
  * @param  ultrasonic_obj Ultrasonic handle
  * @retval ECU status
  */
ECU_StatusTypeDef ECU_Ultrasonic_Read(ultrasonic_obj_t *ultrasonic_obj){
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
	/* Check ERROR NULL Pointer */
	if(NULL == ultrasonic_obj){
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <ECU_Ultrasonic_Read+0x12>
		return ECU_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e00f      	b.n	80024d6 <ECU_Ultrasonic_Read+0x32>
	}

	/* Generate 10 us Pulse Trigger to Ultrasonic */
	ECU_Ultrasonic_GenerateTrigger(ultrasonic_obj, 10000, 0.001);
 80024b6:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80024e0 <ECU_Ultrasonic_Read+0x3c>
 80024ba:	f242 7110 	movw	r1, #10000	; 0x2710
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f810 	bl	80024e4 <ECU_Ultrasonic_GenerateTrigger>

	/* Start the Input Capture to Capture the ultrasonic ECOH  */
	HAL_TIM_IC_Start_IT(ultrasonic_obj->htim, ultrasonic_obj->IC_Channel);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	4619      	mov	r1, r3
 80024ce:	4610      	mov	r0, r2
 80024d0:	f002 fc82 	bl	8004dd8 <HAL_TIM_IC_Start_IT>

	return ECU_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	3a83126f 	.word	0x3a83126f

080024e4 <ECU_Ultrasonic_GenerateTrigger>:

static ECU_StatusTypeDef ECU_Ultrasonic_GenerateTrigger(ultrasonic_obj_t *ultrasonic_obj, uint32_t Period, float Duty){
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	ed87 0a01 	vstr	s0, [r7, #4]

	/* Check NULL Pointer */
	if (NULL == ultrasonic_obj)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d101      	bne.n	80024fc <ECU_Ultrasonic_GenerateTrigger+0x18>
	{
		return ECU_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e077      	b.n	80025ec <ECU_Ultrasonic_GenerateTrigger+0x108>
	}
	/* Check the TIM channel state */
	if (TIM_CHANNEL_STATE_GET(ultrasonic_obj->htim, ultrasonic_obj->PWM_Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10a      	bne.n	800251a <ECU_Ultrasonic_GenerateTrigger+0x36>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b01      	cmp	r3, #1
 8002510:	bf14      	ite	ne
 8002512:	2301      	movne	r3, #1
 8002514:	2300      	moveq	r3, #0
 8002516:	b2db      	uxtb	r3, r3
 8002518:	e045      	b.n	80025a6 <ECU_Ultrasonic_GenerateTrigger+0xc2>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b04      	cmp	r3, #4
 8002520:	d10a      	bne.n	8002538 <ECU_Ultrasonic_GenerateTrigger+0x54>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b01      	cmp	r3, #1
 800252e:	bf14      	ite	ne
 8002530:	2301      	movne	r3, #1
 8002532:	2300      	moveq	r3, #0
 8002534:	b2db      	uxtb	r3, r3
 8002536:	e036      	b.n	80025a6 <ECU_Ultrasonic_GenerateTrigger+0xc2>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	2b08      	cmp	r3, #8
 800253e:	d10a      	bne.n	8002556 <ECU_Ultrasonic_GenerateTrigger+0x72>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b01      	cmp	r3, #1
 800254c:	bf14      	ite	ne
 800254e:	2301      	movne	r3, #1
 8002550:	2300      	moveq	r3, #0
 8002552:	b2db      	uxtb	r3, r3
 8002554:	e027      	b.n	80025a6 <ECU_Ultrasonic_GenerateTrigger+0xc2>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b0c      	cmp	r3, #12
 800255c:	d10a      	bne.n	8002574 <ECU_Ultrasonic_GenerateTrigger+0x90>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b01      	cmp	r3, #1
 800256a:	bf14      	ite	ne
 800256c:	2301      	movne	r3, #1
 800256e:	2300      	moveq	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	e018      	b.n	80025a6 <ECU_Ultrasonic_GenerateTrigger+0xc2>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b10      	cmp	r3, #16
 800257a:	d10a      	bne.n	8002592 <ECU_Ultrasonic_GenerateTrigger+0xae>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b01      	cmp	r3, #1
 8002588:	bf14      	ite	ne
 800258a:	2301      	movne	r3, #1
 800258c:	2300      	moveq	r3, #0
 800258e:	b2db      	uxtb	r3, r3
 8002590:	e009      	b.n	80025a6 <ECU_Ultrasonic_GenerateTrigger+0xc2>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b01      	cmp	r3, #1
 800259e:	bf14      	ite	ne
 80025a0:	2301      	movne	r3, #1
 80025a2:	2300      	moveq	r3, #0
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d001      	beq.n	80025ae <ECU_Ultrasonic_GenerateTrigger+0xca>
	{
		return ECU_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e01e      	b.n	80025ec <ECU_Ultrasonic_GenerateTrigger+0x108>
	}

	/* Update configuration with desired period */
	ultrasonic_obj->htim->Instance->ARR = Period;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68ba      	ldr	r2, [r7, #8]
 80025b6:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Update configuration with desired Duty cycle */
	ultrasonic_obj->htim->Instance->CCR1 = (Period * Duty);
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	ee07 3a90 	vmov	s15, r3
 80025be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80025c2:	edd7 7a01 	vldr	s15, [r7, #4]
 80025c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025d4:	ee17 2a90 	vmov	r2, s15
 80025d8:	635a      	str	r2, [r3, #52]	; 0x34

	/* Starts the PWM Trigger signal generation */
	HAL_TIM_PWM_Start(ultrasonic_obj->htim, ultrasonic_obj->PWM_Channel);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	4619      	mov	r1, r3
 80025e4:	4610      	mov	r0, r2
 80025e6:	f002 f9ed 	bl	80049c4 <HAL_TIM_PWM_Start>

	return ECU_OK;;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3710      	adds	r7, #16
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <IC_first_Capture>:

static void IC_first_Capture(TIM_HandleTypeDef *htim, uint32_t *IC_Val1, uint8_t *Is_first_Capture){
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]

	/* Get the time of Rising Edge */
	*IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002600:	2104      	movs	r1, #4
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f003 f98a 	bl	800591c <HAL_TIM_ReadCapturedValue>
 8002608:	4602      	mov	r2, r0
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	601a      	str	r2, [r3, #0]

	/* Update the period so that no overflow (Due to setting the trigger period) happens */
	htim->Instance->ARR = 0xffff;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002616:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Update Is_first_Capture value */
	*Is_first_Capture = 1;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	701a      	strb	r2, [r3, #0]

	/* Setting the Timer Sensing Edge to Falling Edge */
	__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6a1a      	ldr	r2, [r3, #32]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800262c:	621a      	str	r2, [r3, #32]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6a1a      	ldr	r2, [r3, #32]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f042 0220 	orr.w	r2, r2, #32
 800263c:	621a      	str	r2, [r3, #32]
}
 800263e:	bf00      	nop
 8002640:	3710      	adds	r7, #16
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
	...

08002648 <IC_second_Capture>:

static void IC_second_Capture(TIM_HandleTypeDef *htim, uint32_t *IC_Val1, uint32_t *IC_Val2, uint32_t *IC_difference, uint8_t *Is_first_Capture){
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
 8002654:	603b      	str	r3, [r7, #0]

	/* Get the time of Falling Edge */
	*IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8002656:	2104      	movs	r1, #4
 8002658:	68f8      	ldr	r0, [r7, #12]
 800265a:	f003 f95f 	bl	800591c <HAL_TIM_ReadCapturedValue>
 800265e:	4602      	mov	r2, r0
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	601a      	str	r2, [r3, #0]

	/* Setting the Timer Counter Register to Zero */
	__HAL_TIM_SET_COUNTER(htim, 0);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2200      	movs	r2, #0
 800266a:	625a      	str	r2, [r3, #36]	; 0x24

	/* Checking the values */
	if ((*IC_Val2) >= (*IC_Val1)){
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d307      	bcc.n	8002688 <IC_second_Capture+0x40>
		*IC_difference = (*IC_Val2) - (*IC_Val1);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	1ad2      	subs	r2, r2, r3
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	e011      	b.n	80026ac <IC_second_Capture+0x64>
	}
	else{
		// only if there is an overflow (very unlikely scenario)
		*IC_difference = (0xffff - *IC_Val1) + (*IC_Val2);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002696:	33ff      	adds	r3, #255	; 0xff
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	6013      	str	r3, [r2, #0]
		printf("sensor %d --------> overflow\n",sensor_index+1);
 800269c:	4b18      	ldr	r3, [pc, #96]	; (8002700 <IC_second_Capture+0xb8>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	3301      	adds	r3, #1
 80026a4:	4619      	mov	r1, r3
 80026a6:	4817      	ldr	r0, [pc, #92]	; (8002704 <IC_second_Capture+0xbc>)
 80026a8:	f008 fdea 	bl	800b280 <iprintf>
	}

	/* Update the desired ultrasonic distance value */
	ultrasonic_Distance_Values[sensor_index] = (*IC_difference) / ULTRASONIC_DISTANCE_DIVISION_FACTOR;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	ee07 3a90 	vmov	s15, r3
 80026b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026b8:	eddf 6a13 	vldr	s13, [pc, #76]	; 8002708 <IC_second_Capture+0xc0>
 80026bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80026c0:	4b0f      	ldr	r3, [pc, #60]	; (8002700 <IC_second_Capture+0xb8>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	461a      	mov	r2, r3
 80026c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026cc:	ee17 1a90 	vmov	r1, s15
 80026d0:	4b0e      	ldr	r3, [pc, #56]	; (800270c <IC_second_Capture+0xc4>)
 80026d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	/* Update Is_first_Capture value */
	*Is_first_Capture = 0;
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	2200      	movs	r2, #0
 80026da:	701a      	strb	r2, [r3, #0]

	/* Setting the Timer Sensing Edge to Rasing Edge */
	__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6a1a      	ldr	r2, [r3, #32]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80026ea:	621a      	str	r2, [r3, #32]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6a12      	ldr	r2, [r2, #32]
 80026f6:	621a      	str	r2, [r3, #32]
}
 80026f8:	bf00      	nop
 80026fa:	3710      	adds	r7, #16
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	200004b0 	.word	0x200004b0
 8002704:	0800c398 	.word	0x0800c398
 8002708:	42680000 	.word	0x42680000
 800270c:	20000498 	.word	0x20000498

08002710 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002714:	4b08      	ldr	r3, [pc, #32]	; (8002738 <HAL_Init+0x28>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a07      	ldr	r2, [pc, #28]	; (8002738 <HAL_Init+0x28>)
 800271a:	f043 0310 	orr.w	r3, r3, #16
 800271e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002720:	2003      	movs	r0, #3
 8002722:	f000 f8fc 	bl	800291e <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002726:	200f      	movs	r0, #15
 8002728:	f7fe f8b6 	bl	8000898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800272c:	f7fe f88c 	bl	8000848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	40022000 	.word	0x40022000

0800273c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <HAL_IncTick+0x20>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	461a      	mov	r2, r3
 8002746:	4b06      	ldr	r3, [pc, #24]	; (8002760 <HAL_IncTick+0x24>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4413      	add	r3, r2
 800274c:	4a04      	ldr	r2, [pc, #16]	; (8002760 <HAL_IncTick+0x24>)
 800274e:	6013      	str	r3, [r2, #0]
}
 8002750:	bf00      	nop
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	20000084 	.word	0x20000084
 8002760:	20000504 	.word	0x20000504

08002764 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  return uwTick;  
 8002768:	4b03      	ldr	r3, [pc, #12]	; (8002778 <HAL_GetTick+0x14>)
 800276a:	681b      	ldr	r3, [r3, #0]
}
 800276c:	4618      	mov	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	20000504 	.word	0x20000504

0800277c <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002784:	f7ff ffee 	bl	8002764 <HAL_GetTick>
 8002788:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002794:	d005      	beq.n	80027a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002796:	4b0a      	ldr	r3, [pc, #40]	; (80027c0 <HAL_Delay+0x44>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	461a      	mov	r2, r3
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4413      	add	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80027a2:	bf00      	nop
 80027a4:	f7ff ffde 	bl	8002764 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d8f7      	bhi.n	80027a4 <HAL_Delay+0x28>
  {
  }
}
 80027b4:	bf00      	nop
 80027b6:	bf00      	nop
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20000084 	.word	0x20000084

080027c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f003 0307 	and.w	r3, r3, #7
 80027d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027d4:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <__NVIC_SetPriorityGrouping+0x44>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027da:	68ba      	ldr	r2, [r7, #8]
 80027dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027e0:	4013      	ands	r3, r2
 80027e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027f6:	4a04      	ldr	r2, [pc, #16]	; (8002808 <__NVIC_SetPriorityGrouping+0x44>)
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	60d3      	str	r3, [r2, #12]
}
 80027fc:	bf00      	nop
 80027fe:	3714      	adds	r7, #20
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr
 8002808:	e000ed00 	.word	0xe000ed00

0800280c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800280c:	b480      	push	{r7}
 800280e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002810:	4b04      	ldr	r3, [pc, #16]	; (8002824 <__NVIC_GetPriorityGrouping+0x18>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	0a1b      	lsrs	r3, r3, #8
 8002816:	f003 0307 	and.w	r3, r3, #7
}
 800281a:	4618      	mov	r0, r3
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	e000ed00 	.word	0xe000ed00

08002828 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002836:	2b00      	cmp	r3, #0
 8002838:	db0b      	blt.n	8002852 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800283a:	79fb      	ldrb	r3, [r7, #7]
 800283c:	f003 021f 	and.w	r2, r3, #31
 8002840:	4907      	ldr	r1, [pc, #28]	; (8002860 <__NVIC_EnableIRQ+0x38>)
 8002842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002846:	095b      	lsrs	r3, r3, #5
 8002848:	2001      	movs	r0, #1
 800284a:	fa00 f202 	lsl.w	r2, r0, r2
 800284e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002852:	bf00      	nop
 8002854:	370c      	adds	r7, #12
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	e000e100 	.word	0xe000e100

08002864 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002864:	b480      	push	{r7}
 8002866:	b083      	sub	sp, #12
 8002868:	af00      	add	r7, sp, #0
 800286a:	4603      	mov	r3, r0
 800286c:	6039      	str	r1, [r7, #0]
 800286e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002874:	2b00      	cmp	r3, #0
 8002876:	db0a      	blt.n	800288e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	b2da      	uxtb	r2, r3
 800287c:	490c      	ldr	r1, [pc, #48]	; (80028b0 <__NVIC_SetPriority+0x4c>)
 800287e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002882:	0112      	lsls	r2, r2, #4
 8002884:	b2d2      	uxtb	r2, r2
 8002886:	440b      	add	r3, r1
 8002888:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800288c:	e00a      	b.n	80028a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	b2da      	uxtb	r2, r3
 8002892:	4908      	ldr	r1, [pc, #32]	; (80028b4 <__NVIC_SetPriority+0x50>)
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	f003 030f 	and.w	r3, r3, #15
 800289a:	3b04      	subs	r3, #4
 800289c:	0112      	lsls	r2, r2, #4
 800289e:	b2d2      	uxtb	r2, r2
 80028a0:	440b      	add	r3, r1
 80028a2:	761a      	strb	r2, [r3, #24]
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	e000e100 	.word	0xe000e100
 80028b4:	e000ed00 	.word	0xe000ed00

080028b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b089      	sub	sp, #36	; 0x24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	f1c3 0307 	rsb	r3, r3, #7
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	bf28      	it	cs
 80028d6:	2304      	movcs	r3, #4
 80028d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	3304      	adds	r3, #4
 80028de:	2b06      	cmp	r3, #6
 80028e0:	d902      	bls.n	80028e8 <NVIC_EncodePriority+0x30>
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	3b03      	subs	r3, #3
 80028e6:	e000      	b.n	80028ea <NVIC_EncodePriority+0x32>
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ec:	f04f 32ff 	mov.w	r2, #4294967295
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43da      	mvns	r2, r3
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	401a      	ands	r2, r3
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002900:	f04f 31ff 	mov.w	r1, #4294967295
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	fa01 f303 	lsl.w	r3, r1, r3
 800290a:	43d9      	mvns	r1, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002910:	4313      	orrs	r3, r2
         );
}
 8002912:	4618      	mov	r0, r3
 8002914:	3724      	adds	r7, #36	; 0x24
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b082      	sub	sp, #8
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7ff ff4c 	bl	80027c4 <__NVIC_SetPriorityGrouping>
}
 800292c:	bf00      	nop
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
 8002940:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002942:	2300      	movs	r3, #0
 8002944:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002946:	f7ff ff61 	bl	800280c <__NVIC_GetPriorityGrouping>
 800294a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	68b9      	ldr	r1, [r7, #8]
 8002950:	6978      	ldr	r0, [r7, #20]
 8002952:	f7ff ffb1 	bl	80028b8 <NVIC_EncodePriority>
 8002956:	4602      	mov	r2, r0
 8002958:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800295c:	4611      	mov	r1, r2
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff ff80 	bl	8002864 <__NVIC_SetPriority>
}
 8002964:	bf00      	nop
 8002966:	3718      	adds	r7, #24
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff ff54 	bl	8002828 <__NVIC_EnableIRQ>
}
 8002980:	bf00      	nop
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002996:	2b02      	cmp	r3, #2
 8002998:	d008      	beq.n	80029ac <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2204      	movs	r2, #4
 800299e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e020      	b.n	80029ee <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 020e 	bic.w	r2, r2, #14
 80029ba:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f022 0201 	bic.w	r2, r2, #1
 80029ca:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d4:	2101      	movs	r1, #1
 80029d6:	fa01 f202 	lsl.w	r2, r1, r2
 80029da:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b084      	sub	sp, #16
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a02:	2300      	movs	r3, #0
 8002a04:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d005      	beq.n	8002a1c <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2204      	movs	r2, #4
 8002a14:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	73fb      	strb	r3, [r7, #15]
 8002a1a:	e027      	b.n	8002a6c <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 020e 	bic.w	r2, r2, #14
 8002a2a:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0201 	bic.w	r2, r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a44:	2101      	movs	r1, #1
 8002a46:	fa01 f202 	lsl.w	r2, r1, r2
 8002a4a:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	4798      	blx	r3
    } 
  }
  return status;
 8002a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
	...

08002a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b087      	sub	sp, #28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a86:	e160      	b.n	8002d4a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	fa01 f303 	lsl.w	r3, r1, r3
 8002a94:	4013      	ands	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 8152 	beq.w	8002d44 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 0303 	and.w	r3, r3, #3
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d005      	beq.n	8002ab8 <HAL_GPIO_Init+0x40>
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f003 0303 	and.w	r3, r3, #3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d130      	bne.n	8002b1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	2203      	movs	r2, #3
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	4013      	ands	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	693a      	ldr	r2, [r7, #16]
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	693a      	ldr	r2, [r7, #16]
 8002ae6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aee:	2201      	movs	r2, #1
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	43db      	mvns	r3, r3
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4013      	ands	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	091b      	lsrs	r3, r3, #4
 8002b04:	f003 0201 	and.w	r2, r3, #1
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	2b03      	cmp	r3, #3
 8002b24:	d017      	beq.n	8002b56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	2203      	movs	r2, #3
 8002b32:	fa02 f303 	lsl.w	r3, r2, r3
 8002b36:	43db      	mvns	r3, r3
 8002b38:	693a      	ldr	r2, [r7, #16]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f003 0303 	and.w	r3, r3, #3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d123      	bne.n	8002baa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	08da      	lsrs	r2, r3, #3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	3208      	adds	r2, #8
 8002b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	220f      	movs	r2, #15
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	693a      	ldr	r2, [r7, #16]
 8002b82:	4013      	ands	r3, r2
 8002b84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	691a      	ldr	r2, [r3, #16]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	08da      	lsrs	r2, r3, #3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3208      	adds	r2, #8
 8002ba4:	6939      	ldr	r1, [r7, #16]
 8002ba6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f003 0203 	and.w	r2, r3, #3
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 80ac 	beq.w	8002d44 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bec:	4b5e      	ldr	r3, [pc, #376]	; (8002d68 <HAL_GPIO_Init+0x2f0>)
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	4a5d      	ldr	r2, [pc, #372]	; (8002d68 <HAL_GPIO_Init+0x2f0>)
 8002bf2:	f043 0301 	orr.w	r3, r3, #1
 8002bf6:	6193      	str	r3, [r2, #24]
 8002bf8:	4b5b      	ldr	r3, [pc, #364]	; (8002d68 <HAL_GPIO_Init+0x2f0>)
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	f003 0301 	and.w	r3, r3, #1
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c04:	4a59      	ldr	r2, [pc, #356]	; (8002d6c <HAL_GPIO_Init+0x2f4>)
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	089b      	lsrs	r3, r3, #2
 8002c0a:	3302      	adds	r3, #2
 8002c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f003 0303 	and.w	r3, r3, #3
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	220f      	movs	r2, #15
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	43db      	mvns	r3, r3
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	4013      	ands	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c2e:	d025      	beq.n	8002c7c <HAL_GPIO_Init+0x204>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a4f      	ldr	r2, [pc, #316]	; (8002d70 <HAL_GPIO_Init+0x2f8>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d01f      	beq.n	8002c78 <HAL_GPIO_Init+0x200>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a4e      	ldr	r2, [pc, #312]	; (8002d74 <HAL_GPIO_Init+0x2fc>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d019      	beq.n	8002c74 <HAL_GPIO_Init+0x1fc>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a4d      	ldr	r2, [pc, #308]	; (8002d78 <HAL_GPIO_Init+0x300>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d013      	beq.n	8002c70 <HAL_GPIO_Init+0x1f8>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	4a4c      	ldr	r2, [pc, #304]	; (8002d7c <HAL_GPIO_Init+0x304>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d00d      	beq.n	8002c6c <HAL_GPIO_Init+0x1f4>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a4b      	ldr	r2, [pc, #300]	; (8002d80 <HAL_GPIO_Init+0x308>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d007      	beq.n	8002c68 <HAL_GPIO_Init+0x1f0>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a4a      	ldr	r2, [pc, #296]	; (8002d84 <HAL_GPIO_Init+0x30c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d101      	bne.n	8002c64 <HAL_GPIO_Init+0x1ec>
 8002c60:	2306      	movs	r3, #6
 8002c62:	e00c      	b.n	8002c7e <HAL_GPIO_Init+0x206>
 8002c64:	2307      	movs	r3, #7
 8002c66:	e00a      	b.n	8002c7e <HAL_GPIO_Init+0x206>
 8002c68:	2305      	movs	r3, #5
 8002c6a:	e008      	b.n	8002c7e <HAL_GPIO_Init+0x206>
 8002c6c:	2304      	movs	r3, #4
 8002c6e:	e006      	b.n	8002c7e <HAL_GPIO_Init+0x206>
 8002c70:	2303      	movs	r3, #3
 8002c72:	e004      	b.n	8002c7e <HAL_GPIO_Init+0x206>
 8002c74:	2302      	movs	r3, #2
 8002c76:	e002      	b.n	8002c7e <HAL_GPIO_Init+0x206>
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e000      	b.n	8002c7e <HAL_GPIO_Init+0x206>
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	f002 0203 	and.w	r2, r2, #3
 8002c84:	0092      	lsls	r2, r2, #2
 8002c86:	4093      	lsls	r3, r2
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c8e:	4937      	ldr	r1, [pc, #220]	; (8002d6c <HAL_GPIO_Init+0x2f4>)
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	089b      	lsrs	r3, r3, #2
 8002c94:	3302      	adds	r3, #2
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c9c:	4b3a      	ldr	r3, [pc, #232]	; (8002d88 <HAL_GPIO_Init+0x310>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d003      	beq.n	8002cc0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002cc0:	4a31      	ldr	r2, [pc, #196]	; (8002d88 <HAL_GPIO_Init+0x310>)
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cc6:	4b30      	ldr	r3, [pc, #192]	; (8002d88 <HAL_GPIO_Init+0x310>)
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002cea:	4a27      	ldr	r2, [pc, #156]	; (8002d88 <HAL_GPIO_Init+0x310>)
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cf0:	4b25      	ldr	r3, [pc, #148]	; (8002d88 <HAL_GPIO_Init+0x310>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d003      	beq.n	8002d14 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d14:	4a1c      	ldr	r2, [pc, #112]	; (8002d88 <HAL_GPIO_Init+0x310>)
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d1a:	4b1b      	ldr	r3, [pc, #108]	; (8002d88 <HAL_GPIO_Init+0x310>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	43db      	mvns	r3, r3
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	4013      	ands	r3, r2
 8002d28:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002d36:	693a      	ldr	r2, [r7, #16]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d3e:	4a12      	ldr	r2, [pc, #72]	; (8002d88 <HAL_GPIO_Init+0x310>)
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	3301      	adds	r3, #1
 8002d48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	fa22 f303 	lsr.w	r3, r2, r3
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f47f ae97 	bne.w	8002a88 <HAL_GPIO_Init+0x10>
  }
}
 8002d5a:	bf00      	nop
 8002d5c:	bf00      	nop
 8002d5e:	371c      	adds	r7, #28
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	40010000 	.word	0x40010000
 8002d70:	48000400 	.word	0x48000400
 8002d74:	48000800 	.word	0x48000800
 8002d78:	48000c00 	.word	0x48000c00
 8002d7c:	48001000 	.word	0x48001000
 8002d80:	48001400 	.word	0x48001400
 8002d84:	48001800 	.word	0x48001800
 8002d88:	40010400 	.word	0x40010400

08002d8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	460b      	mov	r3, r1
 8002d96:	807b      	strh	r3, [r7, #2]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d9c:	787b      	ldrb	r3, [r7, #1]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002da2:	887a      	ldrh	r2, [r7, #2]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002da8:	e002      	b.n	8002db0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002daa:	887a      	ldrh	r2, [r7, #2]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr

08002dbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dc8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002dcc:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002dd2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d102      	bne.n	8002de2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	f001 b83a 	b.w	8003e56 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002de2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002de6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 816f 	beq.w	80030d6 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002df8:	4bb5      	ldr	r3, [pc, #724]	; (80030d0 <HAL_RCC_OscConfig+0x314>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 030c 	and.w	r3, r3, #12
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d00c      	beq.n	8002e1e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e04:	4bb2      	ldr	r3, [pc, #712]	; (80030d0 <HAL_RCC_OscConfig+0x314>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 030c 	and.w	r3, r3, #12
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	d15c      	bne.n	8002eca <HAL_RCC_OscConfig+0x10e>
 8002e10:	4baf      	ldr	r3, [pc, #700]	; (80030d0 <HAL_RCC_OscConfig+0x314>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002e18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e1c:	d155      	bne.n	8002eca <HAL_RCC_OscConfig+0x10e>
 8002e1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e22:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e26:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002e2a:	fa93 f3a3 	rbit	r3, r3
 8002e2e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e32:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e36:	fab3 f383 	clz	r3, r3
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	095b      	lsrs	r3, r3, #5
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d102      	bne.n	8002e50 <HAL_RCC_OscConfig+0x94>
 8002e4a:	4ba1      	ldr	r3, [pc, #644]	; (80030d0 <HAL_RCC_OscConfig+0x314>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	e015      	b.n	8002e7c <HAL_RCC_OscConfig+0xc0>
 8002e50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e54:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e58:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002e5c:	fa93 f3a3 	rbit	r3, r3
 8002e60:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002e64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e68:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002e6c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002e70:	fa93 f3a3 	rbit	r3, r3
 8002e74:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002e78:	4b95      	ldr	r3, [pc, #596]	; (80030d0 <HAL_RCC_OscConfig+0x314>)
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e80:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002e84:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002e88:	fa92 f2a2 	rbit	r2, r2
 8002e8c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002e90:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002e94:	fab2 f282 	clz	r2, r2
 8002e98:	b2d2      	uxtb	r2, r2
 8002e9a:	f042 0220 	orr.w	r2, r2, #32
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	f002 021f 	and.w	r2, r2, #31
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eaa:	4013      	ands	r3, r2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 8111 	beq.w	80030d4 <HAL_RCC_OscConfig+0x318>
 8002eb2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eb6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f040 8108 	bne.w	80030d4 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	f000 bfc6 	b.w	8003e56 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002eca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002ece:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eda:	d106      	bne.n	8002eea <HAL_RCC_OscConfig+0x12e>
 8002edc:	4b7c      	ldr	r3, [pc, #496]	; (80030d0 <HAL_RCC_OscConfig+0x314>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a7b      	ldr	r2, [pc, #492]	; (80030d0 <HAL_RCC_OscConfig+0x314>)
 8002ee2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee6:	6013      	str	r3, [r2, #0]
 8002ee8:	e036      	b.n	8002f58 <HAL_RCC_OscConfig+0x19c>
 8002eea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002eee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10c      	bne.n	8002f14 <HAL_RCC_OscConfig+0x158>
 8002efa:	4b75      	ldr	r3, [pc, #468]	; (80030d0 <HAL_RCC_OscConfig+0x314>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a74      	ldr	r2, [pc, #464]	; (80030d0 <HAL_RCC_OscConfig+0x314>)
 8002f00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	4b72      	ldr	r3, [pc, #456]	; (80030d0 <HAL_RCC_OscConfig+0x314>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a71      	ldr	r2, [pc, #452]	; (80030d0 <HAL_RCC_OscConfig+0x314>)
 8002f0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	e021      	b.n	8002f58 <HAL_RCC_OscConfig+0x19c>
 8002f14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f24:	d10c      	bne.n	8002f40 <HAL_RCC_OscConfig+0x184>
 8002f26:	4b6a      	ldr	r3, [pc, #424]	; (80030d0 <HAL_RCC_OscConfig+0x314>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a69      	ldr	r2, [pc, #420]	; (80030d0 <HAL_RCC_OscConfig+0x314>)
 8002f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	4b67      	ldr	r3, [pc, #412]	; (80030d0 <HAL_RCC_OscConfig+0x314>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a66      	ldr	r2, [pc, #408]	; (80030d0 <HAL_RCC_OscConfig+0x314>)
 8002f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	e00b      	b.n	8002f58 <HAL_RCC_OscConfig+0x19c>
 8002f40:	4b63      	ldr	r3, [pc, #396]	; (80030d0 <HAL_RCC_OscConfig+0x314>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a62      	ldr	r2, [pc, #392]	; (80030d0 <HAL_RCC_OscConfig+0x314>)
 8002f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f4a:	6013      	str	r3, [r2, #0]
 8002f4c:	4b60      	ldr	r3, [pc, #384]	; (80030d0 <HAL_RCC_OscConfig+0x314>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a5f      	ldr	r2, [pc, #380]	; (80030d0 <HAL_RCC_OscConfig+0x314>)
 8002f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f56:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002f5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d059      	beq.n	800301c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f68:	f7ff fbfc 	bl	8002764 <HAL_GetTick>
 8002f6c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f70:	e00a      	b.n	8002f88 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f72:	f7ff fbf7 	bl	8002764 <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b64      	cmp	r3, #100	; 0x64
 8002f80:	d902      	bls.n	8002f88 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	f000 bf67 	b.w	8003e56 <HAL_RCC_OscConfig+0x109a>
 8002f88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f8c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f90:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002f94:	fa93 f3a3 	rbit	r3, r3
 8002f98:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002f9c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa0:	fab3 f383 	clz	r3, r3
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	095b      	lsrs	r3, r3, #5
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	f043 0301 	orr.w	r3, r3, #1
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d102      	bne.n	8002fba <HAL_RCC_OscConfig+0x1fe>
 8002fb4:	4b46      	ldr	r3, [pc, #280]	; (80030d0 <HAL_RCC_OscConfig+0x314>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	e015      	b.n	8002fe6 <HAL_RCC_OscConfig+0x22a>
 8002fba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fbe:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002fc6:	fa93 f3a3 	rbit	r3, r3
 8002fca:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002fce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fd2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002fd6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8002fda:	fa93 f3a3 	rbit	r3, r3
 8002fde:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002fe2:	4b3b      	ldr	r3, [pc, #236]	; (80030d0 <HAL_RCC_OscConfig+0x314>)
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002fea:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002fee:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002ff2:	fa92 f2a2 	rbit	r2, r2
 8002ff6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8002ffa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002ffe:	fab2 f282 	clz	r2, r2
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	f042 0220 	orr.w	r2, r2, #32
 8003008:	b2d2      	uxtb	r2, r2
 800300a:	f002 021f 	and.w	r2, r2, #31
 800300e:	2101      	movs	r1, #1
 8003010:	fa01 f202 	lsl.w	r2, r1, r2
 8003014:	4013      	ands	r3, r2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0ab      	beq.n	8002f72 <HAL_RCC_OscConfig+0x1b6>
 800301a:	e05c      	b.n	80030d6 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301c:	f7ff fba2 	bl	8002764 <HAL_GetTick>
 8003020:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003024:	e00a      	b.n	800303c <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003026:	f7ff fb9d 	bl	8002764 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b64      	cmp	r3, #100	; 0x64
 8003034:	d902      	bls.n	800303c <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	f000 bf0d 	b.w	8003e56 <HAL_RCC_OscConfig+0x109a>
 800303c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003040:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003048:	fa93 f3a3 	rbit	r3, r3
 800304c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003050:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003054:	fab3 f383 	clz	r3, r3
 8003058:	b2db      	uxtb	r3, r3
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	b2db      	uxtb	r3, r3
 800305e:	f043 0301 	orr.w	r3, r3, #1
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b01      	cmp	r3, #1
 8003066:	d102      	bne.n	800306e <HAL_RCC_OscConfig+0x2b2>
 8003068:	4b19      	ldr	r3, [pc, #100]	; (80030d0 <HAL_RCC_OscConfig+0x314>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	e015      	b.n	800309a <HAL_RCC_OscConfig+0x2de>
 800306e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003072:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003076:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800307a:	fa93 f3a3 	rbit	r3, r3
 800307e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003082:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003086:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800308a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800308e:	fa93 f3a3 	rbit	r3, r3
 8003092:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003096:	4b0e      	ldr	r3, [pc, #56]	; (80030d0 <HAL_RCC_OscConfig+0x314>)
 8003098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800309e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80030a2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80030a6:	fa92 f2a2 	rbit	r2, r2
 80030aa:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80030ae:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80030b2:	fab2 f282 	clz	r2, r2
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	f042 0220 	orr.w	r2, r2, #32
 80030bc:	b2d2      	uxtb	r2, r2
 80030be:	f002 021f 	and.w	r2, r2, #31
 80030c2:	2101      	movs	r1, #1
 80030c4:	fa01 f202 	lsl.w	r2, r1, r2
 80030c8:	4013      	ands	r3, r2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1ab      	bne.n	8003026 <HAL_RCC_OscConfig+0x26a>
 80030ce:	e002      	b.n	80030d6 <HAL_RCC_OscConfig+0x31a>
 80030d0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80030da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 817f 	beq.w	80033ea <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80030ec:	4ba7      	ldr	r3, [pc, #668]	; (800338c <HAL_RCC_OscConfig+0x5d0>)
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f003 030c 	and.w	r3, r3, #12
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00c      	beq.n	8003112 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80030f8:	4ba4      	ldr	r3, [pc, #656]	; (800338c <HAL_RCC_OscConfig+0x5d0>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f003 030c 	and.w	r3, r3, #12
 8003100:	2b08      	cmp	r3, #8
 8003102:	d173      	bne.n	80031ec <HAL_RCC_OscConfig+0x430>
 8003104:	4ba1      	ldr	r3, [pc, #644]	; (800338c <HAL_RCC_OscConfig+0x5d0>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800310c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003110:	d16c      	bne.n	80031ec <HAL_RCC_OscConfig+0x430>
 8003112:	2302      	movs	r3, #2
 8003114:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003118:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800311c:	fa93 f3a3 	rbit	r3, r3
 8003120:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003124:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003128:	fab3 f383 	clz	r3, r3
 800312c:	b2db      	uxtb	r3, r3
 800312e:	095b      	lsrs	r3, r3, #5
 8003130:	b2db      	uxtb	r3, r3
 8003132:	f043 0301 	orr.w	r3, r3, #1
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b01      	cmp	r3, #1
 800313a:	d102      	bne.n	8003142 <HAL_RCC_OscConfig+0x386>
 800313c:	4b93      	ldr	r3, [pc, #588]	; (800338c <HAL_RCC_OscConfig+0x5d0>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	e013      	b.n	800316a <HAL_RCC_OscConfig+0x3ae>
 8003142:	2302      	movs	r3, #2
 8003144:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003148:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800314c:	fa93 f3a3 	rbit	r3, r3
 8003150:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003154:	2302      	movs	r3, #2
 8003156:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800315a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800315e:	fa93 f3a3 	rbit	r3, r3
 8003162:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003166:	4b89      	ldr	r3, [pc, #548]	; (800338c <HAL_RCC_OscConfig+0x5d0>)
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	2202      	movs	r2, #2
 800316c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003170:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003174:	fa92 f2a2 	rbit	r2, r2
 8003178:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800317c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003180:	fab2 f282 	clz	r2, r2
 8003184:	b2d2      	uxtb	r2, r2
 8003186:	f042 0220 	orr.w	r2, r2, #32
 800318a:	b2d2      	uxtb	r2, r2
 800318c:	f002 021f 	and.w	r2, r2, #31
 8003190:	2101      	movs	r1, #1
 8003192:	fa01 f202 	lsl.w	r2, r1, r2
 8003196:	4013      	ands	r3, r2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00a      	beq.n	80031b2 <HAL_RCC_OscConfig+0x3f6>
 800319c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d002      	beq.n	80031b2 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	f000 be52 	b.w	8003e56 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b2:	4b76      	ldr	r3, [pc, #472]	; (800338c <HAL_RCC_OscConfig+0x5d0>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031be:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	21f8      	movs	r1, #248	; 0xf8
 80031c8:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031cc:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80031d0:	fa91 f1a1 	rbit	r1, r1
 80031d4:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80031d8:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80031dc:	fab1 f181 	clz	r1, r1
 80031e0:	b2c9      	uxtb	r1, r1
 80031e2:	408b      	lsls	r3, r1
 80031e4:	4969      	ldr	r1, [pc, #420]	; (800338c <HAL_RCC_OscConfig+0x5d0>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ea:	e0fe      	b.n	80033ea <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80031f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f000 8088 	beq.w	800330e <HAL_RCC_OscConfig+0x552>
 80031fe:	2301      	movs	r3, #1
 8003200:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003204:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003208:	fa93 f3a3 	rbit	r3, r3
 800320c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003210:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003214:	fab3 f383 	clz	r3, r3
 8003218:	b2db      	uxtb	r3, r3
 800321a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800321e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	461a      	mov	r2, r3
 8003226:	2301      	movs	r3, #1
 8003228:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322a:	f7ff fa9b 	bl	8002764 <HAL_GetTick>
 800322e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003232:	e00a      	b.n	800324a <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003234:	f7ff fa96 	bl	8002764 <HAL_GetTick>
 8003238:	4602      	mov	r2, r0
 800323a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d902      	bls.n	800324a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	f000 be06 	b.w	8003e56 <HAL_RCC_OscConfig+0x109a>
 800324a:	2302      	movs	r3, #2
 800324c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003250:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003254:	fa93 f3a3 	rbit	r3, r3
 8003258:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800325c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003260:	fab3 f383 	clz	r3, r3
 8003264:	b2db      	uxtb	r3, r3
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	b2db      	uxtb	r3, r3
 800326a:	f043 0301 	orr.w	r3, r3, #1
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b01      	cmp	r3, #1
 8003272:	d102      	bne.n	800327a <HAL_RCC_OscConfig+0x4be>
 8003274:	4b45      	ldr	r3, [pc, #276]	; (800338c <HAL_RCC_OscConfig+0x5d0>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	e013      	b.n	80032a2 <HAL_RCC_OscConfig+0x4e6>
 800327a:	2302      	movs	r3, #2
 800327c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003280:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003284:	fa93 f3a3 	rbit	r3, r3
 8003288:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800328c:	2302      	movs	r3, #2
 800328e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003292:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003296:	fa93 f3a3 	rbit	r3, r3
 800329a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800329e:	4b3b      	ldr	r3, [pc, #236]	; (800338c <HAL_RCC_OscConfig+0x5d0>)
 80032a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a2:	2202      	movs	r2, #2
 80032a4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80032a8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80032ac:	fa92 f2a2 	rbit	r2, r2
 80032b0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80032b4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80032b8:	fab2 f282 	clz	r2, r2
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	f042 0220 	orr.w	r2, r2, #32
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	f002 021f 	and.w	r2, r2, #31
 80032c8:	2101      	movs	r1, #1
 80032ca:	fa01 f202 	lsl.w	r2, r1, r2
 80032ce:	4013      	ands	r3, r2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0af      	beq.n	8003234 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032d4:	4b2d      	ldr	r3, [pc, #180]	; (800338c <HAL_RCC_OscConfig+0x5d0>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80032e0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	21f8      	movs	r1, #248	; 0xf8
 80032ea:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ee:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80032f2:	fa91 f1a1 	rbit	r1, r1
 80032f6:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80032fa:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80032fe:	fab1 f181 	clz	r1, r1
 8003302:	b2c9      	uxtb	r1, r1
 8003304:	408b      	lsls	r3, r1
 8003306:	4921      	ldr	r1, [pc, #132]	; (800338c <HAL_RCC_OscConfig+0x5d0>)
 8003308:	4313      	orrs	r3, r2
 800330a:	600b      	str	r3, [r1, #0]
 800330c:	e06d      	b.n	80033ea <HAL_RCC_OscConfig+0x62e>
 800330e:	2301      	movs	r3, #1
 8003310:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003314:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003318:	fa93 f3a3 	rbit	r3, r3
 800331c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003320:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003324:	fab3 f383 	clz	r3, r3
 8003328:	b2db      	uxtb	r3, r3
 800332a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800332e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	461a      	mov	r2, r3
 8003336:	2300      	movs	r3, #0
 8003338:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333a:	f7ff fa13 	bl	8002764 <HAL_GetTick>
 800333e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003342:	e00a      	b.n	800335a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003344:	f7ff fa0e 	bl	8002764 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	2b02      	cmp	r3, #2
 8003352:	d902      	bls.n	800335a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	f000 bd7e 	b.w	8003e56 <HAL_RCC_OscConfig+0x109a>
 800335a:	2302      	movs	r3, #2
 800335c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003360:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003364:	fa93 f3a3 	rbit	r3, r3
 8003368:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800336c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003370:	fab3 f383 	clz	r3, r3
 8003374:	b2db      	uxtb	r3, r3
 8003376:	095b      	lsrs	r3, r3, #5
 8003378:	b2db      	uxtb	r3, r3
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b01      	cmp	r3, #1
 8003382:	d105      	bne.n	8003390 <HAL_RCC_OscConfig+0x5d4>
 8003384:	4b01      	ldr	r3, [pc, #4]	; (800338c <HAL_RCC_OscConfig+0x5d0>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	e016      	b.n	80033b8 <HAL_RCC_OscConfig+0x5fc>
 800338a:	bf00      	nop
 800338c:	40021000 	.word	0x40021000
 8003390:	2302      	movs	r3, #2
 8003392:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003396:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800339a:	fa93 f3a3 	rbit	r3, r3
 800339e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80033a2:	2302      	movs	r3, #2
 80033a4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80033a8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80033ac:	fa93 f3a3 	rbit	r3, r3
 80033b0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80033b4:	4bbf      	ldr	r3, [pc, #764]	; (80036b4 <HAL_RCC_OscConfig+0x8f8>)
 80033b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b8:	2202      	movs	r2, #2
 80033ba:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80033be:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80033c2:	fa92 f2a2 	rbit	r2, r2
 80033c6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80033ca:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80033ce:	fab2 f282 	clz	r2, r2
 80033d2:	b2d2      	uxtb	r2, r2
 80033d4:	f042 0220 	orr.w	r2, r2, #32
 80033d8:	b2d2      	uxtb	r2, r2
 80033da:	f002 021f 	and.w	r2, r2, #31
 80033de:	2101      	movs	r1, #1
 80033e0:	fa01 f202 	lsl.w	r2, r1, r2
 80033e4:	4013      	ands	r3, r2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1ac      	bne.n	8003344 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80033ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0308 	and.w	r3, r3, #8
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 8113 	beq.w	8003626 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003400:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003404:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d07c      	beq.n	800350a <HAL_RCC_OscConfig+0x74e>
 8003410:	2301      	movs	r3, #1
 8003412:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800341a:	fa93 f3a3 	rbit	r3, r3
 800341e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003422:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003426:	fab3 f383 	clz	r3, r3
 800342a:	b2db      	uxtb	r3, r3
 800342c:	461a      	mov	r2, r3
 800342e:	4ba2      	ldr	r3, [pc, #648]	; (80036b8 <HAL_RCC_OscConfig+0x8fc>)
 8003430:	4413      	add	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	461a      	mov	r2, r3
 8003436:	2301      	movs	r3, #1
 8003438:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800343a:	f7ff f993 	bl	8002764 <HAL_GetTick>
 800343e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003442:	e00a      	b.n	800345a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003444:	f7ff f98e 	bl	8002764 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d902      	bls.n	800345a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	f000 bcfe 	b.w	8003e56 <HAL_RCC_OscConfig+0x109a>
 800345a:	2302      	movs	r3, #2
 800345c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003460:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003464:	fa93 f2a3 	rbit	r2, r3
 8003468:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800346c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003470:	601a      	str	r2, [r3, #0]
 8003472:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003476:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800347a:	2202      	movs	r2, #2
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003482:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	fa93 f2a3 	rbit	r2, r3
 800348c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003490:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800349a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800349e:	2202      	movs	r2, #2
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034a6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	fa93 f2a3 	rbit	r2, r3
 80034b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80034b8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ba:	4b7e      	ldr	r3, [pc, #504]	; (80036b4 <HAL_RCC_OscConfig+0x8f8>)
 80034bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034c2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80034c6:	2102      	movs	r1, #2
 80034c8:	6019      	str	r1, [r3, #0]
 80034ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034ce:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	fa93 f1a3 	rbit	r1, r3
 80034d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034dc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80034e0:	6019      	str	r1, [r3, #0]
  return result;
 80034e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80034e6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	fab3 f383 	clz	r3, r3
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	f003 031f 	and.w	r3, r3, #31
 80034fc:	2101      	movs	r1, #1
 80034fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003502:	4013      	ands	r3, r2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d09d      	beq.n	8003444 <HAL_RCC_OscConfig+0x688>
 8003508:	e08d      	b.n	8003626 <HAL_RCC_OscConfig+0x86a>
 800350a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800350e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003512:	2201      	movs	r2, #1
 8003514:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003516:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800351a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	fa93 f2a3 	rbit	r2, r3
 8003524:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003528:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800352c:	601a      	str	r2, [r3, #0]
  return result;
 800352e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003532:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8003536:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003538:	fab3 f383 	clz	r3, r3
 800353c:	b2db      	uxtb	r3, r3
 800353e:	461a      	mov	r2, r3
 8003540:	4b5d      	ldr	r3, [pc, #372]	; (80036b8 <HAL_RCC_OscConfig+0x8fc>)
 8003542:	4413      	add	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	461a      	mov	r2, r3
 8003548:	2300      	movs	r3, #0
 800354a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800354c:	f7ff f90a 	bl	8002764 <HAL_GetTick>
 8003550:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003554:	e00a      	b.n	800356c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003556:	f7ff f905 	bl	8002764 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d902      	bls.n	800356c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	f000 bc75 	b.w	8003e56 <HAL_RCC_OscConfig+0x109a>
 800356c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003570:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003574:	2202      	movs	r2, #2
 8003576:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003578:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800357c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	fa93 f2a3 	rbit	r2, r3
 8003586:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800358a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003594:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003598:	2202      	movs	r2, #2
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	fa93 f2a3 	rbit	r2, r3
 80035aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035b8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80035bc:	2202      	movs	r2, #2
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035c4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	fa93 f2a3 	rbit	r2, r3
 80035ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035d2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80035d6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035d8:	4b36      	ldr	r3, [pc, #216]	; (80036b4 <HAL_RCC_OscConfig+0x8f8>)
 80035da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035e0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80035e4:	2102      	movs	r1, #2
 80035e6:	6019      	str	r1, [r3, #0]
 80035e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035ec:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	fa93 f1a3 	rbit	r1, r3
 80035f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80035fa:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80035fe:	6019      	str	r1, [r3, #0]
  return result;
 8003600:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003604:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	fab3 f383 	clz	r3, r3
 800360e:	b2db      	uxtb	r3, r3
 8003610:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003614:	b2db      	uxtb	r3, r3
 8003616:	f003 031f 	and.w	r3, r3, #31
 800361a:	2101      	movs	r1, #1
 800361c:	fa01 f303 	lsl.w	r3, r1, r3
 8003620:	4013      	ands	r3, r2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d197      	bne.n	8003556 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003626:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800362a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0304 	and.w	r3, r3, #4
 8003636:	2b00      	cmp	r3, #0
 8003638:	f000 81a5 	beq.w	8003986 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800363c:	2300      	movs	r3, #0
 800363e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003642:	4b1c      	ldr	r3, [pc, #112]	; (80036b4 <HAL_RCC_OscConfig+0x8f8>)
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d116      	bne.n	800367c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800364e:	4b19      	ldr	r3, [pc, #100]	; (80036b4 <HAL_RCC_OscConfig+0x8f8>)
 8003650:	69db      	ldr	r3, [r3, #28]
 8003652:	4a18      	ldr	r2, [pc, #96]	; (80036b4 <HAL_RCC_OscConfig+0x8f8>)
 8003654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003658:	61d3      	str	r3, [r2, #28]
 800365a:	4b16      	ldr	r3, [pc, #88]	; (80036b4 <HAL_RCC_OscConfig+0x8f8>)
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003662:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003666:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003670:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003674:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003676:	2301      	movs	r3, #1
 8003678:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800367c:	4b0f      	ldr	r3, [pc, #60]	; (80036bc <HAL_RCC_OscConfig+0x900>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003684:	2b00      	cmp	r3, #0
 8003686:	d121      	bne.n	80036cc <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003688:	4b0c      	ldr	r3, [pc, #48]	; (80036bc <HAL_RCC_OscConfig+0x900>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a0b      	ldr	r2, [pc, #44]	; (80036bc <HAL_RCC_OscConfig+0x900>)
 800368e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003692:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003694:	f7ff f866 	bl	8002764 <HAL_GetTick>
 8003698:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369c:	e010      	b.n	80036c0 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800369e:	f7ff f861 	bl	8002764 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b64      	cmp	r3, #100	; 0x64
 80036ac:	d908      	bls.n	80036c0 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e3d1      	b.n	8003e56 <HAL_RCC_OscConfig+0x109a>
 80036b2:	bf00      	nop
 80036b4:	40021000 	.word	0x40021000
 80036b8:	10908120 	.word	0x10908120
 80036bc:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c0:	4b8d      	ldr	r3, [pc, #564]	; (80038f8 <HAL_RCC_OscConfig+0xb3c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0e8      	beq.n	800369e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d106      	bne.n	80036ea <HAL_RCC_OscConfig+0x92e>
 80036dc:	4b87      	ldr	r3, [pc, #540]	; (80038fc <HAL_RCC_OscConfig+0xb40>)
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	4a86      	ldr	r2, [pc, #536]	; (80038fc <HAL_RCC_OscConfig+0xb40>)
 80036e2:	f043 0301 	orr.w	r3, r3, #1
 80036e6:	6213      	str	r3, [r2, #32]
 80036e8:	e035      	b.n	8003756 <HAL_RCC_OscConfig+0x99a>
 80036ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80036ee:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10c      	bne.n	8003714 <HAL_RCC_OscConfig+0x958>
 80036fa:	4b80      	ldr	r3, [pc, #512]	; (80038fc <HAL_RCC_OscConfig+0xb40>)
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	4a7f      	ldr	r2, [pc, #508]	; (80038fc <HAL_RCC_OscConfig+0xb40>)
 8003700:	f023 0301 	bic.w	r3, r3, #1
 8003704:	6213      	str	r3, [r2, #32]
 8003706:	4b7d      	ldr	r3, [pc, #500]	; (80038fc <HAL_RCC_OscConfig+0xb40>)
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	4a7c      	ldr	r2, [pc, #496]	; (80038fc <HAL_RCC_OscConfig+0xb40>)
 800370c:	f023 0304 	bic.w	r3, r3, #4
 8003710:	6213      	str	r3, [r2, #32]
 8003712:	e020      	b.n	8003756 <HAL_RCC_OscConfig+0x99a>
 8003714:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003718:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	2b05      	cmp	r3, #5
 8003722:	d10c      	bne.n	800373e <HAL_RCC_OscConfig+0x982>
 8003724:	4b75      	ldr	r3, [pc, #468]	; (80038fc <HAL_RCC_OscConfig+0xb40>)
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	4a74      	ldr	r2, [pc, #464]	; (80038fc <HAL_RCC_OscConfig+0xb40>)
 800372a:	f043 0304 	orr.w	r3, r3, #4
 800372e:	6213      	str	r3, [r2, #32]
 8003730:	4b72      	ldr	r3, [pc, #456]	; (80038fc <HAL_RCC_OscConfig+0xb40>)
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	4a71      	ldr	r2, [pc, #452]	; (80038fc <HAL_RCC_OscConfig+0xb40>)
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	6213      	str	r3, [r2, #32]
 800373c:	e00b      	b.n	8003756 <HAL_RCC_OscConfig+0x99a>
 800373e:	4b6f      	ldr	r3, [pc, #444]	; (80038fc <HAL_RCC_OscConfig+0xb40>)
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	4a6e      	ldr	r2, [pc, #440]	; (80038fc <HAL_RCC_OscConfig+0xb40>)
 8003744:	f023 0301 	bic.w	r3, r3, #1
 8003748:	6213      	str	r3, [r2, #32]
 800374a:	4b6c      	ldr	r3, [pc, #432]	; (80038fc <HAL_RCC_OscConfig+0xb40>)
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	4a6b      	ldr	r2, [pc, #428]	; (80038fc <HAL_RCC_OscConfig+0xb40>)
 8003750:	f023 0304 	bic.w	r3, r3, #4
 8003754:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003756:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800375a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 8081 	beq.w	800386a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003768:	f7fe fffc 	bl	8002764 <HAL_GetTick>
 800376c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003770:	e00b      	b.n	800378a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003772:	f7fe fff7 	bl	8002764 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003782:	4293      	cmp	r3, r2
 8003784:	d901      	bls.n	800378a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e365      	b.n	8003e56 <HAL_RCC_OscConfig+0x109a>
 800378a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800378e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003792:	2202      	movs	r2, #2
 8003794:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003796:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800379a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	fa93 f2a3 	rbit	r2, r3
 80037a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037a8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037b2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80037b6:	2202      	movs	r2, #2
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037be:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	fa93 f2a3 	rbit	r2, r3
 80037c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037cc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80037d0:	601a      	str	r2, [r3, #0]
  return result;
 80037d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037d6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80037da:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037dc:	fab3 f383 	clz	r3, r3
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	095b      	lsrs	r3, r3, #5
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	f043 0302 	orr.w	r3, r3, #2
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d102      	bne.n	80037f6 <HAL_RCC_OscConfig+0xa3a>
 80037f0:	4b42      	ldr	r3, [pc, #264]	; (80038fc <HAL_RCC_OscConfig+0xb40>)
 80037f2:	6a1b      	ldr	r3, [r3, #32]
 80037f4:	e013      	b.n	800381e <HAL_RCC_OscConfig+0xa62>
 80037f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80037fa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80037fe:	2202      	movs	r2, #2
 8003800:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003802:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003806:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	fa93 f2a3 	rbit	r2, r3
 8003810:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003814:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	4b38      	ldr	r3, [pc, #224]	; (80038fc <HAL_RCC_OscConfig+0xb40>)
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003822:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003826:	2102      	movs	r1, #2
 8003828:	6011      	str	r1, [r2, #0]
 800382a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800382e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003832:	6812      	ldr	r2, [r2, #0]
 8003834:	fa92 f1a2 	rbit	r1, r2
 8003838:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800383c:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8003840:	6011      	str	r1, [r2, #0]
  return result;
 8003842:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003846:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800384a:	6812      	ldr	r2, [r2, #0]
 800384c:	fab2 f282 	clz	r2, r2
 8003850:	b2d2      	uxtb	r2, r2
 8003852:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	f002 021f 	and.w	r2, r2, #31
 800385c:	2101      	movs	r1, #1
 800385e:	fa01 f202 	lsl.w	r2, r1, r2
 8003862:	4013      	ands	r3, r2
 8003864:	2b00      	cmp	r3, #0
 8003866:	d084      	beq.n	8003772 <HAL_RCC_OscConfig+0x9b6>
 8003868:	e083      	b.n	8003972 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800386a:	f7fe ff7b 	bl	8002764 <HAL_GetTick>
 800386e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003872:	e00b      	b.n	800388c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003874:	f7fe ff76 	bl	8002764 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	f241 3288 	movw	r2, #5000	; 0x1388
 8003884:	4293      	cmp	r3, r2
 8003886:	d901      	bls.n	800388c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e2e4      	b.n	8003e56 <HAL_RCC_OscConfig+0x109a>
 800388c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003890:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003894:	2202      	movs	r2, #2
 8003896:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003898:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800389c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	fa93 f2a3 	rbit	r2, r3
 80038a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038aa:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038b4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80038b8:	2202      	movs	r2, #2
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038c0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	fa93 f2a3 	rbit	r2, r3
 80038ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038ce:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80038d2:	601a      	str	r2, [r3, #0]
  return result;
 80038d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80038d8:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80038dc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038de:	fab3 f383 	clz	r3, r3
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	095b      	lsrs	r3, r3, #5
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	f043 0302 	orr.w	r3, r3, #2
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d106      	bne.n	8003900 <HAL_RCC_OscConfig+0xb44>
 80038f2:	4b02      	ldr	r3, [pc, #8]	; (80038fc <HAL_RCC_OscConfig+0xb40>)
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	e017      	b.n	8003928 <HAL_RCC_OscConfig+0xb6c>
 80038f8:	40007000 	.word	0x40007000
 80038fc:	40021000 	.word	0x40021000
 8003900:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003904:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003908:	2202      	movs	r2, #2
 800390a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003910:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	fa93 f2a3 	rbit	r2, r3
 800391a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800391e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	4bb3      	ldr	r3, [pc, #716]	; (8003bf4 <HAL_RCC_OscConfig+0xe38>)
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800392c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003930:	2102      	movs	r1, #2
 8003932:	6011      	str	r1, [r2, #0]
 8003934:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003938:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800393c:	6812      	ldr	r2, [r2, #0]
 800393e:	fa92 f1a2 	rbit	r1, r2
 8003942:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003946:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800394a:	6011      	str	r1, [r2, #0]
  return result;
 800394c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003950:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8003954:	6812      	ldr	r2, [r2, #0]
 8003956:	fab2 f282 	clz	r2, r2
 800395a:	b2d2      	uxtb	r2, r2
 800395c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003960:	b2d2      	uxtb	r2, r2
 8003962:	f002 021f 	and.w	r2, r2, #31
 8003966:	2101      	movs	r1, #1
 8003968:	fa01 f202 	lsl.w	r2, r1, r2
 800396c:	4013      	ands	r3, r2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d180      	bne.n	8003874 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003972:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003976:	2b01      	cmp	r3, #1
 8003978:	d105      	bne.n	8003986 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800397a:	4b9e      	ldr	r3, [pc, #632]	; (8003bf4 <HAL_RCC_OscConfig+0xe38>)
 800397c:	69db      	ldr	r3, [r3, #28]
 800397e:	4a9d      	ldr	r2, [pc, #628]	; (8003bf4 <HAL_RCC_OscConfig+0xe38>)
 8003980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003984:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003986:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800398a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	2b00      	cmp	r3, #0
 8003994:	f000 825e 	beq.w	8003e54 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003998:	4b96      	ldr	r3, [pc, #600]	; (8003bf4 <HAL_RCC_OscConfig+0xe38>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f003 030c 	and.w	r3, r3, #12
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	f000 821f 	beq.w	8003de4 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	f040 8170 	bne.w	8003c98 <HAL_RCC_OscConfig+0xedc>
 80039b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039bc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80039c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039ca:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	fa93 f2a3 	rbit	r2, r3
 80039d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039d8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80039dc:	601a      	str	r2, [r3, #0]
  return result;
 80039de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80039e2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80039e6:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039e8:	fab3 f383 	clz	r3, r3
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80039f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	461a      	mov	r2, r3
 80039fa:	2300      	movs	r3, #0
 80039fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039fe:	f7fe feb1 	bl	8002764 <HAL_GetTick>
 8003a02:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a06:	e009      	b.n	8003a1c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a08:	f7fe feac 	bl	8002764 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e21c      	b.n	8003e56 <HAL_RCC_OscConfig+0x109a>
 8003a1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a20:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003a24:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a2e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	fa93 f2a3 	rbit	r2, r3
 8003a38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a3c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003a40:	601a      	str	r2, [r3, #0]
  return result;
 8003a42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a46:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003a4a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a4c:	fab3 f383 	clz	r3, r3
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	095b      	lsrs	r3, r3, #5
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	f043 0301 	orr.w	r3, r3, #1
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d102      	bne.n	8003a66 <HAL_RCC_OscConfig+0xcaa>
 8003a60:	4b64      	ldr	r3, [pc, #400]	; (8003bf4 <HAL_RCC_OscConfig+0xe38>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	e027      	b.n	8003ab6 <HAL_RCC_OscConfig+0xcfa>
 8003a66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a6a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003a6e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a78:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	fa93 f2a3 	rbit	r2, r3
 8003a82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a86:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a90:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003a94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a98:	601a      	str	r2, [r3, #0]
 8003a9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003a9e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	fa93 f2a3 	rbit	r2, r3
 8003aa8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003aac:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	4b50      	ldr	r3, [pc, #320]	; (8003bf4 <HAL_RCC_OscConfig+0xe38>)
 8003ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003aba:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003abe:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ac2:	6011      	str	r1, [r2, #0]
 8003ac4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ac8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003acc:	6812      	ldr	r2, [r2, #0]
 8003ace:	fa92 f1a2 	rbit	r1, r2
 8003ad2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ad6:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003ada:	6011      	str	r1, [r2, #0]
  return result;
 8003adc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003ae0:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8003ae4:	6812      	ldr	r2, [r2, #0]
 8003ae6:	fab2 f282 	clz	r2, r2
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	f042 0220 	orr.w	r2, r2, #32
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	f002 021f 	and.w	r2, r2, #31
 8003af6:	2101      	movs	r1, #1
 8003af8:	fa01 f202 	lsl.w	r2, r1, r2
 8003afc:	4013      	ands	r3, r2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d182      	bne.n	8003a08 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b02:	4b3c      	ldr	r3, [pc, #240]	; (8003bf4 <HAL_RCC_OscConfig+0xe38>)
 8003b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b06:	f023 020f 	bic.w	r2, r3, #15
 8003b0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b0e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	4937      	ldr	r1, [pc, #220]	; (8003bf4 <HAL_RCC_OscConfig+0xe38>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003b1c:	4b35      	ldr	r3, [pc, #212]	; (8003bf4 <HAL_RCC_OscConfig+0xe38>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003b24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b28:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	6a19      	ldr	r1, [r3, #32]
 8003b30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b34:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	430b      	orrs	r3, r1
 8003b3e:	492d      	ldr	r1, [pc, #180]	; (8003bf4 <HAL_RCC_OscConfig+0xe38>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	604b      	str	r3, [r1, #4]
 8003b44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b48:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003b4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b56:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	fa93 f2a3 	rbit	r2, r3
 8003b60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b64:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003b68:	601a      	str	r2, [r3, #0]
  return result;
 8003b6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003b6e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003b72:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b74:	fab3 f383 	clz	r3, r3
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b7e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	461a      	mov	r2, r3
 8003b86:	2301      	movs	r3, #1
 8003b88:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b8a:	f7fe fdeb 	bl	8002764 <HAL_GetTick>
 8003b8e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b92:	e009      	b.n	8003ba8 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b94:	f7fe fde6 	bl	8002764 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b02      	cmp	r3, #2
 8003ba2:	d901      	bls.n	8003ba8 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	e156      	b.n	8003e56 <HAL_RCC_OscConfig+0x109a>
 8003ba8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bac:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003bb0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bba:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	fa93 f2a3 	rbit	r2, r3
 8003bc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bc8:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003bcc:	601a      	str	r2, [r3, #0]
  return result;
 8003bce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bd2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003bd6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bd8:	fab3 f383 	clz	r3, r3
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	095b      	lsrs	r3, r3, #5
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	f043 0301 	orr.w	r3, r3, #1
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d105      	bne.n	8003bf8 <HAL_RCC_OscConfig+0xe3c>
 8003bec:	4b01      	ldr	r3, [pc, #4]	; (8003bf4 <HAL_RCC_OscConfig+0xe38>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	e02a      	b.n	8003c48 <HAL_RCC_OscConfig+0xe8c>
 8003bf2:	bf00      	nop
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003bfc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003c00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c0a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	fa93 f2a3 	rbit	r2, r3
 8003c14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c18:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c22:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003c26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c30:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	fa93 f2a3 	rbit	r2, r3
 8003c3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c3e:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8003c42:	601a      	str	r2, [r3, #0]
 8003c44:	4b86      	ldr	r3, [pc, #536]	; (8003e60 <HAL_RCC_OscConfig+0x10a4>)
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c4c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003c50:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003c54:	6011      	str	r1, [r2, #0]
 8003c56:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c5a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003c5e:	6812      	ldr	r2, [r2, #0]
 8003c60:	fa92 f1a2 	rbit	r1, r2
 8003c64:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c68:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003c6c:	6011      	str	r1, [r2, #0]
  return result;
 8003c6e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003c72:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8003c76:	6812      	ldr	r2, [r2, #0]
 8003c78:	fab2 f282 	clz	r2, r2
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	f042 0220 	orr.w	r2, r2, #32
 8003c82:	b2d2      	uxtb	r2, r2
 8003c84:	f002 021f 	and.w	r2, r2, #31
 8003c88:	2101      	movs	r1, #1
 8003c8a:	fa01 f202 	lsl.w	r2, r1, r2
 8003c8e:	4013      	ands	r3, r2
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f43f af7f 	beq.w	8003b94 <HAL_RCC_OscConfig+0xdd8>
 8003c96:	e0dd      	b.n	8003e54 <HAL_RCC_OscConfig+0x1098>
 8003c98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003c9c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003ca0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ca4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003caa:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	fa93 f2a3 	rbit	r2, r3
 8003cb4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cb8:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003cbc:	601a      	str	r2, [r3, #0]
  return result;
 8003cbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003cc2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003cc6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cc8:	fab3 f383 	clz	r3, r3
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003cd2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	461a      	mov	r2, r3
 8003cda:	2300      	movs	r3, #0
 8003cdc:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cde:	f7fe fd41 	bl	8002764 <HAL_GetTick>
 8003ce2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ce6:	e009      	b.n	8003cfc <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ce8:	f7fe fd3c 	bl	8002764 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e0ac      	b.n	8003e56 <HAL_RCC_OscConfig+0x109a>
 8003cfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d00:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003d04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d0e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	fa93 f2a3 	rbit	r2, r3
 8003d18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d1c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003d20:	601a      	str	r2, [r3, #0]
  return result;
 8003d22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d26:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003d2a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d2c:	fab3 f383 	clz	r3, r3
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	095b      	lsrs	r3, r3, #5
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	f043 0301 	orr.w	r3, r3, #1
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d102      	bne.n	8003d46 <HAL_RCC_OscConfig+0xf8a>
 8003d40:	4b47      	ldr	r3, [pc, #284]	; (8003e60 <HAL_RCC_OscConfig+0x10a4>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	e027      	b.n	8003d96 <HAL_RCC_OscConfig+0xfda>
 8003d46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d4a:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003d4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d58:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	fa93 f2a3 	rbit	r2, r3
 8003d62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d66:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003d6a:	601a      	str	r2, [r3, #0]
 8003d6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d70:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003d74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d7e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	fa93 f2a3 	rbit	r2, r3
 8003d88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003d8c:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8003d90:	601a      	str	r2, [r3, #0]
 8003d92:	4b33      	ldr	r3, [pc, #204]	; (8003e60 <HAL_RCC_OscConfig+0x10a4>)
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003d9a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003d9e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003da2:	6011      	str	r1, [r2, #0]
 8003da4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003da8:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003dac:	6812      	ldr	r2, [r2, #0]
 8003dae:	fa92 f1a2 	rbit	r1, r2
 8003db2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003db6:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003dba:	6011      	str	r1, [r2, #0]
  return result;
 8003dbc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8003dc0:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8003dc4:	6812      	ldr	r2, [r2, #0]
 8003dc6:	fab2 f282 	clz	r2, r2
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	f042 0220 	orr.w	r2, r2, #32
 8003dd0:	b2d2      	uxtb	r2, r2
 8003dd2:	f002 021f 	and.w	r2, r2, #31
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8003ddc:	4013      	ands	r3, r2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d182      	bne.n	8003ce8 <HAL_RCC_OscConfig+0xf2c>
 8003de2:	e037      	b.n	8003e54 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003de4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003de8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d101      	bne.n	8003df8 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e02e      	b.n	8003e56 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003df8:	4b19      	ldr	r3, [pc, #100]	; (8003e60 <HAL_RCC_OscConfig+0x10a4>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003e00:	4b17      	ldr	r3, [pc, #92]	; (8003e60 <HAL_RCC_OscConfig+0x10a4>)
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e04:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003e08:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003e0c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003e10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e14:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	69db      	ldr	r3, [r3, #28]
 8003e1c:	429a      	cmp	r2, r3
 8003e1e:	d117      	bne.n	8003e50 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003e20:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003e24:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e2c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d10b      	bne.n	8003e50 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003e38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e3c:	f003 020f 	and.w	r2, r3, #15
 8003e40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8003e44:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d001      	beq.n	8003e54 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e000      	b.n	8003e56 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40021000 	.word	0x40021000

08003e64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b09e      	sub	sp, #120	; 0x78
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e162      	b.n	8004142 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e7c:	4b90      	ldr	r3, [pc, #576]	; (80040c0 <HAL_RCC_ClockConfig+0x25c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d910      	bls.n	8003eac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e8a:	4b8d      	ldr	r3, [pc, #564]	; (80040c0 <HAL_RCC_ClockConfig+0x25c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f023 0207 	bic.w	r2, r3, #7
 8003e92:	498b      	ldr	r1, [pc, #556]	; (80040c0 <HAL_RCC_ClockConfig+0x25c>)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e9a:	4b89      	ldr	r3, [pc, #548]	; (80040c0 <HAL_RCC_ClockConfig+0x25c>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0307 	and.w	r3, r3, #7
 8003ea2:	683a      	ldr	r2, [r7, #0]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d001      	beq.n	8003eac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e14a      	b.n	8004142 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d008      	beq.n	8003eca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eb8:	4b82      	ldr	r3, [pc, #520]	; (80040c4 <HAL_RCC_ClockConfig+0x260>)
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	497f      	ldr	r1, [pc, #508]	; (80040c4 <HAL_RCC_ClockConfig+0x260>)
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f000 80dc 	beq.w	8004090 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d13c      	bne.n	8003f5a <HAL_RCC_ClockConfig+0xf6>
 8003ee0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ee4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ee8:	fa93 f3a3 	rbit	r3, r3
 8003eec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ef0:	fab3 f383 	clz	r3, r3
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	095b      	lsrs	r3, r3, #5
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	f043 0301 	orr.w	r3, r3, #1
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d102      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xa6>
 8003f04:	4b6f      	ldr	r3, [pc, #444]	; (80040c4 <HAL_RCC_ClockConfig+0x260>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	e00f      	b.n	8003f2a <HAL_RCC_ClockConfig+0xc6>
 8003f0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f0e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f12:	fa93 f3a3 	rbit	r3, r3
 8003f16:	667b      	str	r3, [r7, #100]	; 0x64
 8003f18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f1c:	663b      	str	r3, [r7, #96]	; 0x60
 8003f1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f20:	fa93 f3a3 	rbit	r3, r3
 8003f24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f26:	4b67      	ldr	r3, [pc, #412]	; (80040c4 <HAL_RCC_ClockConfig+0x260>)
 8003f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f2e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f32:	fa92 f2a2 	rbit	r2, r2
 8003f36:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003f38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003f3a:	fab2 f282 	clz	r2, r2
 8003f3e:	b2d2      	uxtb	r2, r2
 8003f40:	f042 0220 	orr.w	r2, r2, #32
 8003f44:	b2d2      	uxtb	r2, r2
 8003f46:	f002 021f 	and.w	r2, r2, #31
 8003f4a:	2101      	movs	r1, #1
 8003f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f50:	4013      	ands	r3, r2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d17b      	bne.n	800404e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e0f3      	b.n	8004142 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d13c      	bne.n	8003fdc <HAL_RCC_ClockConfig+0x178>
 8003f62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f66:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f6a:	fa93 f3a3 	rbit	r3, r3
 8003f6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f72:	fab3 f383 	clz	r3, r3
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	095b      	lsrs	r3, r3, #5
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	f043 0301 	orr.w	r3, r3, #1
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d102      	bne.n	8003f8c <HAL_RCC_ClockConfig+0x128>
 8003f86:	4b4f      	ldr	r3, [pc, #316]	; (80040c4 <HAL_RCC_ClockConfig+0x260>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	e00f      	b.n	8003fac <HAL_RCC_ClockConfig+0x148>
 8003f8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f90:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f94:	fa93 f3a3 	rbit	r3, r3
 8003f98:	647b      	str	r3, [r7, #68]	; 0x44
 8003f9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f9e:	643b      	str	r3, [r7, #64]	; 0x40
 8003fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fa2:	fa93 f3a3 	rbit	r3, r3
 8003fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fa8:	4b46      	ldr	r3, [pc, #280]	; (80040c4 <HAL_RCC_ClockConfig+0x260>)
 8003faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fb0:	63ba      	str	r2, [r7, #56]	; 0x38
 8003fb2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fb4:	fa92 f2a2 	rbit	r2, r2
 8003fb8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003fba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fbc:	fab2 f282 	clz	r2, r2
 8003fc0:	b2d2      	uxtb	r2, r2
 8003fc2:	f042 0220 	orr.w	r2, r2, #32
 8003fc6:	b2d2      	uxtb	r2, r2
 8003fc8:	f002 021f 	and.w	r2, r2, #31
 8003fcc:	2101      	movs	r1, #1
 8003fce:	fa01 f202 	lsl.w	r2, r1, r2
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d13a      	bne.n	800404e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e0b2      	b.n	8004142 <HAL_RCC_ClockConfig+0x2de>
 8003fdc:	2302      	movs	r3, #2
 8003fde:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe2:	fa93 f3a3 	rbit	r3, r3
 8003fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fea:	fab3 f383 	clz	r3, r3
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	095b      	lsrs	r3, r3, #5
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	f043 0301 	orr.w	r3, r3, #1
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d102      	bne.n	8004004 <HAL_RCC_ClockConfig+0x1a0>
 8003ffe:	4b31      	ldr	r3, [pc, #196]	; (80040c4 <HAL_RCC_ClockConfig+0x260>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	e00d      	b.n	8004020 <HAL_RCC_ClockConfig+0x1bc>
 8004004:	2302      	movs	r3, #2
 8004006:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800400a:	fa93 f3a3 	rbit	r3, r3
 800400e:	627b      	str	r3, [r7, #36]	; 0x24
 8004010:	2302      	movs	r3, #2
 8004012:	623b      	str	r3, [r7, #32]
 8004014:	6a3b      	ldr	r3, [r7, #32]
 8004016:	fa93 f3a3 	rbit	r3, r3
 800401a:	61fb      	str	r3, [r7, #28]
 800401c:	4b29      	ldr	r3, [pc, #164]	; (80040c4 <HAL_RCC_ClockConfig+0x260>)
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	2202      	movs	r2, #2
 8004022:	61ba      	str	r2, [r7, #24]
 8004024:	69ba      	ldr	r2, [r7, #24]
 8004026:	fa92 f2a2 	rbit	r2, r2
 800402a:	617a      	str	r2, [r7, #20]
  return result;
 800402c:	697a      	ldr	r2, [r7, #20]
 800402e:	fab2 f282 	clz	r2, r2
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	f042 0220 	orr.w	r2, r2, #32
 8004038:	b2d2      	uxtb	r2, r2
 800403a:	f002 021f 	and.w	r2, r2, #31
 800403e:	2101      	movs	r1, #1
 8004040:	fa01 f202 	lsl.w	r2, r1, r2
 8004044:	4013      	ands	r3, r2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e079      	b.n	8004142 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800404e:	4b1d      	ldr	r3, [pc, #116]	; (80040c4 <HAL_RCC_ClockConfig+0x260>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f023 0203 	bic.w	r2, r3, #3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	491a      	ldr	r1, [pc, #104]	; (80040c4 <HAL_RCC_ClockConfig+0x260>)
 800405c:	4313      	orrs	r3, r2
 800405e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004060:	f7fe fb80 	bl	8002764 <HAL_GetTick>
 8004064:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004066:	e00a      	b.n	800407e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004068:	f7fe fb7c 	bl	8002764 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	f241 3288 	movw	r2, #5000	; 0x1388
 8004076:	4293      	cmp	r3, r2
 8004078:	d901      	bls.n	800407e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e061      	b.n	8004142 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800407e:	4b11      	ldr	r3, [pc, #68]	; (80040c4 <HAL_RCC_ClockConfig+0x260>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f003 020c 	and.w	r2, r3, #12
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	429a      	cmp	r2, r3
 800408e:	d1eb      	bne.n	8004068 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004090:	4b0b      	ldr	r3, [pc, #44]	; (80040c0 <HAL_RCC_ClockConfig+0x25c>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	429a      	cmp	r2, r3
 800409c:	d214      	bcs.n	80040c8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800409e:	4b08      	ldr	r3, [pc, #32]	; (80040c0 <HAL_RCC_ClockConfig+0x25c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f023 0207 	bic.w	r2, r3, #7
 80040a6:	4906      	ldr	r1, [pc, #24]	; (80040c0 <HAL_RCC_ClockConfig+0x25c>)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ae:	4b04      	ldr	r3, [pc, #16]	; (80040c0 <HAL_RCC_ClockConfig+0x25c>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0307 	and.w	r3, r3, #7
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d005      	beq.n	80040c8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e040      	b.n	8004142 <HAL_RCC_ClockConfig+0x2de>
 80040c0:	40022000 	.word	0x40022000
 80040c4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d008      	beq.n	80040e6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040d4:	4b1d      	ldr	r3, [pc, #116]	; (800414c <HAL_RCC_ClockConfig+0x2e8>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	491a      	ldr	r1, [pc, #104]	; (800414c <HAL_RCC_ClockConfig+0x2e8>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0308 	and.w	r3, r3, #8
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d009      	beq.n	8004106 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040f2:	4b16      	ldr	r3, [pc, #88]	; (800414c <HAL_RCC_ClockConfig+0x2e8>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	4912      	ldr	r1, [pc, #72]	; (800414c <HAL_RCC_ClockConfig+0x2e8>)
 8004102:	4313      	orrs	r3, r2
 8004104:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004106:	f000 f829 	bl	800415c <HAL_RCC_GetSysClockFreq>
 800410a:	4601      	mov	r1, r0
 800410c:	4b0f      	ldr	r3, [pc, #60]	; (800414c <HAL_RCC_ClockConfig+0x2e8>)
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004114:	22f0      	movs	r2, #240	; 0xf0
 8004116:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	fa92 f2a2 	rbit	r2, r2
 800411e:	60fa      	str	r2, [r7, #12]
  return result;
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	fab2 f282 	clz	r2, r2
 8004126:	b2d2      	uxtb	r2, r2
 8004128:	40d3      	lsrs	r3, r2
 800412a:	4a09      	ldr	r2, [pc, #36]	; (8004150 <HAL_RCC_ClockConfig+0x2ec>)
 800412c:	5cd3      	ldrb	r3, [r2, r3]
 800412e:	fa21 f303 	lsr.w	r3, r1, r3
 8004132:	4a08      	ldr	r2, [pc, #32]	; (8004154 <HAL_RCC_ClockConfig+0x2f0>)
 8004134:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004136:	4b08      	ldr	r3, [pc, #32]	; (8004158 <HAL_RCC_ClockConfig+0x2f4>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f7fc fbac 	bl	8000898 <HAL_InitTick>
  
  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3778      	adds	r7, #120	; 0x78
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	40021000 	.word	0x40021000
 8004150:	0800c490 	.word	0x0800c490
 8004154:	20000060 	.word	0x20000060
 8004158:	20000080 	.word	0x20000080

0800415c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800415c:	b480      	push	{r7}
 800415e:	b08b      	sub	sp, #44	; 0x2c
 8004160:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	61fb      	str	r3, [r7, #28]
 8004166:	2300      	movs	r3, #0
 8004168:	61bb      	str	r3, [r7, #24]
 800416a:	2300      	movs	r3, #0
 800416c:	627b      	str	r3, [r7, #36]	; 0x24
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004172:	2300      	movs	r3, #0
 8004174:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004176:	4b2a      	ldr	r3, [pc, #168]	; (8004220 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	f003 030c 	and.w	r3, r3, #12
 8004182:	2b04      	cmp	r3, #4
 8004184:	d002      	beq.n	800418c <HAL_RCC_GetSysClockFreq+0x30>
 8004186:	2b08      	cmp	r3, #8
 8004188:	d003      	beq.n	8004192 <HAL_RCC_GetSysClockFreq+0x36>
 800418a:	e03f      	b.n	800420c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800418c:	4b25      	ldr	r3, [pc, #148]	; (8004224 <HAL_RCC_GetSysClockFreq+0xc8>)
 800418e:	623b      	str	r3, [r7, #32]
      break;
 8004190:	e03f      	b.n	8004212 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004198:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800419c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	fa92 f2a2 	rbit	r2, r2
 80041a4:	607a      	str	r2, [r7, #4]
  return result;
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	fab2 f282 	clz	r2, r2
 80041ac:	b2d2      	uxtb	r2, r2
 80041ae:	40d3      	lsrs	r3, r2
 80041b0:	4a1d      	ldr	r2, [pc, #116]	; (8004228 <HAL_RCC_GetSysClockFreq+0xcc>)
 80041b2:	5cd3      	ldrb	r3, [r2, r3]
 80041b4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80041b6:	4b1a      	ldr	r3, [pc, #104]	; (8004220 <HAL_RCC_GetSysClockFreq+0xc4>)
 80041b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	220f      	movs	r2, #15
 80041c0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	fa92 f2a2 	rbit	r2, r2
 80041c8:	60fa      	str	r2, [r7, #12]
  return result;
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	fab2 f282 	clz	r2, r2
 80041d0:	b2d2      	uxtb	r2, r2
 80041d2:	40d3      	lsrs	r3, r2
 80041d4:	4a15      	ldr	r2, [pc, #84]	; (800422c <HAL_RCC_GetSysClockFreq+0xd0>)
 80041d6:	5cd3      	ldrb	r3, [r2, r3]
 80041d8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d008      	beq.n	80041f6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041e4:	4a0f      	ldr	r2, [pc, #60]	; (8004224 <HAL_RCC_GetSysClockFreq+0xc8>)
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	fb02 f303 	mul.w	r3, r2, r3
 80041f2:	627b      	str	r3, [r7, #36]	; 0x24
 80041f4:	e007      	b.n	8004206 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041f6:	4a0b      	ldr	r2, [pc, #44]	; (8004224 <HAL_RCC_GetSysClockFreq+0xc8>)
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	fbb2 f2f3 	udiv	r2, r2, r3
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	fb02 f303 	mul.w	r3, r2, r3
 8004204:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004208:	623b      	str	r3, [r7, #32]
      break;
 800420a:	e002      	b.n	8004212 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800420c:	4b05      	ldr	r3, [pc, #20]	; (8004224 <HAL_RCC_GetSysClockFreq+0xc8>)
 800420e:	623b      	str	r3, [r7, #32]
      break;
 8004210:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004212:	6a3b      	ldr	r3, [r7, #32]
}
 8004214:	4618      	mov	r0, r3
 8004216:	372c      	adds	r7, #44	; 0x2c
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	40021000 	.word	0x40021000
 8004224:	007a1200 	.word	0x007a1200
 8004228:	0800c4a8 	.word	0x0800c4a8
 800422c:	0800c4b8 	.word	0x0800c4b8

08004230 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004230:	b480      	push	{r7}
 8004232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004234:	4b03      	ldr	r3, [pc, #12]	; (8004244 <HAL_RCC_GetHCLKFreq+0x14>)
 8004236:	681b      	ldr	r3, [r3, #0]
}
 8004238:	4618      	mov	r0, r3
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	20000060 	.word	0x20000060

08004248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800424e:	f7ff ffef 	bl	8004230 <HAL_RCC_GetHCLKFreq>
 8004252:	4601      	mov	r1, r0
 8004254:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800425c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004260:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	fa92 f2a2 	rbit	r2, r2
 8004268:	603a      	str	r2, [r7, #0]
  return result;
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	fab2 f282 	clz	r2, r2
 8004270:	b2d2      	uxtb	r2, r2
 8004272:	40d3      	lsrs	r3, r2
 8004274:	4a04      	ldr	r2, [pc, #16]	; (8004288 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004276:	5cd3      	ldrb	r3, [r2, r3]
 8004278:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800427c:	4618      	mov	r0, r3
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	40021000 	.word	0x40021000
 8004288:	0800c4a0 	.word	0x0800c4a0

0800428c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004292:	f7ff ffcd 	bl	8004230 <HAL_RCC_GetHCLKFreq>
 8004296:	4601      	mov	r1, r0
 8004298:	4b0b      	ldr	r3, [pc, #44]	; (80042c8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80042a0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80042a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	fa92 f2a2 	rbit	r2, r2
 80042ac:	603a      	str	r2, [r7, #0]
  return result;
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	fab2 f282 	clz	r2, r2
 80042b4:	b2d2      	uxtb	r2, r2
 80042b6:	40d3      	lsrs	r3, r2
 80042b8:	4a04      	ldr	r2, [pc, #16]	; (80042cc <HAL_RCC_GetPCLK2Freq+0x40>)
 80042ba:	5cd3      	ldrb	r3, [r2, r3]
 80042bc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80042c0:	4618      	mov	r0, r3
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	40021000 	.word	0x40021000
 80042cc:	0800c4a0 	.word	0x0800c4a0

080042d0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	220f      	movs	r2, #15
 80042de:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042e0:	4b12      	ldr	r3, [pc, #72]	; (800432c <HAL_RCC_GetClockConfig+0x5c>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f003 0203 	and.w	r2, r3, #3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80042ec:	4b0f      	ldr	r3, [pc, #60]	; (800432c <HAL_RCC_GetClockConfig+0x5c>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80042f8:	4b0c      	ldr	r3, [pc, #48]	; (800432c <HAL_RCC_GetClockConfig+0x5c>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004304:	4b09      	ldr	r3, [pc, #36]	; (800432c <HAL_RCC_GetClockConfig+0x5c>)
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	08db      	lsrs	r3, r3, #3
 800430a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8004312:	4b07      	ldr	r3, [pc, #28]	; (8004330 <HAL_RCC_GetClockConfig+0x60>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0207 	and.w	r2, r3, #7
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	601a      	str	r2, [r3, #0]
}
 800431e:	bf00      	nop
 8004320:	370c      	adds	r7, #12
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	40021000 	.word	0x40021000
 8004330:	40022000 	.word	0x40022000

08004334 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b092      	sub	sp, #72	; 0x48
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004344:	2300      	movs	r3, #0
 8004346:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004352:	2b00      	cmp	r3, #0
 8004354:	f000 80d4 	beq.w	8004500 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004358:	4b4e      	ldr	r3, [pc, #312]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10e      	bne.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004364:	4b4b      	ldr	r3, [pc, #300]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	4a4a      	ldr	r2, [pc, #296]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800436a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800436e:	61d3      	str	r3, [r2, #28]
 8004370:	4b48      	ldr	r3, [pc, #288]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004378:	60bb      	str	r3, [r7, #8]
 800437a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800437c:	2301      	movs	r3, #1
 800437e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004382:	4b45      	ldr	r3, [pc, #276]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438a:	2b00      	cmp	r3, #0
 800438c:	d118      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800438e:	4b42      	ldr	r3, [pc, #264]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a41      	ldr	r2, [pc, #260]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004398:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800439a:	f7fe f9e3 	bl	8002764 <HAL_GetTick>
 800439e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043a0:	e008      	b.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043a2:	f7fe f9df 	bl	8002764 <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b64      	cmp	r3, #100	; 0x64
 80043ae:	d901      	bls.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e1d6      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b4:	4b38      	ldr	r3, [pc, #224]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0f0      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043c0:	4b34      	ldr	r3, [pc, #208]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 8084 	beq.w	80044da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043dc:	429a      	cmp	r2, r3
 80043de:	d07c      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043e0:	4b2c      	ldr	r3, [pc, #176]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043e2:	6a1b      	ldr	r3, [r3, #32]
 80043e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80043ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f2:	fa93 f3a3 	rbit	r3, r3
 80043f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80043f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043fa:	fab3 f383 	clz	r3, r3
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	461a      	mov	r2, r3
 8004402:	4b26      	ldr	r3, [pc, #152]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004404:	4413      	add	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	461a      	mov	r2, r3
 800440a:	2301      	movs	r3, #1
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004412:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004416:	fa93 f3a3 	rbit	r3, r3
 800441a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800441c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800441e:	fab3 f383 	clz	r3, r3
 8004422:	b2db      	uxtb	r3, r3
 8004424:	461a      	mov	r2, r3
 8004426:	4b1d      	ldr	r3, [pc, #116]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004428:	4413      	add	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	461a      	mov	r2, r3
 800442e:	2300      	movs	r3, #0
 8004430:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004432:	4a18      	ldr	r2, [pc, #96]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004436:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d04b      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004442:	f7fe f98f 	bl	8002764 <HAL_GetTick>
 8004446:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004448:	e00a      	b.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800444a:	f7fe f98b 	bl	8002764 <HAL_GetTick>
 800444e:	4602      	mov	r2, r0
 8004450:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004452:	1ad3      	subs	r3, r2, r3
 8004454:	f241 3288 	movw	r2, #5000	; 0x1388
 8004458:	4293      	cmp	r3, r2
 800445a:	d901      	bls.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e180      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004460:	2302      	movs	r3, #2
 8004462:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004466:	fa93 f3a3 	rbit	r3, r3
 800446a:	627b      	str	r3, [r7, #36]	; 0x24
 800446c:	2302      	movs	r3, #2
 800446e:	623b      	str	r3, [r7, #32]
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	fa93 f3a3 	rbit	r3, r3
 8004476:	61fb      	str	r3, [r7, #28]
  return result;
 8004478:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800447a:	fab3 f383 	clz	r3, r3
 800447e:	b2db      	uxtb	r3, r3
 8004480:	095b      	lsrs	r3, r3, #5
 8004482:	b2db      	uxtb	r3, r3
 8004484:	f043 0302 	orr.w	r3, r3, #2
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d108      	bne.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800448e:	4b01      	ldr	r3, [pc, #4]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	e00d      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004494:	40021000 	.word	0x40021000
 8004498:	40007000 	.word	0x40007000
 800449c:	10908100 	.word	0x10908100
 80044a0:	2302      	movs	r3, #2
 80044a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	fa93 f3a3 	rbit	r3, r3
 80044aa:	617b      	str	r3, [r7, #20]
 80044ac:	4b9a      	ldr	r3, [pc, #616]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b0:	2202      	movs	r2, #2
 80044b2:	613a      	str	r2, [r7, #16]
 80044b4:	693a      	ldr	r2, [r7, #16]
 80044b6:	fa92 f2a2 	rbit	r2, r2
 80044ba:	60fa      	str	r2, [r7, #12]
  return result;
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	fab2 f282 	clz	r2, r2
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044c8:	b2d2      	uxtb	r2, r2
 80044ca:	f002 021f 	and.w	r2, r2, #31
 80044ce:	2101      	movs	r1, #1
 80044d0:	fa01 f202 	lsl.w	r2, r1, r2
 80044d4:	4013      	ands	r3, r2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0b7      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80044da:	4b8f      	ldr	r3, [pc, #572]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044dc:	6a1b      	ldr	r3, [r3, #32]
 80044de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	498c      	ldr	r1, [pc, #560]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80044ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d105      	bne.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044f4:	4b88      	ldr	r3, [pc, #544]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044f6:	69db      	ldr	r3, [r3, #28]
 80044f8:	4a87      	ldr	r2, [pc, #540]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80044fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044fe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b00      	cmp	r3, #0
 800450a:	d008      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800450c:	4b82      	ldr	r3, [pc, #520]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800450e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004510:	f023 0203 	bic.w	r2, r3, #3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	497f      	ldr	r1, [pc, #508]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800451a:	4313      	orrs	r3, r2
 800451c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d008      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800452a:	4b7b      	ldr	r3, [pc, #492]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800452c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	4978      	ldr	r1, [pc, #480]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004538:	4313      	orrs	r3, r2
 800453a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d008      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004548:	4b73      	ldr	r3, [pc, #460]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800454a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	4970      	ldr	r1, [pc, #448]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004556:	4313      	orrs	r3, r2
 8004558:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0320 	and.w	r3, r3, #32
 8004562:	2b00      	cmp	r3, #0
 8004564:	d008      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004566:	4b6c      	ldr	r3, [pc, #432]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456a:	f023 0210 	bic.w	r2, r3, #16
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	4969      	ldr	r1, [pc, #420]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004574:	4313      	orrs	r3, r2
 8004576:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d008      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004584:	4b64      	ldr	r3, [pc, #400]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004590:	4961      	ldr	r1, [pc, #388]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004592:	4313      	orrs	r3, r2
 8004594:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d008      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045a2:	4b5d      	ldr	r3, [pc, #372]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80045a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a6:	f023 0220 	bic.w	r2, r3, #32
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	495a      	ldr	r1, [pc, #360]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d008      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045c0:	4b55      	ldr	r3, [pc, #340]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80045c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	4952      	ldr	r1, [pc, #328]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0308 	and.w	r3, r3, #8
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d008      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045de:	4b4e      	ldr	r3, [pc, #312]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80045e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	494b      	ldr	r1, [pc, #300]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0310 	and.w	r3, r3, #16
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d008      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045fc:	4b46      	ldr	r3, [pc, #280]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80045fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004600:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	4943      	ldr	r1, [pc, #268]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800460a:	4313      	orrs	r3, r2
 800460c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004616:	2b00      	cmp	r3, #0
 8004618:	d008      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800461a:	4b3f      	ldr	r3, [pc, #252]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	493c      	ldr	r1, [pc, #240]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004628:	4313      	orrs	r3, r2
 800462a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004634:	2b00      	cmp	r3, #0
 8004636:	d008      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004638:	4b37      	ldr	r3, [pc, #220]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800463a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004644:	4934      	ldr	r1, [pc, #208]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004646:	4313      	orrs	r3, r2
 8004648:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004652:	2b00      	cmp	r3, #0
 8004654:	d008      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004656:	4b30      	ldr	r3, [pc, #192]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004662:	492d      	ldr	r1, [pc, #180]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004664:	4313      	orrs	r3, r2
 8004666:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d008      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004674:	4b28      	ldr	r3, [pc, #160]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004678:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004680:	4925      	ldr	r1, [pc, #148]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004682:	4313      	orrs	r3, r2
 8004684:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d008      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004692:	4b21      	ldr	r3, [pc, #132]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004696:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469e:	491e      	ldr	r1, [pc, #120]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d008      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80046b0:	4b19      	ldr	r3, [pc, #100]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046bc:	4916      	ldr	r1, [pc, #88]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d008      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80046ce:	4b12      	ldr	r3, [pc, #72]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046da:	490f      	ldr	r1, [pc, #60]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d008      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80046ec:	4b0a      	ldr	r3, [pc, #40]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f8:	4907      	ldr	r1, [pc, #28]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00c      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800470a:	4b03      	ldr	r3, [pc, #12]	; (8004718 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800470c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800470e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	e002      	b.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004716:	bf00      	nop
 8004718:	40021000 	.word	0x40021000
 800471c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800471e:	4913      	ldr	r1, [pc, #76]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004720:	4313      	orrs	r3, r2
 8004722:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d008      	beq.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004730:	4b0e      	ldr	r3, [pc, #56]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004734:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800473c:	490b      	ldr	r1, [pc, #44]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800473e:	4313      	orrs	r3, r2
 8004740:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d008      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800474e:	4b07      	ldr	r3, [pc, #28]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004752:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800475a:	4904      	ldr	r1, [pc, #16]	; (800476c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800475c:	4313      	orrs	r3, r2
 800475e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3748      	adds	r7, #72	; 0x48
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	40021000 	.word	0x40021000

08004770 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e049      	b.n	8004816 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d106      	bne.n	800479c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7fc ff0e 	bl	80015b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	3304      	adds	r3, #4
 80047ac:	4619      	mov	r1, r3
 80047ae:	4610      	mov	r0, r2
 80047b0:	f001 f916 	bl	80059e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
	...

08004820 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b01      	cmp	r3, #1
 8004832:	d001      	beq.n	8004838 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e04f      	b.n	80048d8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68da      	ldr	r2, [r3, #12]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0201 	orr.w	r2, r2, #1
 800484e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a23      	ldr	r2, [pc, #140]	; (80048e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d01d      	beq.n	8004896 <HAL_TIM_Base_Start_IT+0x76>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004862:	d018      	beq.n	8004896 <HAL_TIM_Base_Start_IT+0x76>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a1f      	ldr	r2, [pc, #124]	; (80048e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d013      	beq.n	8004896 <HAL_TIM_Base_Start_IT+0x76>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a1e      	ldr	r2, [pc, #120]	; (80048ec <HAL_TIM_Base_Start_IT+0xcc>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d00e      	beq.n	8004896 <HAL_TIM_Base_Start_IT+0x76>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a1c      	ldr	r2, [pc, #112]	; (80048f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d009      	beq.n	8004896 <HAL_TIM_Base_Start_IT+0x76>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a1b      	ldr	r2, [pc, #108]	; (80048f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d004      	beq.n	8004896 <HAL_TIM_Base_Start_IT+0x76>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a19      	ldr	r2, [pc, #100]	; (80048f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d115      	bne.n	80048c2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	689a      	ldr	r2, [r3, #8]
 800489c:	4b17      	ldr	r3, [pc, #92]	; (80048fc <HAL_TIM_Base_Start_IT+0xdc>)
 800489e:	4013      	ands	r3, r2
 80048a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2b06      	cmp	r3, #6
 80048a6:	d015      	beq.n	80048d4 <HAL_TIM_Base_Start_IT+0xb4>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ae:	d011      	beq.n	80048d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f042 0201 	orr.w	r2, r2, #1
 80048be:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c0:	e008      	b.n	80048d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f042 0201 	orr.w	r2, r2, #1
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	e000      	b.n	80048d6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048d4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048d6:	2300      	movs	r3, #0
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr
 80048e4:	40012c00 	.word	0x40012c00
 80048e8:	40000400 	.word	0x40000400
 80048ec:	40000800 	.word	0x40000800
 80048f0:	40013400 	.word	0x40013400
 80048f4:	40014000 	.word	0x40014000
 80048f8:	40015000 	.word	0x40015000
 80048fc:	00010007 	.word	0x00010007

08004900 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e049      	b.n	80049a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d106      	bne.n	800492c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f841 	bl	80049ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2202      	movs	r2, #2
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	3304      	adds	r3, #4
 800493c:	4619      	mov	r1, r3
 800493e:	4610      	mov	r0, r2
 8004940:	f001 f84e 	bl	80059e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
	...

080049c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d109      	bne.n	80049e8 <HAL_TIM_PWM_Start+0x24>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b01      	cmp	r3, #1
 80049de:	bf14      	ite	ne
 80049e0:	2301      	movne	r3, #1
 80049e2:	2300      	moveq	r3, #0
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	e03c      	b.n	8004a62 <HAL_TIM_PWM_Start+0x9e>
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d109      	bne.n	8004a02 <HAL_TIM_PWM_Start+0x3e>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	bf14      	ite	ne
 80049fa:	2301      	movne	r3, #1
 80049fc:	2300      	moveq	r3, #0
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	e02f      	b.n	8004a62 <HAL_TIM_PWM_Start+0x9e>
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	d109      	bne.n	8004a1c <HAL_TIM_PWM_Start+0x58>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	bf14      	ite	ne
 8004a14:	2301      	movne	r3, #1
 8004a16:	2300      	moveq	r3, #0
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	e022      	b.n	8004a62 <HAL_TIM_PWM_Start+0x9e>
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	2b0c      	cmp	r3, #12
 8004a20:	d109      	bne.n	8004a36 <HAL_TIM_PWM_Start+0x72>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	bf14      	ite	ne
 8004a2e:	2301      	movne	r3, #1
 8004a30:	2300      	moveq	r3, #0
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	e015      	b.n	8004a62 <HAL_TIM_PWM_Start+0x9e>
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	2b10      	cmp	r3, #16
 8004a3a:	d109      	bne.n	8004a50 <HAL_TIM_PWM_Start+0x8c>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	bf14      	ite	ne
 8004a48:	2301      	movne	r3, #1
 8004a4a:	2300      	moveq	r3, #0
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	e008      	b.n	8004a62 <HAL_TIM_PWM_Start+0x9e>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	bf14      	ite	ne
 8004a5c:	2301      	movne	r3, #1
 8004a5e:	2300      	moveq	r3, #0
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e0a1      	b.n	8004bae <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d104      	bne.n	8004a7a <HAL_TIM_PWM_Start+0xb6>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2202      	movs	r2, #2
 8004a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a78:	e023      	b.n	8004ac2 <HAL_TIM_PWM_Start+0xfe>
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	2b04      	cmp	r3, #4
 8004a7e:	d104      	bne.n	8004a8a <HAL_TIM_PWM_Start+0xc6>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a88:	e01b      	b.n	8004ac2 <HAL_TIM_PWM_Start+0xfe>
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b08      	cmp	r3, #8
 8004a8e:	d104      	bne.n	8004a9a <HAL_TIM_PWM_Start+0xd6>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a98:	e013      	b.n	8004ac2 <HAL_TIM_PWM_Start+0xfe>
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b0c      	cmp	r3, #12
 8004a9e:	d104      	bne.n	8004aaa <HAL_TIM_PWM_Start+0xe6>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004aa8:	e00b      	b.n	8004ac2 <HAL_TIM_PWM_Start+0xfe>
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	2b10      	cmp	r3, #16
 8004aae:	d104      	bne.n	8004aba <HAL_TIM_PWM_Start+0xf6>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2202      	movs	r2, #2
 8004ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ab8:	e003      	b.n	8004ac2 <HAL_TIM_PWM_Start+0xfe>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2202      	movs	r2, #2
 8004abe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	6839      	ldr	r1, [r7, #0]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f001 fcea 	bl	80064a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a38      	ldr	r2, [pc, #224]	; (8004bb8 <HAL_TIM_PWM_Start+0x1f4>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d018      	beq.n	8004b0c <HAL_TIM_PWM_Start+0x148>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a37      	ldr	r2, [pc, #220]	; (8004bbc <HAL_TIM_PWM_Start+0x1f8>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d013      	beq.n	8004b0c <HAL_TIM_PWM_Start+0x148>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a35      	ldr	r2, [pc, #212]	; (8004bc0 <HAL_TIM_PWM_Start+0x1fc>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d00e      	beq.n	8004b0c <HAL_TIM_PWM_Start+0x148>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a34      	ldr	r2, [pc, #208]	; (8004bc4 <HAL_TIM_PWM_Start+0x200>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d009      	beq.n	8004b0c <HAL_TIM_PWM_Start+0x148>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a32      	ldr	r2, [pc, #200]	; (8004bc8 <HAL_TIM_PWM_Start+0x204>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d004      	beq.n	8004b0c <HAL_TIM_PWM_Start+0x148>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a31      	ldr	r2, [pc, #196]	; (8004bcc <HAL_TIM_PWM_Start+0x208>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d101      	bne.n	8004b10 <HAL_TIM_PWM_Start+0x14c>
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e000      	b.n	8004b12 <HAL_TIM_PWM_Start+0x14e>
 8004b10:	2300      	movs	r3, #0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d007      	beq.n	8004b26 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	4a23      	ldr	r2, [pc, #140]	; (8004bb8 <HAL_TIM_PWM_Start+0x1f4>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d01d      	beq.n	8004b6c <HAL_TIM_PWM_Start+0x1a8>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b38:	d018      	beq.n	8004b6c <HAL_TIM_PWM_Start+0x1a8>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a24      	ldr	r2, [pc, #144]	; (8004bd0 <HAL_TIM_PWM_Start+0x20c>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d013      	beq.n	8004b6c <HAL_TIM_PWM_Start+0x1a8>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a22      	ldr	r2, [pc, #136]	; (8004bd4 <HAL_TIM_PWM_Start+0x210>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d00e      	beq.n	8004b6c <HAL_TIM_PWM_Start+0x1a8>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a1a      	ldr	r2, [pc, #104]	; (8004bbc <HAL_TIM_PWM_Start+0x1f8>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d009      	beq.n	8004b6c <HAL_TIM_PWM_Start+0x1a8>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a18      	ldr	r2, [pc, #96]	; (8004bc0 <HAL_TIM_PWM_Start+0x1fc>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d004      	beq.n	8004b6c <HAL_TIM_PWM_Start+0x1a8>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a19      	ldr	r2, [pc, #100]	; (8004bcc <HAL_TIM_PWM_Start+0x208>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d115      	bne.n	8004b98 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689a      	ldr	r2, [r3, #8]
 8004b72:	4b19      	ldr	r3, [pc, #100]	; (8004bd8 <HAL_TIM_PWM_Start+0x214>)
 8004b74:	4013      	ands	r3, r2
 8004b76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2b06      	cmp	r3, #6
 8004b7c:	d015      	beq.n	8004baa <HAL_TIM_PWM_Start+0x1e6>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b84:	d011      	beq.n	8004baa <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	681a      	ldr	r2, [r3, #0]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f042 0201 	orr.w	r2, r2, #1
 8004b94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b96:	e008      	b.n	8004baa <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f042 0201 	orr.w	r2, r2, #1
 8004ba6:	601a      	str	r2, [r3, #0]
 8004ba8:	e000      	b.n	8004bac <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004baa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3710      	adds	r7, #16
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	40012c00 	.word	0x40012c00
 8004bbc:	40013400 	.word	0x40013400
 8004bc0:	40014000 	.word	0x40014000
 8004bc4:	40014400 	.word	0x40014400
 8004bc8:	40014800 	.word	0x40014800
 8004bcc:	40015000 	.word	0x40015000
 8004bd0:	40000400 	.word	0x40000400
 8004bd4:	40000800 	.word	0x40000800
 8004bd8:	00010007 	.word	0x00010007

08004bdc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b082      	sub	sp, #8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2200      	movs	r2, #0
 8004bec:	6839      	ldr	r1, [r7, #0]
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f001 fc58 	bl	80064a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a40      	ldr	r2, [pc, #256]	; (8004cfc <HAL_TIM_PWM_Stop+0x120>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d018      	beq.n	8004c30 <HAL_TIM_PWM_Stop+0x54>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a3f      	ldr	r2, [pc, #252]	; (8004d00 <HAL_TIM_PWM_Stop+0x124>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d013      	beq.n	8004c30 <HAL_TIM_PWM_Stop+0x54>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a3d      	ldr	r2, [pc, #244]	; (8004d04 <HAL_TIM_PWM_Stop+0x128>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d00e      	beq.n	8004c30 <HAL_TIM_PWM_Stop+0x54>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a3c      	ldr	r2, [pc, #240]	; (8004d08 <HAL_TIM_PWM_Stop+0x12c>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d009      	beq.n	8004c30 <HAL_TIM_PWM_Stop+0x54>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a3a      	ldr	r2, [pc, #232]	; (8004d0c <HAL_TIM_PWM_Stop+0x130>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d004      	beq.n	8004c30 <HAL_TIM_PWM_Stop+0x54>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a39      	ldr	r2, [pc, #228]	; (8004d10 <HAL_TIM_PWM_Stop+0x134>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d101      	bne.n	8004c34 <HAL_TIM_PWM_Stop+0x58>
 8004c30:	2301      	movs	r3, #1
 8004c32:	e000      	b.n	8004c36 <HAL_TIM_PWM_Stop+0x5a>
 8004c34:	2300      	movs	r3, #0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d017      	beq.n	8004c6a <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6a1a      	ldr	r2, [r3, #32]
 8004c40:	f241 1311 	movw	r3, #4369	; 0x1111
 8004c44:	4013      	ands	r3, r2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d10f      	bne.n	8004c6a <HAL_TIM_PWM_Stop+0x8e>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	6a1a      	ldr	r2, [r3, #32]
 8004c50:	f240 4344 	movw	r3, #1092	; 0x444
 8004c54:	4013      	ands	r3, r2
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d107      	bne.n	8004c6a <HAL_TIM_PWM_Stop+0x8e>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c68:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6a1a      	ldr	r2, [r3, #32]
 8004c70:	f241 1311 	movw	r3, #4369	; 0x1111
 8004c74:	4013      	ands	r3, r2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10f      	bne.n	8004c9a <HAL_TIM_PWM_Stop+0xbe>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	6a1a      	ldr	r2, [r3, #32]
 8004c80:	f240 4344 	movw	r3, #1092	; 0x444
 8004c84:	4013      	ands	r3, r2
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d107      	bne.n	8004c9a <HAL_TIM_PWM_Stop+0xbe>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f022 0201 	bic.w	r2, r2, #1
 8004c98:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d104      	bne.n	8004caa <HAL_TIM_PWM_Stop+0xce>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ca8:	e023      	b.n	8004cf2 <HAL_TIM_PWM_Stop+0x116>
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	2b04      	cmp	r3, #4
 8004cae:	d104      	bne.n	8004cba <HAL_TIM_PWM_Stop+0xde>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cb8:	e01b      	b.n	8004cf2 <HAL_TIM_PWM_Stop+0x116>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2b08      	cmp	r3, #8
 8004cbe:	d104      	bne.n	8004cca <HAL_TIM_PWM_Stop+0xee>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cc8:	e013      	b.n	8004cf2 <HAL_TIM_PWM_Stop+0x116>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2b0c      	cmp	r3, #12
 8004cce:	d104      	bne.n	8004cda <HAL_TIM_PWM_Stop+0xfe>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cd8:	e00b      	b.n	8004cf2 <HAL_TIM_PWM_Stop+0x116>
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	2b10      	cmp	r3, #16
 8004cde:	d104      	bne.n	8004cea <HAL_TIM_PWM_Stop+0x10e>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ce8:	e003      	b.n	8004cf2 <HAL_TIM_PWM_Stop+0x116>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2201      	movs	r2, #1
 8004cee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3708      	adds	r7, #8
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	40012c00 	.word	0x40012c00
 8004d00:	40013400 	.word	0x40013400
 8004d04:	40014000 	.word	0x40014000
 8004d08:	40014400 	.word	0x40014400
 8004d0c:	40014800 	.word	0x40014800
 8004d10:	40015000 	.word	0x40015000

08004d14 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b082      	sub	sp, #8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e049      	b.n	8004dba <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d106      	bne.n	8004d40 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 f841 	bl	8004dc2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2202      	movs	r2, #2
 8004d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3304      	adds	r3, #4
 8004d50:	4619      	mov	r1, r3
 8004d52:	4610      	mov	r0, r2
 8004d54:	f000 fe44 	bl	80059e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004dca:	bf00      	nop
 8004dcc:	370c      	adds	r7, #12
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd4:	4770      	bx	lr
	...

08004dd8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d104      	bne.n	8004df6 <HAL_TIM_IC_Start_IT+0x1e>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	e023      	b.n	8004e3e <HAL_TIM_IC_Start_IT+0x66>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b04      	cmp	r3, #4
 8004dfa:	d104      	bne.n	8004e06 <HAL_TIM_IC_Start_IT+0x2e>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e02:	b2db      	uxtb	r3, r3
 8004e04:	e01b      	b.n	8004e3e <HAL_TIM_IC_Start_IT+0x66>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d104      	bne.n	8004e16 <HAL_TIM_IC_Start_IT+0x3e>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	e013      	b.n	8004e3e <HAL_TIM_IC_Start_IT+0x66>
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2b0c      	cmp	r3, #12
 8004e1a:	d104      	bne.n	8004e26 <HAL_TIM_IC_Start_IT+0x4e>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	e00b      	b.n	8004e3e <HAL_TIM_IC_Start_IT+0x66>
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	2b10      	cmp	r3, #16
 8004e2a:	d104      	bne.n	8004e36 <HAL_TIM_IC_Start_IT+0x5e>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	e003      	b.n	8004e3e <HAL_TIM_IC_Start_IT+0x66>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d104      	bne.n	8004e50 <HAL_TIM_IC_Start_IT+0x78>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	e013      	b.n	8004e78 <HAL_TIM_IC_Start_IT+0xa0>
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	2b04      	cmp	r3, #4
 8004e54:	d104      	bne.n	8004e60 <HAL_TIM_IC_Start_IT+0x88>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	e00b      	b.n	8004e78 <HAL_TIM_IC_Start_IT+0xa0>
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	2b08      	cmp	r3, #8
 8004e64:	d104      	bne.n	8004e70 <HAL_TIM_IC_Start_IT+0x98>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	e003      	b.n	8004e78 <HAL_TIM_IC_Start_IT+0xa0>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004e7a:	7bbb      	ldrb	r3, [r7, #14]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d102      	bne.n	8004e86 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004e80:	7b7b      	ldrb	r3, [r7, #13]
 8004e82:	2b01      	cmp	r3, #1
 8004e84:	d001      	beq.n	8004e8a <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e0dd      	b.n	8005046 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d104      	bne.n	8004e9a <HAL_TIM_IC_Start_IT+0xc2>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2202      	movs	r2, #2
 8004e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e98:	e023      	b.n	8004ee2 <HAL_TIM_IC_Start_IT+0x10a>
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	2b04      	cmp	r3, #4
 8004e9e:	d104      	bne.n	8004eaa <HAL_TIM_IC_Start_IT+0xd2>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ea8:	e01b      	b.n	8004ee2 <HAL_TIM_IC_Start_IT+0x10a>
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b08      	cmp	r3, #8
 8004eae:	d104      	bne.n	8004eba <HAL_TIM_IC_Start_IT+0xe2>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004eb8:	e013      	b.n	8004ee2 <HAL_TIM_IC_Start_IT+0x10a>
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b0c      	cmp	r3, #12
 8004ebe:	d104      	bne.n	8004eca <HAL_TIM_IC_Start_IT+0xf2>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ec8:	e00b      	b.n	8004ee2 <HAL_TIM_IC_Start_IT+0x10a>
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2b10      	cmp	r3, #16
 8004ece:	d104      	bne.n	8004eda <HAL_TIM_IC_Start_IT+0x102>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ed8:	e003      	b.n	8004ee2 <HAL_TIM_IC_Start_IT+0x10a>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2202      	movs	r2, #2
 8004ede:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d104      	bne.n	8004ef2 <HAL_TIM_IC_Start_IT+0x11a>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2202      	movs	r2, #2
 8004eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ef0:	e013      	b.n	8004f1a <HAL_TIM_IC_Start_IT+0x142>
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	d104      	bne.n	8004f02 <HAL_TIM_IC_Start_IT+0x12a>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2202      	movs	r2, #2
 8004efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f00:	e00b      	b.n	8004f1a <HAL_TIM_IC_Start_IT+0x142>
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d104      	bne.n	8004f12 <HAL_TIM_IC_Start_IT+0x13a>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f10:	e003      	b.n	8004f1a <HAL_TIM_IC_Start_IT+0x142>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2202      	movs	r2, #2
 8004f16:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	2b0c      	cmp	r3, #12
 8004f1e:	d841      	bhi.n	8004fa4 <HAL_TIM_IC_Start_IT+0x1cc>
 8004f20:	a201      	add	r2, pc, #4	; (adr r2, 8004f28 <HAL_TIM_IC_Start_IT+0x150>)
 8004f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f26:	bf00      	nop
 8004f28:	08004f5d 	.word	0x08004f5d
 8004f2c:	08004fa5 	.word	0x08004fa5
 8004f30:	08004fa5 	.word	0x08004fa5
 8004f34:	08004fa5 	.word	0x08004fa5
 8004f38:	08004f6f 	.word	0x08004f6f
 8004f3c:	08004fa5 	.word	0x08004fa5
 8004f40:	08004fa5 	.word	0x08004fa5
 8004f44:	08004fa5 	.word	0x08004fa5
 8004f48:	08004f81 	.word	0x08004f81
 8004f4c:	08004fa5 	.word	0x08004fa5
 8004f50:	08004fa5 	.word	0x08004fa5
 8004f54:	08004fa5 	.word	0x08004fa5
 8004f58:	08004f93 	.word	0x08004f93
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68da      	ldr	r2, [r3, #12]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f042 0202 	orr.w	r2, r2, #2
 8004f6a:	60da      	str	r2, [r3, #12]
      break;
 8004f6c:	e01d      	b.n	8004faa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68da      	ldr	r2, [r3, #12]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f042 0204 	orr.w	r2, r2, #4
 8004f7c:	60da      	str	r2, [r3, #12]
      break;
 8004f7e:	e014      	b.n	8004faa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f042 0208 	orr.w	r2, r2, #8
 8004f8e:	60da      	str	r2, [r3, #12]
      break;
 8004f90:	e00b      	b.n	8004faa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68da      	ldr	r2, [r3, #12]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f042 0210 	orr.w	r2, r2, #16
 8004fa0:	60da      	str	r2, [r3, #12]
      break;
 8004fa2:	e002      	b.n	8004faa <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8004fa8:	bf00      	nop
  }

  if (status == HAL_OK)
 8004faa:	7bfb      	ldrb	r3, [r7, #15]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d149      	bne.n	8005044 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2201      	movs	r2, #1
 8004fb6:	6839      	ldr	r1, [r7, #0]
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f001 fa73 	bl	80064a4 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a23      	ldr	r2, [pc, #140]	; (8005050 <HAL_TIM_IC_Start_IT+0x278>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d01d      	beq.n	8005004 <HAL_TIM_IC_Start_IT+0x22c>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fd0:	d018      	beq.n	8005004 <HAL_TIM_IC_Start_IT+0x22c>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a1f      	ldr	r2, [pc, #124]	; (8005054 <HAL_TIM_IC_Start_IT+0x27c>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d013      	beq.n	8005004 <HAL_TIM_IC_Start_IT+0x22c>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a1d      	ldr	r2, [pc, #116]	; (8005058 <HAL_TIM_IC_Start_IT+0x280>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d00e      	beq.n	8005004 <HAL_TIM_IC_Start_IT+0x22c>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a1c      	ldr	r2, [pc, #112]	; (800505c <HAL_TIM_IC_Start_IT+0x284>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d009      	beq.n	8005004 <HAL_TIM_IC_Start_IT+0x22c>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a1a      	ldr	r2, [pc, #104]	; (8005060 <HAL_TIM_IC_Start_IT+0x288>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d004      	beq.n	8005004 <HAL_TIM_IC_Start_IT+0x22c>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a19      	ldr	r2, [pc, #100]	; (8005064 <HAL_TIM_IC_Start_IT+0x28c>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d115      	bne.n	8005030 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689a      	ldr	r2, [r3, #8]
 800500a:	4b17      	ldr	r3, [pc, #92]	; (8005068 <HAL_TIM_IC_Start_IT+0x290>)
 800500c:	4013      	ands	r3, r2
 800500e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	2b06      	cmp	r3, #6
 8005014:	d015      	beq.n	8005042 <HAL_TIM_IC_Start_IT+0x26a>
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800501c:	d011      	beq.n	8005042 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f042 0201 	orr.w	r2, r2, #1
 800502c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800502e:	e008      	b.n	8005042 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f042 0201 	orr.w	r2, r2, #1
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	e000      	b.n	8005044 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005042:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005044:	7bfb      	ldrb	r3, [r7, #15]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	40012c00 	.word	0x40012c00
 8005054:	40000400 	.word	0x40000400
 8005058:	40000800 	.word	0x40000800
 800505c:	40013400 	.word	0x40013400
 8005060:	40014000 	.word	0x40014000
 8005064:	40015000 	.word	0x40015000
 8005068:	00010007 	.word	0x00010007

0800506c <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005076:	2300      	movs	r3, #0
 8005078:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	2b0c      	cmp	r3, #12
 800507e:	d841      	bhi.n	8005104 <HAL_TIM_IC_Stop_IT+0x98>
 8005080:	a201      	add	r2, pc, #4	; (adr r2, 8005088 <HAL_TIM_IC_Stop_IT+0x1c>)
 8005082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005086:	bf00      	nop
 8005088:	080050bd 	.word	0x080050bd
 800508c:	08005105 	.word	0x08005105
 8005090:	08005105 	.word	0x08005105
 8005094:	08005105 	.word	0x08005105
 8005098:	080050cf 	.word	0x080050cf
 800509c:	08005105 	.word	0x08005105
 80050a0:	08005105 	.word	0x08005105
 80050a4:	08005105 	.word	0x08005105
 80050a8:	080050e1 	.word	0x080050e1
 80050ac:	08005105 	.word	0x08005105
 80050b0:	08005105 	.word	0x08005105
 80050b4:	08005105 	.word	0x08005105
 80050b8:	080050f3 	.word	0x080050f3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68da      	ldr	r2, [r3, #12]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 0202 	bic.w	r2, r2, #2
 80050ca:	60da      	str	r2, [r3, #12]
      break;
 80050cc:	e01d      	b.n	800510a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68da      	ldr	r2, [r3, #12]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 0204 	bic.w	r2, r2, #4
 80050dc:	60da      	str	r2, [r3, #12]
      break;
 80050de:	e014      	b.n	800510a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68da      	ldr	r2, [r3, #12]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f022 0208 	bic.w	r2, r2, #8
 80050ee:	60da      	str	r2, [r3, #12]
      break;
 80050f0:	e00b      	b.n	800510a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68da      	ldr	r2, [r3, #12]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 0210 	bic.w	r2, r2, #16
 8005100:	60da      	str	r2, [r3, #12]
      break;
 8005102:	e002      	b.n	800510a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	73fb      	strb	r3, [r7, #15]
      break;
 8005108:	bf00      	nop
  }

  if (status == HAL_OK)
 800510a:	7bfb      	ldrb	r3, [r7, #15]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d166      	bne.n	80051de <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2200      	movs	r2, #0
 8005116:	6839      	ldr	r1, [r7, #0]
 8005118:	4618      	mov	r0, r3
 800511a:	f001 f9c3 	bl	80064a4 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6a1a      	ldr	r2, [r3, #32]
 8005124:	f241 1311 	movw	r3, #4369	; 0x1111
 8005128:	4013      	ands	r3, r2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10f      	bne.n	800514e <HAL_TIM_IC_Stop_IT+0xe2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	6a1a      	ldr	r2, [r3, #32]
 8005134:	f240 4344 	movw	r3, #1092	; 0x444
 8005138:	4013      	ands	r3, r2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d107      	bne.n	800514e <HAL_TIM_IC_Stop_IT+0xe2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f022 0201 	bic.w	r2, r2, #1
 800514c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d104      	bne.n	800515e <HAL_TIM_IC_Stop_IT+0xf2>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800515c:	e023      	b.n	80051a6 <HAL_TIM_IC_Stop_IT+0x13a>
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2b04      	cmp	r3, #4
 8005162:	d104      	bne.n	800516e <HAL_TIM_IC_Stop_IT+0x102>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800516c:	e01b      	b.n	80051a6 <HAL_TIM_IC_Stop_IT+0x13a>
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	2b08      	cmp	r3, #8
 8005172:	d104      	bne.n	800517e <HAL_TIM_IC_Stop_IT+0x112>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800517c:	e013      	b.n	80051a6 <HAL_TIM_IC_Stop_IT+0x13a>
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	2b0c      	cmp	r3, #12
 8005182:	d104      	bne.n	800518e <HAL_TIM_IC_Stop_IT+0x122>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800518c:	e00b      	b.n	80051a6 <HAL_TIM_IC_Stop_IT+0x13a>
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	2b10      	cmp	r3, #16
 8005192:	d104      	bne.n	800519e <HAL_TIM_IC_Stop_IT+0x132>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800519c:	e003      	b.n	80051a6 <HAL_TIM_IC_Stop_IT+0x13a>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2201      	movs	r2, #1
 80051a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d104      	bne.n	80051b6 <HAL_TIM_IC_Stop_IT+0x14a>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051b4:	e013      	b.n	80051de <HAL_TIM_IC_Stop_IT+0x172>
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b04      	cmp	r3, #4
 80051ba:	d104      	bne.n	80051c6 <HAL_TIM_IC_Stop_IT+0x15a>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051c4:	e00b      	b.n	80051de <HAL_TIM_IC_Stop_IT+0x172>
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	2b08      	cmp	r3, #8
 80051ca:	d104      	bne.n	80051d6 <HAL_TIM_IC_Stop_IT+0x16a>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051d4:	e003      	b.n	80051de <HAL_TIM_IC_Stop_IT+0x172>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2201      	movs	r2, #1
 80051da:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 80051de:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d122      	bne.n	8005244 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b02      	cmp	r3, #2
 800520a:	d11b      	bne.n	8005244 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f06f 0202 	mvn.w	r2, #2
 8005214:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2201      	movs	r2, #1
 800521a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	699b      	ldr	r3, [r3, #24]
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f7fd f8de 	bl	80023ec <HAL_TIM_IC_CaptureCallback>
 8005230:	e005      	b.n	800523e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 fbb6 	bl	80059a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 fbbd 	bl	80059b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	f003 0304 	and.w	r3, r3, #4
 800524e:	2b04      	cmp	r3, #4
 8005250:	d122      	bne.n	8005298 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	f003 0304 	and.w	r3, r3, #4
 800525c:	2b04      	cmp	r3, #4
 800525e:	d11b      	bne.n	8005298 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f06f 0204 	mvn.w	r2, #4
 8005268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2202      	movs	r2, #2
 800526e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7fd f8b4 	bl	80023ec <HAL_TIM_IC_CaptureCallback>
 8005284:	e005      	b.n	8005292 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 fb8c 	bl	80059a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 fb93 	bl	80059b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	f003 0308 	and.w	r3, r3, #8
 80052a2:	2b08      	cmp	r3, #8
 80052a4:	d122      	bne.n	80052ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f003 0308 	and.w	r3, r3, #8
 80052b0:	2b08      	cmp	r3, #8
 80052b2:	d11b      	bne.n	80052ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f06f 0208 	mvn.w	r2, #8
 80052bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2204      	movs	r2, #4
 80052c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	f003 0303 	and.w	r3, r3, #3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7fd f88a 	bl	80023ec <HAL_TIM_IC_CaptureCallback>
 80052d8:	e005      	b.n	80052e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 fb62 	bl	80059a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 fb69 	bl	80059b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	f003 0310 	and.w	r3, r3, #16
 80052f6:	2b10      	cmp	r3, #16
 80052f8:	d122      	bne.n	8005340 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	f003 0310 	and.w	r3, r3, #16
 8005304:	2b10      	cmp	r3, #16
 8005306:	d11b      	bne.n	8005340 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f06f 0210 	mvn.w	r2, #16
 8005310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2208      	movs	r2, #8
 8005316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7fd f860 	bl	80023ec <HAL_TIM_IC_CaptureCallback>
 800532c:	e005      	b.n	800533a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 fb38 	bl	80059a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 fb3f 	bl	80059b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	f003 0301 	and.w	r3, r3, #1
 800534a:	2b01      	cmp	r3, #1
 800534c:	d10e      	bne.n	800536c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b01      	cmp	r3, #1
 800535a:	d107      	bne.n	800536c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f06f 0201 	mvn.w	r2, #1
 8005364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7fb fa56 	bl	8000818 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005376:	2b80      	cmp	r3, #128	; 0x80
 8005378:	d10e      	bne.n	8005398 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005384:	2b80      	cmp	r3, #128	; 0x80
 8005386:	d107      	bne.n	8005398 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f001 f9c8 	bl	8006728 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053a6:	d10e      	bne.n	80053c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053b2:	2b80      	cmp	r3, #128	; 0x80
 80053b4:	d107      	bne.n	80053c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80053be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f001 f9bb 	bl	800673c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d0:	2b40      	cmp	r3, #64	; 0x40
 80053d2:	d10e      	bne.n	80053f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053de:	2b40      	cmp	r3, #64	; 0x40
 80053e0:	d107      	bne.n	80053f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 faed 	bl	80059cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	f003 0320 	and.w	r3, r3, #32
 80053fc:	2b20      	cmp	r3, #32
 80053fe:	d10e      	bne.n	800541e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	f003 0320 	and.w	r3, r3, #32
 800540a:	2b20      	cmp	r3, #32
 800540c:	d107      	bne.n	800541e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f06f 0220 	mvn.w	r2, #32
 8005416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f001 f97b 	bl	8006714 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800541e:	bf00      	nop
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b086      	sub	sp, #24
 800542a:	af00      	add	r7, sp, #0
 800542c:	60f8      	str	r0, [r7, #12]
 800542e:	60b9      	str	r1, [r7, #8]
 8005430:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005432:	2300      	movs	r3, #0
 8005434:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800543c:	2b01      	cmp	r3, #1
 800543e:	d101      	bne.n	8005444 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005440:	2302      	movs	r3, #2
 8005442:	e088      	b.n	8005556 <HAL_TIM_IC_ConfigChannel+0x130>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d11b      	bne.n	800548a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005462:	f000 fe61 	bl	8006128 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	699a      	ldr	r2, [r3, #24]
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f022 020c 	bic.w	r2, r2, #12
 8005474:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	6999      	ldr	r1, [r3, #24]
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	430a      	orrs	r2, r1
 8005486:	619a      	str	r2, [r3, #24]
 8005488:	e060      	b.n	800554c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b04      	cmp	r3, #4
 800548e:	d11c      	bne.n	80054ca <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80054a0:	f000 fedf 	bl	8006262 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	699a      	ldr	r2, [r3, #24]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80054b2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6999      	ldr	r1, [r3, #24]
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	021a      	lsls	r2, r3, #8
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	619a      	str	r2, [r3, #24]
 80054c8:	e040      	b.n	800554c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	d11b      	bne.n	8005508 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80054e0:	f000 ff2c 	bl	800633c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	69da      	ldr	r2, [r3, #28]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f022 020c 	bic.w	r2, r2, #12
 80054f2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	69d9      	ldr	r1, [r3, #28]
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	689a      	ldr	r2, [r3, #8]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	61da      	str	r2, [r3, #28]
 8005506:	e021      	b.n	800554c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b0c      	cmp	r3, #12
 800550c:	d11c      	bne.n	8005548 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800551e:	f000 ff49 	bl	80063b4 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69da      	ldr	r2, [r3, #28]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005530:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69d9      	ldr	r1, [r3, #28]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	021a      	lsls	r2, r3, #8
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	61da      	str	r2, [r3, #28]
 8005546:	e001      	b.n	800554c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2200      	movs	r2, #0
 8005550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005554:	7dfb      	ldrb	r3, [r7, #23]
}
 8005556:	4618      	mov	r0, r3
 8005558:	3718      	adds	r7, #24
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
	...

08005560 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800556c:	2300      	movs	r3, #0
 800556e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005576:	2b01      	cmp	r3, #1
 8005578:	d101      	bne.n	800557e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800557a:	2302      	movs	r3, #2
 800557c:	e0ff      	b.n	800577e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b14      	cmp	r3, #20
 800558a:	f200 80f0 	bhi.w	800576e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800558e:	a201      	add	r2, pc, #4	; (adr r2, 8005594 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005594:	080055e9 	.word	0x080055e9
 8005598:	0800576f 	.word	0x0800576f
 800559c:	0800576f 	.word	0x0800576f
 80055a0:	0800576f 	.word	0x0800576f
 80055a4:	08005629 	.word	0x08005629
 80055a8:	0800576f 	.word	0x0800576f
 80055ac:	0800576f 	.word	0x0800576f
 80055b0:	0800576f 	.word	0x0800576f
 80055b4:	0800566b 	.word	0x0800566b
 80055b8:	0800576f 	.word	0x0800576f
 80055bc:	0800576f 	.word	0x0800576f
 80055c0:	0800576f 	.word	0x0800576f
 80055c4:	080056ab 	.word	0x080056ab
 80055c8:	0800576f 	.word	0x0800576f
 80055cc:	0800576f 	.word	0x0800576f
 80055d0:	0800576f 	.word	0x0800576f
 80055d4:	080056ed 	.word	0x080056ed
 80055d8:	0800576f 	.word	0x0800576f
 80055dc:	0800576f 	.word	0x0800576f
 80055e0:	0800576f 	.word	0x0800576f
 80055e4:	0800572d 	.word	0x0800572d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68b9      	ldr	r1, [r7, #8]
 80055ee:	4618      	mov	r0, r3
 80055f0:	f000 fa94 	bl	8005b1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	699a      	ldr	r2, [r3, #24]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f042 0208 	orr.w	r2, r2, #8
 8005602:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	699a      	ldr	r2, [r3, #24]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f022 0204 	bic.w	r2, r2, #4
 8005612:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6999      	ldr	r1, [r3, #24]
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	691a      	ldr	r2, [r3, #16]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	619a      	str	r2, [r3, #24]
      break;
 8005626:	e0a5      	b.n	8005774 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68b9      	ldr	r1, [r7, #8]
 800562e:	4618      	mov	r0, r3
 8005630:	f000 fb0e 	bl	8005c50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	699a      	ldr	r2, [r3, #24]
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005642:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	699a      	ldr	r2, [r3, #24]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005652:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	6999      	ldr	r1, [r3, #24]
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	021a      	lsls	r2, r3, #8
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	619a      	str	r2, [r3, #24]
      break;
 8005668:	e084      	b.n	8005774 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68b9      	ldr	r1, [r7, #8]
 8005670:	4618      	mov	r0, r3
 8005672:	f000 fb81 	bl	8005d78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	69da      	ldr	r2, [r3, #28]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f042 0208 	orr.w	r2, r2, #8
 8005684:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	69da      	ldr	r2, [r3, #28]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 0204 	bic.w	r2, r2, #4
 8005694:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	69d9      	ldr	r1, [r3, #28]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	691a      	ldr	r2, [r3, #16]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	430a      	orrs	r2, r1
 80056a6:	61da      	str	r2, [r3, #28]
      break;
 80056a8:	e064      	b.n	8005774 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68b9      	ldr	r1, [r7, #8]
 80056b0:	4618      	mov	r0, r3
 80056b2:	f000 fbf3 	bl	8005e9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	69da      	ldr	r2, [r3, #28]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	69da      	ldr	r2, [r3, #28]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	69d9      	ldr	r1, [r3, #28]
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	691b      	ldr	r3, [r3, #16]
 80056e0:	021a      	lsls	r2, r3, #8
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	61da      	str	r2, [r3, #28]
      break;
 80056ea:	e043      	b.n	8005774 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	68b9      	ldr	r1, [r7, #8]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 fc42 	bl	8005f7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f042 0208 	orr.w	r2, r2, #8
 8005706:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f022 0204 	bic.w	r2, r2, #4
 8005716:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	691a      	ldr	r2, [r3, #16]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800572a:	e023      	b.n	8005774 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68b9      	ldr	r1, [r7, #8]
 8005732:	4618      	mov	r0, r3
 8005734:	f000 fc8c 	bl	8006050 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005746:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005756:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	021a      	lsls	r2, r3, #8
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	430a      	orrs	r2, r1
 800576a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800576c:	e002      	b.n	8005774 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	75fb      	strb	r3, [r7, #23]
      break;
 8005772:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800577c:	7dfb      	ldrb	r3, [r7, #23]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3718      	adds	r7, #24
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop

08005788 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005792:	2300      	movs	r3, #0
 8005794:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800579c:	2b01      	cmp	r3, #1
 800579e:	d101      	bne.n	80057a4 <HAL_TIM_ConfigClockSource+0x1c>
 80057a0:	2302      	movs	r3, #2
 80057a2:	e0b6      	b.n	8005912 <HAL_TIM_ConfigClockSource+0x18a>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2202      	movs	r2, #2
 80057b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68ba      	ldr	r2, [r7, #8]
 80057d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057e0:	d03e      	beq.n	8005860 <HAL_TIM_ConfigClockSource+0xd8>
 80057e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057e6:	f200 8087 	bhi.w	80058f8 <HAL_TIM_ConfigClockSource+0x170>
 80057ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ee:	f000 8086 	beq.w	80058fe <HAL_TIM_ConfigClockSource+0x176>
 80057f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057f6:	d87f      	bhi.n	80058f8 <HAL_TIM_ConfigClockSource+0x170>
 80057f8:	2b70      	cmp	r3, #112	; 0x70
 80057fa:	d01a      	beq.n	8005832 <HAL_TIM_ConfigClockSource+0xaa>
 80057fc:	2b70      	cmp	r3, #112	; 0x70
 80057fe:	d87b      	bhi.n	80058f8 <HAL_TIM_ConfigClockSource+0x170>
 8005800:	2b60      	cmp	r3, #96	; 0x60
 8005802:	d050      	beq.n	80058a6 <HAL_TIM_ConfigClockSource+0x11e>
 8005804:	2b60      	cmp	r3, #96	; 0x60
 8005806:	d877      	bhi.n	80058f8 <HAL_TIM_ConfigClockSource+0x170>
 8005808:	2b50      	cmp	r3, #80	; 0x50
 800580a:	d03c      	beq.n	8005886 <HAL_TIM_ConfigClockSource+0xfe>
 800580c:	2b50      	cmp	r3, #80	; 0x50
 800580e:	d873      	bhi.n	80058f8 <HAL_TIM_ConfigClockSource+0x170>
 8005810:	2b40      	cmp	r3, #64	; 0x40
 8005812:	d058      	beq.n	80058c6 <HAL_TIM_ConfigClockSource+0x13e>
 8005814:	2b40      	cmp	r3, #64	; 0x40
 8005816:	d86f      	bhi.n	80058f8 <HAL_TIM_ConfigClockSource+0x170>
 8005818:	2b30      	cmp	r3, #48	; 0x30
 800581a:	d064      	beq.n	80058e6 <HAL_TIM_ConfigClockSource+0x15e>
 800581c:	2b30      	cmp	r3, #48	; 0x30
 800581e:	d86b      	bhi.n	80058f8 <HAL_TIM_ConfigClockSource+0x170>
 8005820:	2b20      	cmp	r3, #32
 8005822:	d060      	beq.n	80058e6 <HAL_TIM_ConfigClockSource+0x15e>
 8005824:	2b20      	cmp	r3, #32
 8005826:	d867      	bhi.n	80058f8 <HAL_TIM_ConfigClockSource+0x170>
 8005828:	2b00      	cmp	r3, #0
 800582a:	d05c      	beq.n	80058e6 <HAL_TIM_ConfigClockSource+0x15e>
 800582c:	2b10      	cmp	r3, #16
 800582e:	d05a      	beq.n	80058e6 <HAL_TIM_ConfigClockSource+0x15e>
 8005830:	e062      	b.n	80058f8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005842:	f000 fe0f 	bl	8006464 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005854:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	609a      	str	r2, [r3, #8]
      break;
 800585e:	e04f      	b.n	8005900 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005870:	f000 fdf8 	bl	8006464 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	689a      	ldr	r2, [r3, #8]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005882:	609a      	str	r2, [r3, #8]
      break;
 8005884:	e03c      	b.n	8005900 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005892:	461a      	mov	r2, r3
 8005894:	f000 fcb6 	bl	8006204 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	2150      	movs	r1, #80	; 0x50
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 fdc5 	bl	800642e <TIM_ITRx_SetConfig>
      break;
 80058a4:	e02c      	b.n	8005900 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058b2:	461a      	mov	r2, r3
 80058b4:	f000 fd12 	bl	80062dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2160      	movs	r1, #96	; 0x60
 80058be:	4618      	mov	r0, r3
 80058c0:	f000 fdb5 	bl	800642e <TIM_ITRx_SetConfig>
      break;
 80058c4:	e01c      	b.n	8005900 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058d2:	461a      	mov	r2, r3
 80058d4:	f000 fc96 	bl	8006204 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2140      	movs	r1, #64	; 0x40
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 fda5 	bl	800642e <TIM_ITRx_SetConfig>
      break;
 80058e4:	e00c      	b.n	8005900 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4619      	mov	r1, r3
 80058f0:	4610      	mov	r0, r2
 80058f2:	f000 fd9c 	bl	800642e <TIM_ITRx_SetConfig>
      break;
 80058f6:	e003      	b.n	8005900 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	73fb      	strb	r3, [r7, #15]
      break;
 80058fc:	e000      	b.n	8005900 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80058fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005910:	7bfb      	ldrb	r3, [r7, #15]
}
 8005912:	4618      	mov	r0, r3
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
	...

0800591c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005926:	2300      	movs	r3, #0
 8005928:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	2b0c      	cmp	r3, #12
 800592e:	d831      	bhi.n	8005994 <HAL_TIM_ReadCapturedValue+0x78>
 8005930:	a201      	add	r2, pc, #4	; (adr r2, 8005938 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005936:	bf00      	nop
 8005938:	0800596d 	.word	0x0800596d
 800593c:	08005995 	.word	0x08005995
 8005940:	08005995 	.word	0x08005995
 8005944:	08005995 	.word	0x08005995
 8005948:	08005977 	.word	0x08005977
 800594c:	08005995 	.word	0x08005995
 8005950:	08005995 	.word	0x08005995
 8005954:	08005995 	.word	0x08005995
 8005958:	08005981 	.word	0x08005981
 800595c:	08005995 	.word	0x08005995
 8005960:	08005995 	.word	0x08005995
 8005964:	08005995 	.word	0x08005995
 8005968:	0800598b 	.word	0x0800598b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005972:	60fb      	str	r3, [r7, #12]

      break;
 8005974:	e00f      	b.n	8005996 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800597c:	60fb      	str	r3, [r7, #12]

      break;
 800597e:	e00a      	b.n	8005996 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005986:	60fb      	str	r3, [r7, #12]

      break;
 8005988:	e005      	b.n	8005996 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005990:	60fb      	str	r3, [r7, #12]

      break;
 8005992:	e000      	b.n	8005996 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005994:	bf00      	nop
  }

  return tmpreg;
 8005996:	68fb      	ldr	r3, [r7, #12]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3714      	adds	r7, #20
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059c0:	bf00      	nop
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059d4:	bf00      	nop
 80059d6:	370c      	adds	r7, #12
 80059d8:	46bd      	mov	sp, r7
 80059da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059de:	4770      	bx	lr

080059e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a42      	ldr	r2, [pc, #264]	; (8005afc <TIM_Base_SetConfig+0x11c>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d013      	beq.n	8005a20 <TIM_Base_SetConfig+0x40>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059fe:	d00f      	beq.n	8005a20 <TIM_Base_SetConfig+0x40>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a3f      	ldr	r2, [pc, #252]	; (8005b00 <TIM_Base_SetConfig+0x120>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d00b      	beq.n	8005a20 <TIM_Base_SetConfig+0x40>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4a3e      	ldr	r2, [pc, #248]	; (8005b04 <TIM_Base_SetConfig+0x124>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d007      	beq.n	8005a20 <TIM_Base_SetConfig+0x40>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a3d      	ldr	r2, [pc, #244]	; (8005b08 <TIM_Base_SetConfig+0x128>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d003      	beq.n	8005a20 <TIM_Base_SetConfig+0x40>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a3c      	ldr	r2, [pc, #240]	; (8005b0c <TIM_Base_SetConfig+0x12c>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d108      	bne.n	8005a32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a31      	ldr	r2, [pc, #196]	; (8005afc <TIM_Base_SetConfig+0x11c>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d01f      	beq.n	8005a7a <TIM_Base_SetConfig+0x9a>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a40:	d01b      	beq.n	8005a7a <TIM_Base_SetConfig+0x9a>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a2e      	ldr	r2, [pc, #184]	; (8005b00 <TIM_Base_SetConfig+0x120>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d017      	beq.n	8005a7a <TIM_Base_SetConfig+0x9a>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4a2d      	ldr	r2, [pc, #180]	; (8005b04 <TIM_Base_SetConfig+0x124>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d013      	beq.n	8005a7a <TIM_Base_SetConfig+0x9a>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a2c      	ldr	r2, [pc, #176]	; (8005b08 <TIM_Base_SetConfig+0x128>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d00f      	beq.n	8005a7a <TIM_Base_SetConfig+0x9a>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a2c      	ldr	r2, [pc, #176]	; (8005b10 <TIM_Base_SetConfig+0x130>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d00b      	beq.n	8005a7a <TIM_Base_SetConfig+0x9a>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a2b      	ldr	r2, [pc, #172]	; (8005b14 <TIM_Base_SetConfig+0x134>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d007      	beq.n	8005a7a <TIM_Base_SetConfig+0x9a>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a2a      	ldr	r2, [pc, #168]	; (8005b18 <TIM_Base_SetConfig+0x138>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d003      	beq.n	8005a7a <TIM_Base_SetConfig+0x9a>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a25      	ldr	r2, [pc, #148]	; (8005b0c <TIM_Base_SetConfig+0x12c>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d108      	bne.n	8005a8c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	68fa      	ldr	r2, [r7, #12]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	689a      	ldr	r2, [r3, #8]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a12      	ldr	r2, [pc, #72]	; (8005afc <TIM_Base_SetConfig+0x11c>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d013      	beq.n	8005ae0 <TIM_Base_SetConfig+0x100>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a13      	ldr	r2, [pc, #76]	; (8005b08 <TIM_Base_SetConfig+0x128>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d00f      	beq.n	8005ae0 <TIM_Base_SetConfig+0x100>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a13      	ldr	r2, [pc, #76]	; (8005b10 <TIM_Base_SetConfig+0x130>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d00b      	beq.n	8005ae0 <TIM_Base_SetConfig+0x100>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a12      	ldr	r2, [pc, #72]	; (8005b14 <TIM_Base_SetConfig+0x134>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d007      	beq.n	8005ae0 <TIM_Base_SetConfig+0x100>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4a11      	ldr	r2, [pc, #68]	; (8005b18 <TIM_Base_SetConfig+0x138>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d003      	beq.n	8005ae0 <TIM_Base_SetConfig+0x100>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a0c      	ldr	r2, [pc, #48]	; (8005b0c <TIM_Base_SetConfig+0x12c>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d103      	bne.n	8005ae8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	691a      	ldr	r2, [r3, #16]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	615a      	str	r2, [r3, #20]
}
 8005aee:	bf00      	nop
 8005af0:	3714      	adds	r7, #20
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	40012c00 	.word	0x40012c00
 8005b00:	40000400 	.word	0x40000400
 8005b04:	40000800 	.word	0x40000800
 8005b08:	40013400 	.word	0x40013400
 8005b0c:	40015000 	.word	0x40015000
 8005b10:	40014000 	.word	0x40014000
 8005b14:	40014400 	.word	0x40014400
 8005b18:	40014800 	.word	0x40014800

08005b1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b087      	sub	sp, #28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	f023 0201 	bic.w	r2, r3, #1
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a1b      	ldr	r3, [r3, #32]
 8005b36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f023 0303 	bic.w	r3, r3, #3
 8005b56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f023 0302 	bic.w	r3, r3, #2
 8005b68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	697a      	ldr	r2, [r7, #20]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a30      	ldr	r2, [pc, #192]	; (8005c38 <TIM_OC1_SetConfig+0x11c>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d013      	beq.n	8005ba4 <TIM_OC1_SetConfig+0x88>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a2f      	ldr	r2, [pc, #188]	; (8005c3c <TIM_OC1_SetConfig+0x120>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d00f      	beq.n	8005ba4 <TIM_OC1_SetConfig+0x88>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a2e      	ldr	r2, [pc, #184]	; (8005c40 <TIM_OC1_SetConfig+0x124>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d00b      	beq.n	8005ba4 <TIM_OC1_SetConfig+0x88>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a2d      	ldr	r2, [pc, #180]	; (8005c44 <TIM_OC1_SetConfig+0x128>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d007      	beq.n	8005ba4 <TIM_OC1_SetConfig+0x88>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a2c      	ldr	r2, [pc, #176]	; (8005c48 <TIM_OC1_SetConfig+0x12c>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d003      	beq.n	8005ba4 <TIM_OC1_SetConfig+0x88>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a2b      	ldr	r2, [pc, #172]	; (8005c4c <TIM_OC1_SetConfig+0x130>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d10c      	bne.n	8005bbe <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	f023 0308 	bic.w	r3, r3, #8
 8005baa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	f023 0304 	bic.w	r3, r3, #4
 8005bbc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a1d      	ldr	r2, [pc, #116]	; (8005c38 <TIM_OC1_SetConfig+0x11c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d013      	beq.n	8005bee <TIM_OC1_SetConfig+0xd2>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a1c      	ldr	r2, [pc, #112]	; (8005c3c <TIM_OC1_SetConfig+0x120>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d00f      	beq.n	8005bee <TIM_OC1_SetConfig+0xd2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a1b      	ldr	r2, [pc, #108]	; (8005c40 <TIM_OC1_SetConfig+0x124>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d00b      	beq.n	8005bee <TIM_OC1_SetConfig+0xd2>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a1a      	ldr	r2, [pc, #104]	; (8005c44 <TIM_OC1_SetConfig+0x128>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d007      	beq.n	8005bee <TIM_OC1_SetConfig+0xd2>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a19      	ldr	r2, [pc, #100]	; (8005c48 <TIM_OC1_SetConfig+0x12c>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d003      	beq.n	8005bee <TIM_OC1_SetConfig+0xd2>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a18      	ldr	r2, [pc, #96]	; (8005c4c <TIM_OC1_SetConfig+0x130>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d111      	bne.n	8005c12 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	693a      	ldr	r2, [r7, #16]
 8005c16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68fa      	ldr	r2, [r7, #12]
 8005c1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	685a      	ldr	r2, [r3, #4]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	621a      	str	r2, [r3, #32]
}
 8005c2c:	bf00      	nop
 8005c2e:	371c      	adds	r7, #28
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr
 8005c38:	40012c00 	.word	0x40012c00
 8005c3c:	40013400 	.word	0x40013400
 8005c40:	40014000 	.word	0x40014000
 8005c44:	40014400 	.word	0x40014400
 8005c48:	40014800 	.word	0x40014800
 8005c4c:	40015000 	.word	0x40015000

08005c50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b087      	sub	sp, #28
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	f023 0210 	bic.w	r2, r3, #16
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	021b      	lsls	r3, r3, #8
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f023 0320 	bic.w	r3, r3, #32
 8005c9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	011b      	lsls	r3, r3, #4
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a2c      	ldr	r2, [pc, #176]	; (8005d60 <TIM_OC2_SetConfig+0x110>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d007      	beq.n	8005cc4 <TIM_OC2_SetConfig+0x74>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a2b      	ldr	r2, [pc, #172]	; (8005d64 <TIM_OC2_SetConfig+0x114>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d003      	beq.n	8005cc4 <TIM_OC2_SetConfig+0x74>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a2a      	ldr	r2, [pc, #168]	; (8005d68 <TIM_OC2_SetConfig+0x118>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d10d      	bne.n	8005ce0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	011b      	lsls	r3, r3, #4
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cde:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a1f      	ldr	r2, [pc, #124]	; (8005d60 <TIM_OC2_SetConfig+0x110>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d013      	beq.n	8005d10 <TIM_OC2_SetConfig+0xc0>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a1e      	ldr	r2, [pc, #120]	; (8005d64 <TIM_OC2_SetConfig+0x114>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d00f      	beq.n	8005d10 <TIM_OC2_SetConfig+0xc0>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	4a1e      	ldr	r2, [pc, #120]	; (8005d6c <TIM_OC2_SetConfig+0x11c>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d00b      	beq.n	8005d10 <TIM_OC2_SetConfig+0xc0>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	4a1d      	ldr	r2, [pc, #116]	; (8005d70 <TIM_OC2_SetConfig+0x120>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d007      	beq.n	8005d10 <TIM_OC2_SetConfig+0xc0>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	4a1c      	ldr	r2, [pc, #112]	; (8005d74 <TIM_OC2_SetConfig+0x124>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d003      	beq.n	8005d10 <TIM_OC2_SetConfig+0xc0>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a17      	ldr	r2, [pc, #92]	; (8005d68 <TIM_OC2_SetConfig+0x118>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d113      	bne.n	8005d38 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d16:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d1e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	695b      	ldr	r3, [r3, #20]
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	693a      	ldr	r2, [r7, #16]
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	685a      	ldr	r2, [r3, #4]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	621a      	str	r2, [r3, #32]
}
 8005d52:	bf00      	nop
 8005d54:	371c      	adds	r7, #28
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	40012c00 	.word	0x40012c00
 8005d64:	40013400 	.word	0x40013400
 8005d68:	40015000 	.word	0x40015000
 8005d6c:	40014000 	.word	0x40014000
 8005d70:	40014400 	.word	0x40014400
 8005d74:	40014800 	.word	0x40014800

08005d78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b087      	sub	sp, #28
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	69db      	ldr	r3, [r3, #28]
 8005d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f023 0303 	bic.w	r3, r3, #3
 8005db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	021b      	lsls	r3, r3, #8
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a2b      	ldr	r2, [pc, #172]	; (8005e84 <TIM_OC3_SetConfig+0x10c>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d007      	beq.n	8005dea <TIM_OC3_SetConfig+0x72>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a2a      	ldr	r2, [pc, #168]	; (8005e88 <TIM_OC3_SetConfig+0x110>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d003      	beq.n	8005dea <TIM_OC3_SetConfig+0x72>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a29      	ldr	r2, [pc, #164]	; (8005e8c <TIM_OC3_SetConfig+0x114>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d10d      	bne.n	8005e06 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005df0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	021b      	lsls	r3, r3, #8
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e04:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	4a1e      	ldr	r2, [pc, #120]	; (8005e84 <TIM_OC3_SetConfig+0x10c>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d013      	beq.n	8005e36 <TIM_OC3_SetConfig+0xbe>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	4a1d      	ldr	r2, [pc, #116]	; (8005e88 <TIM_OC3_SetConfig+0x110>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d00f      	beq.n	8005e36 <TIM_OC3_SetConfig+0xbe>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4a1d      	ldr	r2, [pc, #116]	; (8005e90 <TIM_OC3_SetConfig+0x118>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d00b      	beq.n	8005e36 <TIM_OC3_SetConfig+0xbe>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a1c      	ldr	r2, [pc, #112]	; (8005e94 <TIM_OC3_SetConfig+0x11c>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d007      	beq.n	8005e36 <TIM_OC3_SetConfig+0xbe>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a1b      	ldr	r2, [pc, #108]	; (8005e98 <TIM_OC3_SetConfig+0x120>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d003      	beq.n	8005e36 <TIM_OC3_SetConfig+0xbe>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a16      	ldr	r2, [pc, #88]	; (8005e8c <TIM_OC3_SetConfig+0x114>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d113      	bne.n	8005e5e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	011b      	lsls	r3, r3, #4
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	4313      	orrs	r3, r2
 8005e50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	011b      	lsls	r3, r3, #4
 8005e58:	693a      	ldr	r2, [r7, #16]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	68fa      	ldr	r2, [r7, #12]
 8005e68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	685a      	ldr	r2, [r3, #4]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	621a      	str	r2, [r3, #32]
}
 8005e78:	bf00      	nop
 8005e7a:	371c      	adds	r7, #28
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	40012c00 	.word	0x40012c00
 8005e88:	40013400 	.word	0x40013400
 8005e8c:	40015000 	.word	0x40015000
 8005e90:	40014000 	.word	0x40014000
 8005e94:	40014400 	.word	0x40014400
 8005e98:	40014800 	.word	0x40014800

08005e9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b087      	sub	sp, #28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	69db      	ldr	r3, [r3, #28]
 8005ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	021b      	lsls	r3, r3, #8
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005eea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	031b      	lsls	r3, r3, #12
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a1a      	ldr	r2, [pc, #104]	; (8005f64 <TIM_OC4_SetConfig+0xc8>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d013      	beq.n	8005f28 <TIM_OC4_SetConfig+0x8c>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a19      	ldr	r2, [pc, #100]	; (8005f68 <TIM_OC4_SetConfig+0xcc>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d00f      	beq.n	8005f28 <TIM_OC4_SetConfig+0x8c>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a18      	ldr	r2, [pc, #96]	; (8005f6c <TIM_OC4_SetConfig+0xd0>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d00b      	beq.n	8005f28 <TIM_OC4_SetConfig+0x8c>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a17      	ldr	r2, [pc, #92]	; (8005f70 <TIM_OC4_SetConfig+0xd4>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d007      	beq.n	8005f28 <TIM_OC4_SetConfig+0x8c>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a16      	ldr	r2, [pc, #88]	; (8005f74 <TIM_OC4_SetConfig+0xd8>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d003      	beq.n	8005f28 <TIM_OC4_SetConfig+0x8c>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a15      	ldr	r2, [pc, #84]	; (8005f78 <TIM_OC4_SetConfig+0xdc>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d109      	bne.n	8005f3c <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	695b      	ldr	r3, [r3, #20]
 8005f34:	019b      	lsls	r3, r3, #6
 8005f36:	697a      	ldr	r2, [r7, #20]
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	621a      	str	r2, [r3, #32]
}
 8005f56:	bf00      	nop
 8005f58:	371c      	adds	r7, #28
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	40012c00 	.word	0x40012c00
 8005f68:	40013400 	.word	0x40013400
 8005f6c:	40014000 	.word	0x40014000
 8005f70:	40014400 	.word	0x40014400
 8005f74:	40014800 	.word	0x40014800
 8005f78:	40015000 	.word	0x40015000

08005f7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005faa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005fc0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	041b      	lsls	r3, r3, #16
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a19      	ldr	r2, [pc, #100]	; (8006038 <TIM_OC5_SetConfig+0xbc>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d013      	beq.n	8005ffe <TIM_OC5_SetConfig+0x82>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a18      	ldr	r2, [pc, #96]	; (800603c <TIM_OC5_SetConfig+0xc0>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d00f      	beq.n	8005ffe <TIM_OC5_SetConfig+0x82>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a17      	ldr	r2, [pc, #92]	; (8006040 <TIM_OC5_SetConfig+0xc4>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d00b      	beq.n	8005ffe <TIM_OC5_SetConfig+0x82>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a16      	ldr	r2, [pc, #88]	; (8006044 <TIM_OC5_SetConfig+0xc8>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d007      	beq.n	8005ffe <TIM_OC5_SetConfig+0x82>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a15      	ldr	r2, [pc, #84]	; (8006048 <TIM_OC5_SetConfig+0xcc>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d003      	beq.n	8005ffe <TIM_OC5_SetConfig+0x82>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a14      	ldr	r2, [pc, #80]	; (800604c <TIM_OC5_SetConfig+0xd0>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d109      	bne.n	8006012 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006004:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	021b      	lsls	r3, r3, #8
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	4313      	orrs	r3, r2
 8006010:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	685a      	ldr	r2, [r3, #4]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	621a      	str	r2, [r3, #32]
}
 800602c:	bf00      	nop
 800602e:	371c      	adds	r7, #28
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr
 8006038:	40012c00 	.word	0x40012c00
 800603c:	40013400 	.word	0x40013400
 8006040:	40014000 	.word	0x40014000
 8006044:	40014400 	.word	0x40014400
 8006048:	40014800 	.word	0x40014800
 800604c:	40015000 	.word	0x40015000

08006050 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006050:	b480      	push	{r7}
 8006052:	b087      	sub	sp, #28
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	685b      	ldr	r3, [r3, #4]
 8006070:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800607e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	021b      	lsls	r3, r3, #8
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	4313      	orrs	r3, r2
 800608e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006096:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	051b      	lsls	r3, r3, #20
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a1a      	ldr	r2, [pc, #104]	; (8006110 <TIM_OC6_SetConfig+0xc0>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d013      	beq.n	80060d4 <TIM_OC6_SetConfig+0x84>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a19      	ldr	r2, [pc, #100]	; (8006114 <TIM_OC6_SetConfig+0xc4>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d00f      	beq.n	80060d4 <TIM_OC6_SetConfig+0x84>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a18      	ldr	r2, [pc, #96]	; (8006118 <TIM_OC6_SetConfig+0xc8>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d00b      	beq.n	80060d4 <TIM_OC6_SetConfig+0x84>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a17      	ldr	r2, [pc, #92]	; (800611c <TIM_OC6_SetConfig+0xcc>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d007      	beq.n	80060d4 <TIM_OC6_SetConfig+0x84>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a16      	ldr	r2, [pc, #88]	; (8006120 <TIM_OC6_SetConfig+0xd0>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d003      	beq.n	80060d4 <TIM_OC6_SetConfig+0x84>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	4a15      	ldr	r2, [pc, #84]	; (8006124 <TIM_OC6_SetConfig+0xd4>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d109      	bne.n	80060e8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	695b      	ldr	r3, [r3, #20]
 80060e0:	029b      	lsls	r3, r3, #10
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	68fa      	ldr	r2, [r7, #12]
 80060f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	685a      	ldr	r2, [r3, #4]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	693a      	ldr	r2, [r7, #16]
 8006100:	621a      	str	r2, [r3, #32]
}
 8006102:	bf00      	nop
 8006104:	371c      	adds	r7, #28
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	40012c00 	.word	0x40012c00
 8006114:	40013400 	.word	0x40013400
 8006118:	40014000 	.word	0x40014000
 800611c:	40014400 	.word	0x40014400
 8006120:	40014800 	.word	0x40014800
 8006124:	40015000 	.word	0x40015000

08006128 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006128:	b480      	push	{r7}
 800612a:	b087      	sub	sp, #28
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
 8006134:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	f023 0201 	bic.w	r2, r3, #1
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	699b      	ldr	r3, [r3, #24]
 8006146:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6a1b      	ldr	r3, [r3, #32]
 800614c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	4a26      	ldr	r2, [pc, #152]	; (80061ec <TIM_TI1_SetConfig+0xc4>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d017      	beq.n	8006186 <TIM_TI1_SetConfig+0x5e>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800615c:	d013      	beq.n	8006186 <TIM_TI1_SetConfig+0x5e>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	4a23      	ldr	r2, [pc, #140]	; (80061f0 <TIM_TI1_SetConfig+0xc8>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d00f      	beq.n	8006186 <TIM_TI1_SetConfig+0x5e>
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	4a22      	ldr	r2, [pc, #136]	; (80061f4 <TIM_TI1_SetConfig+0xcc>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d00b      	beq.n	8006186 <TIM_TI1_SetConfig+0x5e>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	4a21      	ldr	r2, [pc, #132]	; (80061f8 <TIM_TI1_SetConfig+0xd0>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d007      	beq.n	8006186 <TIM_TI1_SetConfig+0x5e>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	4a20      	ldr	r2, [pc, #128]	; (80061fc <TIM_TI1_SetConfig+0xd4>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d003      	beq.n	8006186 <TIM_TI1_SetConfig+0x5e>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	4a1f      	ldr	r2, [pc, #124]	; (8006200 <TIM_TI1_SetConfig+0xd8>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d101      	bne.n	800618a <TIM_TI1_SetConfig+0x62>
 8006186:	2301      	movs	r3, #1
 8006188:	e000      	b.n	800618c <TIM_TI1_SetConfig+0x64>
 800618a:	2300      	movs	r3, #0
 800618c:	2b00      	cmp	r3, #0
 800618e:	d008      	beq.n	80061a2 <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f023 0303 	bic.w	r3, r3, #3
 8006196:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	4313      	orrs	r3, r2
 800619e:	617b      	str	r3, [r7, #20]
 80061a0:	e003      	b.n	80061aa <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	f043 0301 	orr.w	r3, r3, #1
 80061a8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061b0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	011b      	lsls	r3, r3, #4
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	697a      	ldr	r2, [r7, #20]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	f023 030a 	bic.w	r3, r3, #10
 80061c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	f003 030a 	and.w	r3, r3, #10
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	697a      	ldr	r2, [r7, #20]
 80061d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	621a      	str	r2, [r3, #32]
}
 80061de:	bf00      	nop
 80061e0:	371c      	adds	r7, #28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	40012c00 	.word	0x40012c00
 80061f0:	40000400 	.word	0x40000400
 80061f4:	40000800 	.word	0x40000800
 80061f8:	40013400 	.word	0x40013400
 80061fc:	40014000 	.word	0x40014000
 8006200:	40015000 	.word	0x40015000

08006204 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006204:	b480      	push	{r7}
 8006206:	b087      	sub	sp, #28
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6a1b      	ldr	r3, [r3, #32]
 8006214:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	f023 0201 	bic.w	r2, r3, #1
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800622e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	011b      	lsls	r3, r3, #4
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4313      	orrs	r3, r2
 8006238:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f023 030a 	bic.w	r3, r3, #10
 8006240:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	4313      	orrs	r3, r2
 8006248:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	621a      	str	r2, [r3, #32]
}
 8006256:	bf00      	nop
 8006258:	371c      	adds	r7, #28
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006262:	b480      	push	{r7}
 8006264:	b087      	sub	sp, #28
 8006266:	af00      	add	r7, sp, #0
 8006268:	60f8      	str	r0, [r7, #12]
 800626a:	60b9      	str	r1, [r7, #8]
 800626c:	607a      	str	r2, [r7, #4]
 800626e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	6a1b      	ldr	r3, [r3, #32]
 8006274:	f023 0210 	bic.w	r2, r3, #16
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800628e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	021b      	lsls	r3, r3, #8
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	4313      	orrs	r3, r2
 8006298:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	031b      	lsls	r3, r3, #12
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062b4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	011b      	lsls	r3, r3, #4
 80062ba:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	621a      	str	r2, [r3, #32]
}
 80062d0:	bf00      	nop
 80062d2:	371c      	adds	r7, #28
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062dc:	b480      	push	{r7}
 80062de:	b087      	sub	sp, #28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	60f8      	str	r0, [r7, #12]
 80062e4:	60b9      	str	r1, [r7, #8]
 80062e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	6a1b      	ldr	r3, [r3, #32]
 80062ec:	f023 0210 	bic.w	r2, r3, #16
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006306:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	031b      	lsls	r3, r3, #12
 800630c:	697a      	ldr	r2, [r7, #20]
 800630e:	4313      	orrs	r3, r2
 8006310:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006318:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	011b      	lsls	r3, r3, #4
 800631e:	693a      	ldr	r2, [r7, #16]
 8006320:	4313      	orrs	r3, r2
 8006322:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	693a      	ldr	r2, [r7, #16]
 800632e:	621a      	str	r2, [r3, #32]
}
 8006330:	bf00      	nop
 8006332:	371c      	adds	r7, #28
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800633c:	b480      	push	{r7}
 800633e:	b087      	sub	sp, #28
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]
 8006348:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6a1b      	ldr	r3, [r3, #32]
 8006360:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f023 0303 	bic.w	r3, r3, #3
 8006368:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4313      	orrs	r3, r2
 8006370:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006378:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	011b      	lsls	r3, r3, #4
 800637e:	b2db      	uxtb	r3, r3
 8006380:	697a      	ldr	r2, [r7, #20]
 8006382:	4313      	orrs	r3, r2
 8006384:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800638c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	021b      	lsls	r3, r3, #8
 8006392:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	4313      	orrs	r3, r2
 800639a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	621a      	str	r2, [r3, #32]
}
 80063a8:	bf00      	nop
 80063aa:	371c      	adds	r7, #28
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b087      	sub	sp, #28
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
 80063c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	69db      	ldr	r3, [r3, #28]
 80063d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6a1b      	ldr	r3, [r3, #32]
 80063d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	021b      	lsls	r3, r3, #8
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063f2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	031b      	lsls	r3, r3, #12
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006406:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	031b      	lsls	r3, r3, #12
 800640c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	4313      	orrs	r3, r2
 8006414:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	693a      	ldr	r2, [r7, #16]
 8006420:	621a      	str	r2, [r3, #32]
}
 8006422:	bf00      	nop
 8006424:	371c      	adds	r7, #28
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800642e:	b480      	push	{r7}
 8006430:	b085      	sub	sp, #20
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
 8006436:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006444:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006446:	683a      	ldr	r2, [r7, #0]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	4313      	orrs	r3, r2
 800644c:	f043 0307 	orr.w	r3, r3, #7
 8006450:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68fa      	ldr	r2, [r7, #12]
 8006456:	609a      	str	r2, [r3, #8]
}
 8006458:	bf00      	nop
 800645a:	3714      	adds	r7, #20
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr

08006464 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006464:	b480      	push	{r7}
 8006466:	b087      	sub	sp, #28
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
 8006470:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	689b      	ldr	r3, [r3, #8]
 8006476:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800647e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	021a      	lsls	r2, r3, #8
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	431a      	orrs	r2, r3
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	4313      	orrs	r3, r2
 800648c:	697a      	ldr	r2, [r7, #20]
 800648e:	4313      	orrs	r3, r2
 8006490:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	697a      	ldr	r2, [r7, #20]
 8006496:	609a      	str	r2, [r3, #8]
}
 8006498:	bf00      	nop
 800649a:	371c      	adds	r7, #28
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b087      	sub	sp, #28
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	f003 031f 	and.w	r3, r3, #31
 80064b6:	2201      	movs	r2, #1
 80064b8:	fa02 f303 	lsl.w	r3, r2, r3
 80064bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6a1a      	ldr	r2, [r3, #32]
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	43db      	mvns	r3, r3
 80064c6:	401a      	ands	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6a1a      	ldr	r2, [r3, #32]
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	f003 031f 	and.w	r3, r3, #31
 80064d6:	6879      	ldr	r1, [r7, #4]
 80064d8:	fa01 f303 	lsl.w	r3, r1, r3
 80064dc:	431a      	orrs	r2, r3
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	621a      	str	r2, [r3, #32]
}
 80064e2:	bf00      	nop
 80064e4:	371c      	adds	r7, #28
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
	...

080064f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b085      	sub	sp, #20
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006500:	2b01      	cmp	r3, #1
 8006502:	d101      	bne.n	8006508 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006504:	2302      	movs	r3, #2
 8006506:	e06d      	b.n	80065e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2202      	movs	r2, #2
 8006514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a30      	ldr	r2, [pc, #192]	; (80065f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d009      	beq.n	8006546 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a2f      	ldr	r2, [pc, #188]	; (80065f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d004      	beq.n	8006546 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a2d      	ldr	r2, [pc, #180]	; (80065f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d108      	bne.n	8006558 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800654c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	4313      	orrs	r3, r2
 8006556:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800655e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	4313      	orrs	r3, r2
 8006568:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a1e      	ldr	r2, [pc, #120]	; (80065f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d01d      	beq.n	80065b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006584:	d018      	beq.n	80065b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a1c      	ldr	r2, [pc, #112]	; (80065fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d013      	beq.n	80065b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a1a      	ldr	r2, [pc, #104]	; (8006600 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d00e      	beq.n	80065b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a15      	ldr	r2, [pc, #84]	; (80065f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d009      	beq.n	80065b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a16      	ldr	r2, [pc, #88]	; (8006604 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d004      	beq.n	80065b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a11      	ldr	r2, [pc, #68]	; (80065f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d10c      	bne.n	80065d2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	689b      	ldr	r3, [r3, #8]
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68ba      	ldr	r2, [r7, #8]
 80065d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr
 80065f0:	40012c00 	.word	0x40012c00
 80065f4:	40013400 	.word	0x40013400
 80065f8:	40015000 	.word	0x40015000
 80065fc:	40000400 	.word	0x40000400
 8006600:	40000800 	.word	0x40000800
 8006604:	40014000 	.word	0x40014000

08006608 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006612:	2300      	movs	r3, #0
 8006614:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800661c:	2b01      	cmp	r3, #1
 800661e:	d101      	bne.n	8006624 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006620:	2302      	movs	r3, #2
 8006622:	e06a      	b.n	80066fa <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	4313      	orrs	r3, r2
 8006638:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	689b      	ldr	r3, [r3, #8]
 8006644:	4313      	orrs	r3, r2
 8006646:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	4313      	orrs	r3, r2
 8006654:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4313      	orrs	r3, r2
 8006662:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	4313      	orrs	r3, r2
 8006670:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	695b      	ldr	r3, [r3, #20]
 800667c:	4313      	orrs	r3, r2
 800667e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668a:	4313      	orrs	r3, r2
 800668c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	041b      	lsls	r3, r3, #16
 800669a:	4313      	orrs	r3, r2
 800669c:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a19      	ldr	r2, [pc, #100]	; (8006708 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d009      	beq.n	80066bc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a17      	ldr	r2, [pc, #92]	; (800670c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d004      	beq.n	80066bc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a16      	ldr	r2, [pc, #88]	; (8006710 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d115      	bne.n	80066e8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c6:	051b      	lsls	r3, r3, #20
 80066c8:	4313      	orrs	r3, r2
 80066ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	69db      	ldr	r3, [r3, #28]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	40012c00 	.word	0x40012c00
 800670c:	40013400 	.word	0x40013400
 8006710:	40015000 	.word	0x40015000

08006714 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800671c:	bf00      	nop
 800671e:	370c      	adds	r7, #12
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e040      	b.n	80067e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006766:	2b00      	cmp	r3, #0
 8006768:	d106      	bne.n	8006778 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7fb fa1c 	bl	8001bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2224      	movs	r2, #36	; 0x24
 800677c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f022 0201 	bic.w	r2, r2, #1
 800678c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fb76 	bl	8006e80 <UART_SetConfig>
 8006794:	4603      	mov	r3, r0
 8006796:	2b01      	cmp	r3, #1
 8006798:	d101      	bne.n	800679e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e022      	b.n	80067e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d002      	beq.n	80067ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 fd3e 	bl	8007228 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	685a      	ldr	r2, [r3, #4]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	689a      	ldr	r2, [r3, #8]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f042 0201 	orr.w	r2, r2, #1
 80067da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 fdc5 	bl	800736c <UART_CheckIdleState>
 80067e2:	4603      	mov	r3, r0
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3708      	adds	r7, #8
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b08a      	sub	sp, #40	; 0x28
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	4613      	mov	r3, r2
 80067f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006800:	2b20      	cmp	r3, #32
 8006802:	d132      	bne.n	800686a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d002      	beq.n	8006810 <HAL_UART_Receive_IT+0x24>
 800680a:	88fb      	ldrh	r3, [r7, #6]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d101      	bne.n	8006814 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e02b      	b.n	800686c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2200      	movs	r2, #0
 8006818:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d018      	beq.n	800685a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	e853 3f00 	ldrex	r3, [r3]
 8006834:	613b      	str	r3, [r7, #16]
   return(result);
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800683c:	627b      	str	r3, [r7, #36]	; 0x24
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	461a      	mov	r2, r3
 8006844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006846:	623b      	str	r3, [r7, #32]
 8006848:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684a:	69f9      	ldr	r1, [r7, #28]
 800684c:	6a3a      	ldr	r2, [r7, #32]
 800684e:	e841 2300 	strex	r3, r2, [r1]
 8006852:	61bb      	str	r3, [r7, #24]
   return(result);
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1e6      	bne.n	8006828 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800685a:	88fb      	ldrh	r3, [r7, #6]
 800685c:	461a      	mov	r2, r3
 800685e:	68b9      	ldr	r1, [r7, #8]
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f000 fe93 	bl	800758c <UART_Start_Receive_IT>
 8006866:	4603      	mov	r3, r0
 8006868:	e000      	b.n	800686c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800686a:	2302      	movs	r3, #2
  }
}
 800686c:	4618      	mov	r0, r3
 800686e:	3728      	adds	r7, #40	; 0x28
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b0ba      	sub	sp, #232	; 0xe8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800689a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800689e:	f640 030f 	movw	r3, #2063	; 0x80f
 80068a2:	4013      	ands	r3, r2
 80068a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80068a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d115      	bne.n	80068dc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80068b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068b4:	f003 0320 	and.w	r3, r3, #32
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00f      	beq.n	80068dc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80068bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068c0:	f003 0320 	and.w	r3, r3, #32
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d009      	beq.n	80068dc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 82ab 	beq.w	8006e28 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	4798      	blx	r3
      }
      return;
 80068da:	e2a5      	b.n	8006e28 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80068dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f000 8117 	beq.w	8006b14 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80068e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068ea:	f003 0301 	and.w	r3, r3, #1
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d106      	bne.n	8006900 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80068f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80068f6:	4b85      	ldr	r3, [pc, #532]	; (8006b0c <HAL_UART_IRQHandler+0x298>)
 80068f8:	4013      	ands	r3, r2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f000 810a 	beq.w	8006b14 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	2b00      	cmp	r3, #0
 800690a:	d011      	beq.n	8006930 <HAL_UART_IRQHandler+0xbc>
 800690c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00b      	beq.n	8006930 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2201      	movs	r2, #1
 800691e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006926:	f043 0201 	orr.w	r2, r3, #1
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006934:	f003 0302 	and.w	r3, r3, #2
 8006938:	2b00      	cmp	r3, #0
 800693a:	d011      	beq.n	8006960 <HAL_UART_IRQHandler+0xec>
 800693c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006940:	f003 0301 	and.w	r3, r3, #1
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00b      	beq.n	8006960 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2202      	movs	r2, #2
 800694e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006956:	f043 0204 	orr.w	r2, r3, #4
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006964:	f003 0304 	and.w	r3, r3, #4
 8006968:	2b00      	cmp	r3, #0
 800696a:	d011      	beq.n	8006990 <HAL_UART_IRQHandler+0x11c>
 800696c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00b      	beq.n	8006990 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2204      	movs	r2, #4
 800697e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006986:	f043 0202 	orr.w	r2, r3, #2
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006994:	f003 0308 	and.w	r3, r3, #8
 8006998:	2b00      	cmp	r3, #0
 800699a:	d017      	beq.n	80069cc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800699c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069a0:	f003 0320 	and.w	r3, r3, #32
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d105      	bne.n	80069b4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80069a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069ac:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00b      	beq.n	80069cc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2208      	movs	r2, #8
 80069ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069c2:	f043 0208 	orr.w	r2, r3, #8
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80069cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d012      	beq.n	80069fe <HAL_UART_IRQHandler+0x18a>
 80069d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00c      	beq.n	80069fe <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069f4:	f043 0220 	orr.w	r2, r3, #32
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 8211 	beq.w	8006e2c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a0e:	f003 0320 	and.w	r3, r3, #32
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d00d      	beq.n	8006a32 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a1a:	f003 0320 	and.w	r3, r3, #32
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d007      	beq.n	8006a32 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d003      	beq.n	8006a32 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a46:	2b40      	cmp	r3, #64	; 0x40
 8006a48:	d005      	beq.n	8006a56 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006a4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d04f      	beq.n	8006af6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fe5e 	bl	8007718 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	689b      	ldr	r3, [r3, #8]
 8006a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a66:	2b40      	cmp	r3, #64	; 0x40
 8006a68:	d141      	bne.n	8006aee <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	3308      	adds	r3, #8
 8006a70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a78:	e853 3f00 	ldrex	r3, [r3]
 8006a7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006a80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	3308      	adds	r3, #8
 8006a92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006a9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006aa2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006aa6:	e841 2300 	strex	r3, r2, [r1]
 8006aaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006aae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1d9      	bne.n	8006a6a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d013      	beq.n	8006ae6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ac2:	4a13      	ldr	r2, [pc, #76]	; (8006b10 <HAL_UART_IRQHandler+0x29c>)
 8006ac4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aca:	4618      	mov	r0, r3
 8006acc:	f7fb ff95 	bl	80029fa <HAL_DMA_Abort_IT>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d017      	beq.n	8006b06 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ada:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006ae0:	4610      	mov	r0, r2
 8006ae2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ae4:	e00f      	b.n	8006b06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f9b4 	bl	8006e54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aec:	e00b      	b.n	8006b06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f9b0 	bl	8006e54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006af4:	e007      	b.n	8006b06 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f9ac 	bl	8006e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006b04:	e192      	b.n	8006e2c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b06:	bf00      	nop
    return;
 8006b08:	e190      	b.n	8006e2c <HAL_UART_IRQHandler+0x5b8>
 8006b0a:	bf00      	nop
 8006b0c:	04000120 	.word	0x04000120
 8006b10:	080077e1 	.word	0x080077e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	f040 814b 	bne.w	8006db4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b22:	f003 0310 	and.w	r3, r3, #16
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 8144 	beq.w	8006db4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b30:	f003 0310 	and.w	r3, r3, #16
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f000 813d 	beq.w	8006db4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2210      	movs	r2, #16
 8006b40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	689b      	ldr	r3, [r3, #8]
 8006b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4c:	2b40      	cmp	r3, #64	; 0x40
 8006b4e:	f040 80b5 	bne.w	8006cbc <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b5e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f000 8164 	beq.w	8006e30 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006b6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b72:	429a      	cmp	r2, r3
 8006b74:	f080 815c 	bcs.w	8006e30 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b7e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	2b20      	cmp	r3, #32
 8006b8a:	f000 8086 	beq.w	8006c9a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b9a:	e853 3f00 	ldrex	r3, [r3]
 8006b9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006ba2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ba6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006baa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006bb8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006bbc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006bc4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006bc8:	e841 2300 	strex	r3, r2, [r1]
 8006bcc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006bd0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d1da      	bne.n	8006b8e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3308      	adds	r3, #8
 8006bde:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006be2:	e853 3f00 	ldrex	r3, [r3]
 8006be6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006be8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006bea:	f023 0301 	bic.w	r3, r3, #1
 8006bee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	3308      	adds	r3, #8
 8006bf8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006bfc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006c00:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c02:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006c04:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006c08:	e841 2300 	strex	r3, r2, [r1]
 8006c0c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006c0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d1e1      	bne.n	8006bd8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	3308      	adds	r3, #8
 8006c1a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c1e:	e853 3f00 	ldrex	r3, [r3]
 8006c22:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006c24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	3308      	adds	r3, #8
 8006c34:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006c38:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006c3a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006c3e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006c40:	e841 2300 	strex	r3, r2, [r1]
 8006c44:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006c46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1e3      	bne.n	8006c14 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c62:	e853 3f00 	ldrex	r3, [r3]
 8006c66:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c6a:	f023 0310 	bic.w	r3, r3, #16
 8006c6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	461a      	mov	r2, r3
 8006c78:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c7e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c84:	e841 2300 	strex	r3, r2, [r1]
 8006c88:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d1e4      	bne.n	8006c5a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7fb fe77 	bl	8002988 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2202      	movs	r2, #2
 8006c9e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	1ad3      	subs	r3, r2, r3
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f000 f8d7 	bl	8006e68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006cba:	e0b9      	b.n	8006e30 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	1ad3      	subs	r3, r2, r3
 8006ccc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f000 80ab 	beq.w	8006e34 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8006cde:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	f000 80a6 	beq.w	8006e34 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf0:	e853 3f00 	ldrex	r3, [r3]
 8006cf4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cf8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cfc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	461a      	mov	r2, r3
 8006d06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006d0a:	647b      	str	r3, [r7, #68]	; 0x44
 8006d0c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d12:	e841 2300 	strex	r3, r2, [r1]
 8006d16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d1e4      	bne.n	8006ce8 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	3308      	adds	r3, #8
 8006d24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d28:	e853 3f00 	ldrex	r3, [r3]
 8006d2c:	623b      	str	r3, [r7, #32]
   return(result);
 8006d2e:	6a3b      	ldr	r3, [r7, #32]
 8006d30:	f023 0301 	bic.w	r3, r3, #1
 8006d34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	3308      	adds	r3, #8
 8006d3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006d42:	633a      	str	r2, [r7, #48]	; 0x30
 8006d44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d4a:	e841 2300 	strex	r3, r2, [r1]
 8006d4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d1e3      	bne.n	8006d1e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2220      	movs	r2, #32
 8006d5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d70:	693b      	ldr	r3, [r7, #16]
 8006d72:	e853 3f00 	ldrex	r3, [r3]
 8006d76:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f023 0310 	bic.w	r3, r3, #16
 8006d7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	461a      	mov	r2, r3
 8006d88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006d8c:	61fb      	str	r3, [r7, #28]
 8006d8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d90:	69b9      	ldr	r1, [r7, #24]
 8006d92:	69fa      	ldr	r2, [r7, #28]
 8006d94:	e841 2300 	strex	r3, r2, [r1]
 8006d98:	617b      	str	r3, [r7, #20]
   return(result);
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d1e4      	bne.n	8006d6a <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2202      	movs	r2, #2
 8006da4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006da6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006daa:	4619      	mov	r1, r3
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 f85b 	bl	8006e68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006db2:	e03f      	b.n	8006e34 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006db8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00e      	beq.n	8006dde <HAL_UART_IRQHandler+0x56a>
 8006dc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d008      	beq.n	8006dde <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006dd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 feea 	bl	8007bb0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ddc:	e02d      	b.n	8006e3a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00e      	beq.n	8006e08 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d008      	beq.n	8006e08 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d01c      	beq.n	8006e38 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	4798      	blx	r3
    }
    return;
 8006e06:	e017      	b.n	8006e38 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d012      	beq.n	8006e3a <HAL_UART_IRQHandler+0x5c6>
 8006e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d00c      	beq.n	8006e3a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f000 fcf3 	bl	800780c <UART_EndTransmit_IT>
    return;
 8006e26:	e008      	b.n	8006e3a <HAL_UART_IRQHandler+0x5c6>
      return;
 8006e28:	bf00      	nop
 8006e2a:	e006      	b.n	8006e3a <HAL_UART_IRQHandler+0x5c6>
    return;
 8006e2c:	bf00      	nop
 8006e2e:	e004      	b.n	8006e3a <HAL_UART_IRQHandler+0x5c6>
      return;
 8006e30:	bf00      	nop
 8006e32:	e002      	b.n	8006e3a <HAL_UART_IRQHandler+0x5c6>
      return;
 8006e34:	bf00      	nop
 8006e36:	e000      	b.n	8006e3a <HAL_UART_IRQHandler+0x5c6>
    return;
 8006e38:	bf00      	nop
  }

}
 8006e3a:	37e8      	adds	r7, #232	; 0xe8
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	460b      	mov	r3, r1
 8006e72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e74:	bf00      	nop
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b088      	sub	sp, #32
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	689a      	ldr	r2, [r3, #8]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	431a      	orrs	r2, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	431a      	orrs	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	69db      	ldr	r3, [r3, #28]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	4b92      	ldr	r3, [pc, #584]	; (80070f4 <UART_SetConfig+0x274>)
 8006eac:	4013      	ands	r3, r2
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	6812      	ldr	r2, [r2, #0]
 8006eb2:	6979      	ldr	r1, [r7, #20]
 8006eb4:	430b      	orrs	r3, r1
 8006eb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	68da      	ldr	r2, [r3, #12]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	430a      	orrs	r2, r1
 8006ecc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	699b      	ldr	r3, [r3, #24]
 8006ed2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6a1b      	ldr	r3, [r3, #32]
 8006ed8:	697a      	ldr	r2, [r7, #20]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	697a      	ldr	r2, [r7, #20]
 8006eee:	430a      	orrs	r2, r1
 8006ef0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a80      	ldr	r2, [pc, #512]	; (80070f8 <UART_SetConfig+0x278>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d120      	bne.n	8006f3e <UART_SetConfig+0xbe>
 8006efc:	4b7f      	ldr	r3, [pc, #508]	; (80070fc <UART_SetConfig+0x27c>)
 8006efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f00:	f003 0303 	and.w	r3, r3, #3
 8006f04:	2b03      	cmp	r3, #3
 8006f06:	d817      	bhi.n	8006f38 <UART_SetConfig+0xb8>
 8006f08:	a201      	add	r2, pc, #4	; (adr r2, 8006f10 <UART_SetConfig+0x90>)
 8006f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0e:	bf00      	nop
 8006f10:	08006f21 	.word	0x08006f21
 8006f14:	08006f2d 	.word	0x08006f2d
 8006f18:	08006f33 	.word	0x08006f33
 8006f1c:	08006f27 	.word	0x08006f27
 8006f20:	2301      	movs	r3, #1
 8006f22:	77fb      	strb	r3, [r7, #31]
 8006f24:	e0b5      	b.n	8007092 <UART_SetConfig+0x212>
 8006f26:	2302      	movs	r3, #2
 8006f28:	77fb      	strb	r3, [r7, #31]
 8006f2a:	e0b2      	b.n	8007092 <UART_SetConfig+0x212>
 8006f2c:	2304      	movs	r3, #4
 8006f2e:	77fb      	strb	r3, [r7, #31]
 8006f30:	e0af      	b.n	8007092 <UART_SetConfig+0x212>
 8006f32:	2308      	movs	r3, #8
 8006f34:	77fb      	strb	r3, [r7, #31]
 8006f36:	e0ac      	b.n	8007092 <UART_SetConfig+0x212>
 8006f38:	2310      	movs	r3, #16
 8006f3a:	77fb      	strb	r3, [r7, #31]
 8006f3c:	e0a9      	b.n	8007092 <UART_SetConfig+0x212>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a6f      	ldr	r2, [pc, #444]	; (8007100 <UART_SetConfig+0x280>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d124      	bne.n	8006f92 <UART_SetConfig+0x112>
 8006f48:	4b6c      	ldr	r3, [pc, #432]	; (80070fc <UART_SetConfig+0x27c>)
 8006f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006f50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f54:	d011      	beq.n	8006f7a <UART_SetConfig+0xfa>
 8006f56:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006f5a:	d817      	bhi.n	8006f8c <UART_SetConfig+0x10c>
 8006f5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f60:	d011      	beq.n	8006f86 <UART_SetConfig+0x106>
 8006f62:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f66:	d811      	bhi.n	8006f8c <UART_SetConfig+0x10c>
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d003      	beq.n	8006f74 <UART_SetConfig+0xf4>
 8006f6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f70:	d006      	beq.n	8006f80 <UART_SetConfig+0x100>
 8006f72:	e00b      	b.n	8006f8c <UART_SetConfig+0x10c>
 8006f74:	2300      	movs	r3, #0
 8006f76:	77fb      	strb	r3, [r7, #31]
 8006f78:	e08b      	b.n	8007092 <UART_SetConfig+0x212>
 8006f7a:	2302      	movs	r3, #2
 8006f7c:	77fb      	strb	r3, [r7, #31]
 8006f7e:	e088      	b.n	8007092 <UART_SetConfig+0x212>
 8006f80:	2304      	movs	r3, #4
 8006f82:	77fb      	strb	r3, [r7, #31]
 8006f84:	e085      	b.n	8007092 <UART_SetConfig+0x212>
 8006f86:	2308      	movs	r3, #8
 8006f88:	77fb      	strb	r3, [r7, #31]
 8006f8a:	e082      	b.n	8007092 <UART_SetConfig+0x212>
 8006f8c:	2310      	movs	r3, #16
 8006f8e:	77fb      	strb	r3, [r7, #31]
 8006f90:	e07f      	b.n	8007092 <UART_SetConfig+0x212>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a5b      	ldr	r2, [pc, #364]	; (8007104 <UART_SetConfig+0x284>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d124      	bne.n	8006fe6 <UART_SetConfig+0x166>
 8006f9c:	4b57      	ldr	r3, [pc, #348]	; (80070fc <UART_SetConfig+0x27c>)
 8006f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006fa4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006fa8:	d011      	beq.n	8006fce <UART_SetConfig+0x14e>
 8006faa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8006fae:	d817      	bhi.n	8006fe0 <UART_SetConfig+0x160>
 8006fb0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006fb4:	d011      	beq.n	8006fda <UART_SetConfig+0x15a>
 8006fb6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006fba:	d811      	bhi.n	8006fe0 <UART_SetConfig+0x160>
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d003      	beq.n	8006fc8 <UART_SetConfig+0x148>
 8006fc0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006fc4:	d006      	beq.n	8006fd4 <UART_SetConfig+0x154>
 8006fc6:	e00b      	b.n	8006fe0 <UART_SetConfig+0x160>
 8006fc8:	2300      	movs	r3, #0
 8006fca:	77fb      	strb	r3, [r7, #31]
 8006fcc:	e061      	b.n	8007092 <UART_SetConfig+0x212>
 8006fce:	2302      	movs	r3, #2
 8006fd0:	77fb      	strb	r3, [r7, #31]
 8006fd2:	e05e      	b.n	8007092 <UART_SetConfig+0x212>
 8006fd4:	2304      	movs	r3, #4
 8006fd6:	77fb      	strb	r3, [r7, #31]
 8006fd8:	e05b      	b.n	8007092 <UART_SetConfig+0x212>
 8006fda:	2308      	movs	r3, #8
 8006fdc:	77fb      	strb	r3, [r7, #31]
 8006fde:	e058      	b.n	8007092 <UART_SetConfig+0x212>
 8006fe0:	2310      	movs	r3, #16
 8006fe2:	77fb      	strb	r3, [r7, #31]
 8006fe4:	e055      	b.n	8007092 <UART_SetConfig+0x212>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a47      	ldr	r2, [pc, #284]	; (8007108 <UART_SetConfig+0x288>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d124      	bne.n	800703a <UART_SetConfig+0x1ba>
 8006ff0:	4b42      	ldr	r3, [pc, #264]	; (80070fc <UART_SetConfig+0x27c>)
 8006ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006ff8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ffc:	d011      	beq.n	8007022 <UART_SetConfig+0x1a2>
 8006ffe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007002:	d817      	bhi.n	8007034 <UART_SetConfig+0x1b4>
 8007004:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007008:	d011      	beq.n	800702e <UART_SetConfig+0x1ae>
 800700a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800700e:	d811      	bhi.n	8007034 <UART_SetConfig+0x1b4>
 8007010:	2b00      	cmp	r3, #0
 8007012:	d003      	beq.n	800701c <UART_SetConfig+0x19c>
 8007014:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007018:	d006      	beq.n	8007028 <UART_SetConfig+0x1a8>
 800701a:	e00b      	b.n	8007034 <UART_SetConfig+0x1b4>
 800701c:	2300      	movs	r3, #0
 800701e:	77fb      	strb	r3, [r7, #31]
 8007020:	e037      	b.n	8007092 <UART_SetConfig+0x212>
 8007022:	2302      	movs	r3, #2
 8007024:	77fb      	strb	r3, [r7, #31]
 8007026:	e034      	b.n	8007092 <UART_SetConfig+0x212>
 8007028:	2304      	movs	r3, #4
 800702a:	77fb      	strb	r3, [r7, #31]
 800702c:	e031      	b.n	8007092 <UART_SetConfig+0x212>
 800702e:	2308      	movs	r3, #8
 8007030:	77fb      	strb	r3, [r7, #31]
 8007032:	e02e      	b.n	8007092 <UART_SetConfig+0x212>
 8007034:	2310      	movs	r3, #16
 8007036:	77fb      	strb	r3, [r7, #31]
 8007038:	e02b      	b.n	8007092 <UART_SetConfig+0x212>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a33      	ldr	r2, [pc, #204]	; (800710c <UART_SetConfig+0x28c>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d124      	bne.n	800708e <UART_SetConfig+0x20e>
 8007044:	4b2d      	ldr	r3, [pc, #180]	; (80070fc <UART_SetConfig+0x27c>)
 8007046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007048:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800704c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007050:	d011      	beq.n	8007076 <UART_SetConfig+0x1f6>
 8007052:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007056:	d817      	bhi.n	8007088 <UART_SetConfig+0x208>
 8007058:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800705c:	d011      	beq.n	8007082 <UART_SetConfig+0x202>
 800705e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007062:	d811      	bhi.n	8007088 <UART_SetConfig+0x208>
 8007064:	2b00      	cmp	r3, #0
 8007066:	d003      	beq.n	8007070 <UART_SetConfig+0x1f0>
 8007068:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800706c:	d006      	beq.n	800707c <UART_SetConfig+0x1fc>
 800706e:	e00b      	b.n	8007088 <UART_SetConfig+0x208>
 8007070:	2300      	movs	r3, #0
 8007072:	77fb      	strb	r3, [r7, #31]
 8007074:	e00d      	b.n	8007092 <UART_SetConfig+0x212>
 8007076:	2302      	movs	r3, #2
 8007078:	77fb      	strb	r3, [r7, #31]
 800707a:	e00a      	b.n	8007092 <UART_SetConfig+0x212>
 800707c:	2304      	movs	r3, #4
 800707e:	77fb      	strb	r3, [r7, #31]
 8007080:	e007      	b.n	8007092 <UART_SetConfig+0x212>
 8007082:	2308      	movs	r3, #8
 8007084:	77fb      	strb	r3, [r7, #31]
 8007086:	e004      	b.n	8007092 <UART_SetConfig+0x212>
 8007088:	2310      	movs	r3, #16
 800708a:	77fb      	strb	r3, [r7, #31]
 800708c:	e001      	b.n	8007092 <UART_SetConfig+0x212>
 800708e:	2310      	movs	r3, #16
 8007090:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	69db      	ldr	r3, [r3, #28]
 8007096:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800709a:	d16b      	bne.n	8007174 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800709c:	7ffb      	ldrb	r3, [r7, #31]
 800709e:	2b08      	cmp	r3, #8
 80070a0:	d838      	bhi.n	8007114 <UART_SetConfig+0x294>
 80070a2:	a201      	add	r2, pc, #4	; (adr r2, 80070a8 <UART_SetConfig+0x228>)
 80070a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a8:	080070cd 	.word	0x080070cd
 80070ac:	080070d5 	.word	0x080070d5
 80070b0:	080070dd 	.word	0x080070dd
 80070b4:	08007115 	.word	0x08007115
 80070b8:	080070e3 	.word	0x080070e3
 80070bc:	08007115 	.word	0x08007115
 80070c0:	08007115 	.word	0x08007115
 80070c4:	08007115 	.word	0x08007115
 80070c8:	080070eb 	.word	0x080070eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070cc:	f7fd f8bc 	bl	8004248 <HAL_RCC_GetPCLK1Freq>
 80070d0:	61b8      	str	r0, [r7, #24]
        break;
 80070d2:	e024      	b.n	800711e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070d4:	f7fd f8da 	bl	800428c <HAL_RCC_GetPCLK2Freq>
 80070d8:	61b8      	str	r0, [r7, #24]
        break;
 80070da:	e020      	b.n	800711e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070dc:	4b0c      	ldr	r3, [pc, #48]	; (8007110 <UART_SetConfig+0x290>)
 80070de:	61bb      	str	r3, [r7, #24]
        break;
 80070e0:	e01d      	b.n	800711e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070e2:	f7fd f83b 	bl	800415c <HAL_RCC_GetSysClockFreq>
 80070e6:	61b8      	str	r0, [r7, #24]
        break;
 80070e8:	e019      	b.n	800711e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070ee:	61bb      	str	r3, [r7, #24]
        break;
 80070f0:	e015      	b.n	800711e <UART_SetConfig+0x29e>
 80070f2:	bf00      	nop
 80070f4:	efff69f3 	.word	0xefff69f3
 80070f8:	40013800 	.word	0x40013800
 80070fc:	40021000 	.word	0x40021000
 8007100:	40004400 	.word	0x40004400
 8007104:	40004800 	.word	0x40004800
 8007108:	40004c00 	.word	0x40004c00
 800710c:	40005000 	.word	0x40005000
 8007110:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8007114:	2300      	movs	r3, #0
 8007116:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	77bb      	strb	r3, [r7, #30]
        break;
 800711c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d073      	beq.n	800720c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007124:	69bb      	ldr	r3, [r7, #24]
 8007126:	005a      	lsls	r2, r3, #1
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	085b      	lsrs	r3, r3, #1
 800712e:	441a      	add	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	fbb2 f3f3 	udiv	r3, r2, r3
 8007138:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	2b0f      	cmp	r3, #15
 800713e:	d916      	bls.n	800716e <UART_SetConfig+0x2ee>
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007146:	d212      	bcs.n	800716e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	b29b      	uxth	r3, r3
 800714c:	f023 030f 	bic.w	r3, r3, #15
 8007150:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	085b      	lsrs	r3, r3, #1
 8007156:	b29b      	uxth	r3, r3
 8007158:	f003 0307 	and.w	r3, r3, #7
 800715c:	b29a      	uxth	r2, r3
 800715e:	89fb      	ldrh	r3, [r7, #14]
 8007160:	4313      	orrs	r3, r2
 8007162:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	89fa      	ldrh	r2, [r7, #14]
 800716a:	60da      	str	r2, [r3, #12]
 800716c:	e04e      	b.n	800720c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	77bb      	strb	r3, [r7, #30]
 8007172:	e04b      	b.n	800720c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007174:	7ffb      	ldrb	r3, [r7, #31]
 8007176:	2b08      	cmp	r3, #8
 8007178:	d827      	bhi.n	80071ca <UART_SetConfig+0x34a>
 800717a:	a201      	add	r2, pc, #4	; (adr r2, 8007180 <UART_SetConfig+0x300>)
 800717c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007180:	080071a5 	.word	0x080071a5
 8007184:	080071ad 	.word	0x080071ad
 8007188:	080071b5 	.word	0x080071b5
 800718c:	080071cb 	.word	0x080071cb
 8007190:	080071bb 	.word	0x080071bb
 8007194:	080071cb 	.word	0x080071cb
 8007198:	080071cb 	.word	0x080071cb
 800719c:	080071cb 	.word	0x080071cb
 80071a0:	080071c3 	.word	0x080071c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071a4:	f7fd f850 	bl	8004248 <HAL_RCC_GetPCLK1Freq>
 80071a8:	61b8      	str	r0, [r7, #24]
        break;
 80071aa:	e013      	b.n	80071d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071ac:	f7fd f86e 	bl	800428c <HAL_RCC_GetPCLK2Freq>
 80071b0:	61b8      	str	r0, [r7, #24]
        break;
 80071b2:	e00f      	b.n	80071d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071b4:	4b1b      	ldr	r3, [pc, #108]	; (8007224 <UART_SetConfig+0x3a4>)
 80071b6:	61bb      	str	r3, [r7, #24]
        break;
 80071b8:	e00c      	b.n	80071d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071ba:	f7fc ffcf 	bl	800415c <HAL_RCC_GetSysClockFreq>
 80071be:	61b8      	str	r0, [r7, #24]
        break;
 80071c0:	e008      	b.n	80071d4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071c6:	61bb      	str	r3, [r7, #24]
        break;
 80071c8:	e004      	b.n	80071d4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80071ca:	2300      	movs	r3, #0
 80071cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	77bb      	strb	r3, [r7, #30]
        break;
 80071d2:	bf00      	nop
    }

    if (pclk != 0U)
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d018      	beq.n	800720c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	085a      	lsrs	r2, r3, #1
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	441a      	add	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	2b0f      	cmp	r3, #15
 80071f2:	d909      	bls.n	8007208 <UART_SetConfig+0x388>
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071fa:	d205      	bcs.n	8007208 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	b29a      	uxth	r2, r3
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	60da      	str	r2, [r3, #12]
 8007206:	e001      	b.n	800720c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007208:	2301      	movs	r3, #1
 800720a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007218:	7fbb      	ldrb	r3, [r7, #30]
}
 800721a:	4618      	mov	r0, r3
 800721c:	3720      	adds	r7, #32
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	007a1200 	.word	0x007a1200

08007228 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007234:	f003 0301 	and.w	r3, r3, #1
 8007238:	2b00      	cmp	r3, #0
 800723a:	d00a      	beq.n	8007252 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	430a      	orrs	r2, r1
 8007250:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007256:	f003 0302 	and.w	r3, r3, #2
 800725a:	2b00      	cmp	r3, #0
 800725c:	d00a      	beq.n	8007274 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	430a      	orrs	r2, r1
 8007272:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007278:	f003 0304 	and.w	r3, r3, #4
 800727c:	2b00      	cmp	r3, #0
 800727e:	d00a      	beq.n	8007296 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	430a      	orrs	r2, r1
 8007294:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729a:	f003 0308 	and.w	r3, r3, #8
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00a      	beq.n	80072b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	430a      	orrs	r2, r1
 80072b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072bc:	f003 0310 	and.w	r3, r3, #16
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00a      	beq.n	80072da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	430a      	orrs	r2, r1
 80072d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072de:	f003 0320 	and.w	r3, r3, #32
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00a      	beq.n	80072fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	430a      	orrs	r2, r1
 80072fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007304:	2b00      	cmp	r3, #0
 8007306:	d01a      	beq.n	800733e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	430a      	orrs	r2, r1
 800731c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007322:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007326:	d10a      	bne.n	800733e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	430a      	orrs	r2, r1
 800733c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007342:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00a      	beq.n	8007360 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	430a      	orrs	r2, r1
 800735e:	605a      	str	r2, [r3, #4]
  }
}
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b098      	sub	sp, #96	; 0x60
 8007370:	af02      	add	r7, sp, #8
 8007372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2200      	movs	r2, #0
 8007378:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800737c:	f7fb f9f2 	bl	8002764 <HAL_GetTick>
 8007380:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0308 	and.w	r3, r3, #8
 800738c:	2b08      	cmp	r3, #8
 800738e:	d12e      	bne.n	80073ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007390:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007398:	2200      	movs	r2, #0
 800739a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f000 f88c 	bl	80074bc <UART_WaitOnFlagUntilTimeout>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d021      	beq.n	80073ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b2:	e853 3f00 	ldrex	r3, [r3]
 80073b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80073b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073be:	653b      	str	r3, [r7, #80]	; 0x50
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	461a      	mov	r2, r3
 80073c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073c8:	647b      	str	r3, [r7, #68]	; 0x44
 80073ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073d0:	e841 2300 	strex	r3, r2, [r1]
 80073d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1e6      	bne.n	80073aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2220      	movs	r2, #32
 80073e0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073ea:	2303      	movs	r3, #3
 80073ec:	e062      	b.n	80074b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 0304 	and.w	r3, r3, #4
 80073f8:	2b04      	cmp	r3, #4
 80073fa:	d149      	bne.n	8007490 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007400:	9300      	str	r3, [sp, #0]
 8007402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007404:	2200      	movs	r2, #0
 8007406:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f856 	bl	80074bc <UART_WaitOnFlagUntilTimeout>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d03c      	beq.n	8007490 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800741c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741e:	e853 3f00 	ldrex	r3, [r3]
 8007422:	623b      	str	r3, [r7, #32]
   return(result);
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800742a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	461a      	mov	r2, r3
 8007432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007434:	633b      	str	r3, [r7, #48]	; 0x30
 8007436:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007438:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800743a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800743c:	e841 2300 	strex	r3, r2, [r1]
 8007440:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007444:	2b00      	cmp	r3, #0
 8007446:	d1e6      	bne.n	8007416 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	3308      	adds	r3, #8
 800744e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	e853 3f00 	ldrex	r3, [r3]
 8007456:	60fb      	str	r3, [r7, #12]
   return(result);
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	f023 0301 	bic.w	r3, r3, #1
 800745e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	3308      	adds	r3, #8
 8007466:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007468:	61fa      	str	r2, [r7, #28]
 800746a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746c:	69b9      	ldr	r1, [r7, #24]
 800746e:	69fa      	ldr	r2, [r7, #28]
 8007470:	e841 2300 	strex	r3, r2, [r1]
 8007474:	617b      	str	r3, [r7, #20]
   return(result);
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1e5      	bne.n	8007448 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2220      	movs	r2, #32
 8007480:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800748c:	2303      	movs	r3, #3
 800748e:	e011      	b.n	80074b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2220      	movs	r2, #32
 8007494:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2220      	movs	r2, #32
 800749a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3758      	adds	r7, #88	; 0x58
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b084      	sub	sp, #16
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	603b      	str	r3, [r7, #0]
 80074c8:	4613      	mov	r3, r2
 80074ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074cc:	e049      	b.n	8007562 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d4:	d045      	beq.n	8007562 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074d6:	f7fb f945 	bl	8002764 <HAL_GetTick>
 80074da:	4602      	mov	r2, r0
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	1ad3      	subs	r3, r2, r3
 80074e0:	69ba      	ldr	r2, [r7, #24]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d302      	bcc.n	80074ec <UART_WaitOnFlagUntilTimeout+0x30>
 80074e6:	69bb      	ldr	r3, [r7, #24]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d101      	bne.n	80074f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80074ec:	2303      	movs	r3, #3
 80074ee:	e048      	b.n	8007582 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 0304 	and.w	r3, r3, #4
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d031      	beq.n	8007562 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	69db      	ldr	r3, [r3, #28]
 8007504:	f003 0308 	and.w	r3, r3, #8
 8007508:	2b08      	cmp	r3, #8
 800750a:	d110      	bne.n	800752e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	2208      	movs	r2, #8
 8007512:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007514:	68f8      	ldr	r0, [r7, #12]
 8007516:	f000 f8ff 	bl	8007718 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2208      	movs	r2, #8
 800751e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	e029      	b.n	8007582 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	69db      	ldr	r3, [r3, #28]
 8007534:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007538:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800753c:	d111      	bne.n	8007562 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007546:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f000 f8e5 	bl	8007718 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	2220      	movs	r2, #32
 8007552:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e00f      	b.n	8007582 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	69da      	ldr	r2, [r3, #28]
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	4013      	ands	r3, r2
 800756c:	68ba      	ldr	r2, [r7, #8]
 800756e:	429a      	cmp	r2, r3
 8007570:	bf0c      	ite	eq
 8007572:	2301      	moveq	r3, #1
 8007574:	2300      	movne	r3, #0
 8007576:	b2db      	uxtb	r3, r3
 8007578:	461a      	mov	r2, r3
 800757a:	79fb      	ldrb	r3, [r7, #7]
 800757c:	429a      	cmp	r2, r3
 800757e:	d0a6      	beq.n	80074ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007580:	2300      	movs	r3, #0
}
 8007582:	4618      	mov	r0, r3
 8007584:	3710      	adds	r7, #16
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
	...

0800758c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800758c:	b480      	push	{r7}
 800758e:	b097      	sub	sp, #92	; 0x5c
 8007590:	af00      	add	r7, sp, #0
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	4613      	mov	r3, r2
 8007598:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	88fa      	ldrh	r2, [r7, #6]
 80075a4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	88fa      	ldrh	r2, [r7, #6]
 80075ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2200      	movs	r2, #0
 80075b4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075be:	d10e      	bne.n	80075de <UART_Start_Receive_IT+0x52>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	691b      	ldr	r3, [r3, #16]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d105      	bne.n	80075d4 <UART_Start_Receive_IT+0x48>
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 80075ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80075d2:	e02d      	b.n	8007630 <UART_Start_Receive_IT+0xa4>
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	22ff      	movs	r2, #255	; 0xff
 80075d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80075dc:	e028      	b.n	8007630 <UART_Start_Receive_IT+0xa4>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d10d      	bne.n	8007602 <UART_Start_Receive_IT+0x76>
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d104      	bne.n	80075f8 <UART_Start_Receive_IT+0x6c>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	22ff      	movs	r2, #255	; 0xff
 80075f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80075f6:	e01b      	b.n	8007630 <UART_Start_Receive_IT+0xa4>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	227f      	movs	r2, #127	; 0x7f
 80075fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007600:	e016      	b.n	8007630 <UART_Start_Receive_IT+0xa4>
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800760a:	d10d      	bne.n	8007628 <UART_Start_Receive_IT+0x9c>
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d104      	bne.n	800761e <UART_Start_Receive_IT+0x92>
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	227f      	movs	r2, #127	; 0x7f
 8007618:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800761c:	e008      	b.n	8007630 <UART_Start_Receive_IT+0xa4>
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	223f      	movs	r2, #63	; 0x3f
 8007622:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007626:	e003      	b.n	8007630 <UART_Start_Receive_IT+0xa4>
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2200      	movs	r2, #0
 8007634:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2222      	movs	r2, #34	; 0x22
 800763c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	3308      	adds	r3, #8
 8007646:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800764a:	e853 3f00 	ldrex	r3, [r3]
 800764e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007652:	f043 0301 	orr.w	r3, r3, #1
 8007656:	657b      	str	r3, [r7, #84]	; 0x54
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	3308      	adds	r3, #8
 800765e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007660:	64ba      	str	r2, [r7, #72]	; 0x48
 8007662:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007664:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007666:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007668:	e841 2300 	strex	r3, r2, [r1]
 800766c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800766e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1e5      	bne.n	8007640 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800767c:	d107      	bne.n	800768e <UART_Start_Receive_IT+0x102>
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d103      	bne.n	800768e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	4a21      	ldr	r2, [pc, #132]	; (8007710 <UART_Start_Receive_IT+0x184>)
 800768a:	669a      	str	r2, [r3, #104]	; 0x68
 800768c:	e002      	b.n	8007694 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	4a20      	ldr	r2, [pc, #128]	; (8007714 <UART_Start_Receive_IT+0x188>)
 8007692:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	691b      	ldr	r3, [r3, #16]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d019      	beq.n	80076d0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a4:	e853 3f00 	ldrex	r3, [r3]
 80076a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ac:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80076b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	461a      	mov	r2, r3
 80076b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ba:	637b      	str	r3, [r7, #52]	; 0x34
 80076bc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80076c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076c2:	e841 2300 	strex	r3, r2, [r1]
 80076c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80076c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1e6      	bne.n	800769c <UART_Start_Receive_IT+0x110>
 80076ce:	e018      	b.n	8007702 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	e853 3f00 	ldrex	r3, [r3]
 80076dc:	613b      	str	r3, [r7, #16]
   return(result);
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	f043 0320 	orr.w	r3, r3, #32
 80076e4:	653b      	str	r3, [r7, #80]	; 0x50
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	461a      	mov	r2, r3
 80076ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076ee:	623b      	str	r3, [r7, #32]
 80076f0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f2:	69f9      	ldr	r1, [r7, #28]
 80076f4:	6a3a      	ldr	r2, [r7, #32]
 80076f6:	e841 2300 	strex	r3, r2, [r1]
 80076fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1e6      	bne.n	80076d0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	375c      	adds	r7, #92	; 0x5c
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr
 8007710:	08007a09 	.word	0x08007a09
 8007714:	08007861 	.word	0x08007861

08007718 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007718:	b480      	push	{r7}
 800771a:	b095      	sub	sp, #84	; 0x54
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007728:	e853 3f00 	ldrex	r3, [r3]
 800772c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800772e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007730:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007734:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	461a      	mov	r2, r3
 800773c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800773e:	643b      	str	r3, [r7, #64]	; 0x40
 8007740:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007742:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007744:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007746:	e841 2300 	strex	r3, r2, [r1]
 800774a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800774c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1e6      	bne.n	8007720 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	3308      	adds	r3, #8
 8007758:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775a:	6a3b      	ldr	r3, [r7, #32]
 800775c:	e853 3f00 	ldrex	r3, [r3]
 8007760:	61fb      	str	r3, [r7, #28]
   return(result);
 8007762:	69fb      	ldr	r3, [r7, #28]
 8007764:	f023 0301 	bic.w	r3, r3, #1
 8007768:	64bb      	str	r3, [r7, #72]	; 0x48
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	3308      	adds	r3, #8
 8007770:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007772:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007774:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007776:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800777a:	e841 2300 	strex	r3, r2, [r1]
 800777e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1e5      	bne.n	8007752 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800778a:	2b01      	cmp	r3, #1
 800778c:	d118      	bne.n	80077c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	e853 3f00 	ldrex	r3, [r3]
 800779a:	60bb      	str	r3, [r7, #8]
   return(result);
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	f023 0310 	bic.w	r3, r3, #16
 80077a2:	647b      	str	r3, [r7, #68]	; 0x44
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	461a      	mov	r2, r3
 80077aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077ac:	61bb      	str	r3, [r7, #24]
 80077ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b0:	6979      	ldr	r1, [r7, #20]
 80077b2:	69ba      	ldr	r2, [r7, #24]
 80077b4:	e841 2300 	strex	r3, r2, [r1]
 80077b8:	613b      	str	r3, [r7, #16]
   return(result);
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d1e6      	bne.n	800778e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2220      	movs	r2, #32
 80077c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2200      	movs	r2, #0
 80077cc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80077d4:	bf00      	nop
 80077d6:	3754      	adds	r7, #84	; 0x54
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2200      	movs	r2, #0
 80077fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f7ff fb28 	bl	8006e54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007804:	bf00      	nop
 8007806:	3710      	adds	r7, #16
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b088      	sub	sp, #32
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	e853 3f00 	ldrex	r3, [r3]
 8007820:	60bb      	str	r3, [r7, #8]
   return(result);
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007828:	61fb      	str	r3, [r7, #28]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	461a      	mov	r2, r3
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	61bb      	str	r3, [r7, #24]
 8007834:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007836:	6979      	ldr	r1, [r7, #20]
 8007838:	69ba      	ldr	r2, [r7, #24]
 800783a:	e841 2300 	strex	r3, r2, [r1]
 800783e:	613b      	str	r3, [r7, #16]
   return(result);
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1e6      	bne.n	8007814 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2220      	movs	r2, #32
 800784a:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2200      	movs	r2, #0
 8007850:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7ff faf4 	bl	8006e40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007858:	bf00      	nop
 800785a:	3720      	adds	r7, #32
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b09c      	sub	sp, #112	; 0x70
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800786e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007878:	2b22      	cmp	r3, #34	; 0x22
 800787a:	f040 80b9 	bne.w	80079f0 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007884:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007888:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800788c:	b2d9      	uxtb	r1, r3
 800788e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007892:	b2da      	uxtb	r2, r3
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007898:	400a      	ands	r2, r1
 800789a:	b2d2      	uxtb	r2, r2
 800789c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078a2:	1c5a      	adds	r2, r3, #1
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	3b01      	subs	r3, #1
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	f040 809c 	bne.w	8007a00 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078d0:	e853 3f00 	ldrex	r3, [r3]
 80078d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80078d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80078d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80078dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	461a      	mov	r2, r3
 80078e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078e6:	65bb      	str	r3, [r7, #88]	; 0x58
 80078e8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80078ec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80078ee:	e841 2300 	strex	r3, r2, [r1]
 80078f2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80078f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1e6      	bne.n	80078c8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	3308      	adds	r3, #8
 8007900:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007904:	e853 3f00 	ldrex	r3, [r3]
 8007908:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800790a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800790c:	f023 0301 	bic.w	r3, r3, #1
 8007910:	667b      	str	r3, [r7, #100]	; 0x64
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	3308      	adds	r3, #8
 8007918:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800791a:	647a      	str	r2, [r7, #68]	; 0x44
 800791c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007920:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007922:	e841 2300 	strex	r3, r2, [r1]
 8007926:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800792a:	2b00      	cmp	r3, #0
 800792c:	d1e5      	bne.n	80078fa <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2220      	movs	r2, #32
 8007932:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800794c:	2b00      	cmp	r3, #0
 800794e:	d018      	beq.n	8007982 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007958:	e853 3f00 	ldrex	r3, [r3]
 800795c:	623b      	str	r3, [r7, #32]
   return(result);
 800795e:	6a3b      	ldr	r3, [r7, #32]
 8007960:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007964:	663b      	str	r3, [r7, #96]	; 0x60
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	461a      	mov	r2, r3
 800796c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800796e:	633b      	str	r3, [r7, #48]	; 0x30
 8007970:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007972:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007976:	e841 2300 	strex	r3, r2, [r1]
 800797a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800797c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1e6      	bne.n	8007950 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007986:	2b01      	cmp	r3, #1
 8007988:	d12e      	bne.n	80079e8 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	e853 3f00 	ldrex	r3, [r3]
 800799c:	60fb      	str	r3, [r7, #12]
   return(result);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	f023 0310 	bic.w	r3, r3, #16
 80079a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	461a      	mov	r2, r3
 80079ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079ae:	61fb      	str	r3, [r7, #28]
 80079b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b2:	69b9      	ldr	r1, [r7, #24]
 80079b4:	69fa      	ldr	r2, [r7, #28]
 80079b6:	e841 2300 	strex	r3, r2, [r1]
 80079ba:	617b      	str	r3, [r7, #20]
   return(result);
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1e6      	bne.n	8007990 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	69db      	ldr	r3, [r3, #28]
 80079c8:	f003 0310 	and.w	r3, r3, #16
 80079cc:	2b10      	cmp	r3, #16
 80079ce:	d103      	bne.n	80079d8 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2210      	movs	r2, #16
 80079d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80079de:	4619      	mov	r1, r3
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f7ff fa41 	bl	8006e68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80079e6:	e00b      	b.n	8007a00 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7fa f989 	bl	8001d00 <HAL_UART_RxCpltCallback>
}
 80079ee:	e007      	b.n	8007a00 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	699a      	ldr	r2, [r3, #24]
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f042 0208 	orr.w	r2, r2, #8
 80079fe:	619a      	str	r2, [r3, #24]
}
 8007a00:	bf00      	nop
 8007a02:	3770      	adds	r7, #112	; 0x70
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b09c      	sub	sp, #112	; 0x70
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a16:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a20:	2b22      	cmp	r3, #34	; 0x22
 8007a22:	f040 80b9 	bne.w	8007b98 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007a2c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a34:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007a36:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007a3a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007a3e:	4013      	ands	r3, r2
 8007a40:	b29a      	uxth	r2, r3
 8007a42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a44:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a4a:	1c9a      	adds	r2, r3, #2
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	3b01      	subs	r3, #1
 8007a5a:	b29a      	uxth	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f040 809c 	bne.w	8007ba8 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a78:	e853 3f00 	ldrex	r3, [r3]
 8007a7c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007a7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a84:	667b      	str	r3, [r7, #100]	; 0x64
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a8e:	657b      	str	r3, [r7, #84]	; 0x54
 8007a90:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a92:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007a94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007a96:	e841 2300 	strex	r3, r2, [r1]
 8007a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007a9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d1e6      	bne.n	8007a70 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	3308      	adds	r3, #8
 8007aa8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aac:	e853 3f00 	ldrex	r3, [r3]
 8007ab0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab4:	f023 0301 	bic.w	r3, r3, #1
 8007ab8:	663b      	str	r3, [r7, #96]	; 0x60
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	3308      	adds	r3, #8
 8007ac0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007ac2:	643a      	str	r2, [r7, #64]	; 0x40
 8007ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007ac8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007aca:	e841 2300 	strex	r3, r2, [r1]
 8007ace:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1e5      	bne.n	8007aa2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2220      	movs	r2, #32
 8007ada:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d018      	beq.n	8007b2a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afe:	6a3b      	ldr	r3, [r7, #32]
 8007b00:	e853 3f00 	ldrex	r3, [r3]
 8007b04:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	461a      	mov	r2, r3
 8007b14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b18:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b1e:	e841 2300 	strex	r3, r2, [r1]
 8007b22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1e6      	bne.n	8007af8 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d12e      	bne.n	8007b90 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	e853 3f00 	ldrex	r3, [r3]
 8007b44:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	f023 0310 	bic.w	r3, r3, #16
 8007b4c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	461a      	mov	r2, r3
 8007b54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b56:	61bb      	str	r3, [r7, #24]
 8007b58:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5a:	6979      	ldr	r1, [r7, #20]
 8007b5c:	69ba      	ldr	r2, [r7, #24]
 8007b5e:	e841 2300 	strex	r3, r2, [r1]
 8007b62:	613b      	str	r3, [r7, #16]
   return(result);
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1e6      	bne.n	8007b38 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	69db      	ldr	r3, [r3, #28]
 8007b70:	f003 0310 	and.w	r3, r3, #16
 8007b74:	2b10      	cmp	r3, #16
 8007b76:	d103      	bne.n	8007b80 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2210      	movs	r2, #16
 8007b7e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007b86:	4619      	mov	r1, r3
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f7ff f96d 	bl	8006e68 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b8e:	e00b      	b.n	8007ba8 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f7fa f8b5 	bl	8001d00 <HAL_UART_RxCpltCallback>
}
 8007b96:	e007      	b.n	8007ba8 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	699a      	ldr	r2, [r3, #24]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f042 0208 	orr.w	r2, r2, #8
 8007ba6:	619a      	str	r2, [r3, #24]
}
 8007ba8:	bf00      	nop
 8007baa:	3770      	adds	r7, #112	; 0x70
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007bb0:	b480      	push	{r7}
 8007bb2:	b083      	sub	sp, #12
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007bb8:	bf00      	nop
 8007bba:	370c      	adds	r7, #12
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bca:	f3ef 8305 	mrs	r3, IPSR
 8007bce:	60bb      	str	r3, [r7, #8]
  return(result);
 8007bd0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d10f      	bne.n	8007bf6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bd6:	f3ef 8310 	mrs	r3, PRIMASK
 8007bda:	607b      	str	r3, [r7, #4]
  return(result);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d109      	bne.n	8007bf6 <osKernelInitialize+0x32>
 8007be2:	4b11      	ldr	r3, [pc, #68]	; (8007c28 <osKernelInitialize+0x64>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d109      	bne.n	8007bfe <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007bea:	f3ef 8311 	mrs	r3, BASEPRI
 8007bee:	603b      	str	r3, [r7, #0]
  return(result);
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d003      	beq.n	8007bfe <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8007bf6:	f06f 0305 	mvn.w	r3, #5
 8007bfa:	60fb      	str	r3, [r7, #12]
 8007bfc:	e00c      	b.n	8007c18 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007bfe:	4b0a      	ldr	r3, [pc, #40]	; (8007c28 <osKernelInitialize+0x64>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d105      	bne.n	8007c12 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8007c06:	4b08      	ldr	r3, [pc, #32]	; (8007c28 <osKernelInitialize+0x64>)
 8007c08:	2201      	movs	r2, #1
 8007c0a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	60fb      	str	r3, [r7, #12]
 8007c10:	e002      	b.n	8007c18 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8007c12:	f04f 33ff 	mov.w	r3, #4294967295
 8007c16:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007c18:	68fb      	ldr	r3, [r7, #12]
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	3714      	adds	r7, #20
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	20000508 	.word	0x20000508

08007c2c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c32:	f3ef 8305 	mrs	r3, IPSR
 8007c36:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c38:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d10f      	bne.n	8007c5e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c3e:	f3ef 8310 	mrs	r3, PRIMASK
 8007c42:	607b      	str	r3, [r7, #4]
  return(result);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d109      	bne.n	8007c5e <osKernelStart+0x32>
 8007c4a:	4b11      	ldr	r3, [pc, #68]	; (8007c90 <osKernelStart+0x64>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2b02      	cmp	r3, #2
 8007c50:	d109      	bne.n	8007c66 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007c52:	f3ef 8311 	mrs	r3, BASEPRI
 8007c56:	603b      	str	r3, [r7, #0]
  return(result);
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d003      	beq.n	8007c66 <osKernelStart+0x3a>
    stat = osErrorISR;
 8007c5e:	f06f 0305 	mvn.w	r3, #5
 8007c62:	60fb      	str	r3, [r7, #12]
 8007c64:	e00e      	b.n	8007c84 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8007c66:	4b0a      	ldr	r3, [pc, #40]	; (8007c90 <osKernelStart+0x64>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d107      	bne.n	8007c7e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8007c6e:	4b08      	ldr	r3, [pc, #32]	; (8007c90 <osKernelStart+0x64>)
 8007c70:	2202      	movs	r2, #2
 8007c72:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8007c74:	f001 fd2c 	bl	80096d0 <vTaskStartScheduler>
      stat = osOK;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	60fb      	str	r3, [r7, #12]
 8007c7c:	e002      	b.n	8007c84 <osKernelStart+0x58>
    } else {
      stat = osError;
 8007c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c82:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8007c84:	68fb      	ldr	r3, [r7, #12]
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3710      	adds	r7, #16
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	20000508 	.word	0x20000508

08007c94 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b092      	sub	sp, #72	; 0x48
 8007c98:	af04      	add	r7, sp, #16
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ca4:	f3ef 8305 	mrs	r3, IPSR
 8007ca8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	f040 8094 	bne.w	8007dda <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cb2:	f3ef 8310 	mrs	r3, PRIMASK
 8007cb6:	623b      	str	r3, [r7, #32]
  return(result);
 8007cb8:	6a3b      	ldr	r3, [r7, #32]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f040 808d 	bne.w	8007dda <osThreadNew+0x146>
 8007cc0:	4b48      	ldr	r3, [pc, #288]	; (8007de4 <osThreadNew+0x150>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d106      	bne.n	8007cd6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007cc8:	f3ef 8311 	mrs	r3, BASEPRI
 8007ccc:	61fb      	str	r3, [r7, #28]
  return(result);
 8007cce:	69fb      	ldr	r3, [r7, #28]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f040 8082 	bne.w	8007dda <osThreadNew+0x146>
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d07e      	beq.n	8007dda <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8007cdc:	2380      	movs	r3, #128	; 0x80
 8007cde:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8007ce0:	2318      	movs	r3, #24
 8007ce2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8007ce8:	f107 031b 	add.w	r3, r7, #27
 8007cec:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8007cee:	f04f 33ff 	mov.w	r3, #4294967295
 8007cf2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d045      	beq.n	8007d86 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d002      	beq.n	8007d08 <osThreadNew+0x74>
        name = attr->name;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	699b      	ldr	r3, [r3, #24]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d002      	beq.n	8007d16 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	699b      	ldr	r3, [r3, #24]
 8007d14:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d008      	beq.n	8007d2e <osThreadNew+0x9a>
 8007d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1e:	2b38      	cmp	r3, #56	; 0x38
 8007d20:	d805      	bhi.n	8007d2e <osThreadNew+0x9a>
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	f003 0301 	and.w	r3, r3, #1
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d001      	beq.n	8007d32 <osThreadNew+0x9e>
        return (NULL);
 8007d2e:	2300      	movs	r3, #0
 8007d30:	e054      	b.n	8007ddc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	695b      	ldr	r3, [r3, #20]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d003      	beq.n	8007d42 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	695b      	ldr	r3, [r3, #20]
 8007d3e:	089b      	lsrs	r3, r3, #2
 8007d40:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00e      	beq.n	8007d68 <osThreadNew+0xd4>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	2bab      	cmp	r3, #171	; 0xab
 8007d50:	d90a      	bls.n	8007d68 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d006      	beq.n	8007d68 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	695b      	ldr	r3, [r3, #20]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d002      	beq.n	8007d68 <osThreadNew+0xd4>
        mem = 1;
 8007d62:	2301      	movs	r3, #1
 8007d64:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d66:	e010      	b.n	8007d8a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	689b      	ldr	r3, [r3, #8]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d10c      	bne.n	8007d8a <osThreadNew+0xf6>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d108      	bne.n	8007d8a <osThreadNew+0xf6>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d104      	bne.n	8007d8a <osThreadNew+0xf6>
          mem = 0;
 8007d80:	2300      	movs	r3, #0
 8007d82:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d84:	e001      	b.n	8007d8a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8007d86:	2300      	movs	r3, #0
 8007d88:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8007d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d110      	bne.n	8007db2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007d98:	9202      	str	r2, [sp, #8]
 8007d9a:	9301      	str	r3, [sp, #4]
 8007d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9e:	9300      	str	r3, [sp, #0]
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007da4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f001 fa38 	bl	800921c <xTaskCreateStatic>
 8007dac:	4603      	mov	r3, r0
 8007dae:	617b      	str	r3, [r7, #20]
 8007db0:	e013      	b.n	8007dda <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8007db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d110      	bne.n	8007dda <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dba:	b29a      	uxth	r2, r3
 8007dbc:	f107 0314 	add.w	r3, r7, #20
 8007dc0:	9301      	str	r3, [sp, #4]
 8007dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dc4:	9300      	str	r3, [sp, #0]
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f001 fa82 	bl	80092d4 <xTaskCreate>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d001      	beq.n	8007dda <osThreadNew+0x146>
          hTask = NULL;
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007dda:	697b      	ldr	r3, [r7, #20]
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3738      	adds	r7, #56	; 0x38
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	20000508 	.word	0x20000508

08007de8 <osThreadGetId>:
  }

  return (name);
}

osThreadId_t osThreadGetId (void) {
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dee:	f3ef 8305 	mrs	r3, IPSR
 8007df2:	60bb      	str	r3, [r7, #8]
  return(result);
 8007df4:	68bb      	ldr	r3, [r7, #8]
  osThreadId_t id;

  if (IS_IRQ()) {
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d10f      	bne.n	8007e1a <osThreadGetId+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007dfa:	f3ef 8310 	mrs	r3, PRIMASK
 8007dfe:	607b      	str	r3, [r7, #4]
  return(result);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d109      	bne.n	8007e1a <osThreadGetId+0x32>
 8007e06:	4b0a      	ldr	r3, [pc, #40]	; (8007e30 <osThreadGetId+0x48>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2b02      	cmp	r3, #2
 8007e0c:	d108      	bne.n	8007e20 <osThreadGetId+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e0e:	f3ef 8311 	mrs	r3, BASEPRI
 8007e12:	603b      	str	r3, [r7, #0]
  return(result);
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d002      	beq.n	8007e20 <osThreadGetId+0x38>
    id = NULL;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	60fb      	str	r3, [r7, #12]
 8007e1e:	e002      	b.n	8007e26 <osThreadGetId+0x3e>
  } else {
    id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8007e20:	f002 f91e 	bl	800a060 <xTaskGetCurrentTaskHandle>
 8007e24:	60f8      	str	r0, [r7, #12]
  }

  return (id);
 8007e26:	68fb      	ldr	r3, [r7, #12]
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3710      	adds	r7, #16
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	20000508 	.word	0x20000508

08007e34 <osThreadSuspend>:
  }

  return (stat);
}

osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b088      	sub	sp, #32
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e40:	f3ef 8305 	mrs	r3, IPSR
 8007e44:	617b      	str	r3, [r7, #20]
  return(result);
 8007e46:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d10f      	bne.n	8007e6c <osThreadSuspend+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e4c:	f3ef 8310 	mrs	r3, PRIMASK
 8007e50:	613b      	str	r3, [r7, #16]
  return(result);
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d109      	bne.n	8007e6c <osThreadSuspend+0x38>
 8007e58:	4b0f      	ldr	r3, [pc, #60]	; (8007e98 <osThreadSuspend+0x64>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d109      	bne.n	8007e74 <osThreadSuspend+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007e60:	f3ef 8311 	mrs	r3, BASEPRI
 8007e64:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d003      	beq.n	8007e74 <osThreadSuspend+0x40>
    stat = osErrorISR;
 8007e6c:	f06f 0305 	mvn.w	r3, #5
 8007e70:	61fb      	str	r3, [r7, #28]
 8007e72:	e00b      	b.n	8007e8c <osThreadSuspend+0x58>
  }
  else if (hTask == NULL) {
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d103      	bne.n	8007e82 <osThreadSuspend+0x4e>
    stat = osErrorParameter;
 8007e7a:	f06f 0303 	mvn.w	r3, #3
 8007e7e:	61fb      	str	r3, [r7, #28]
 8007e80:	e004      	b.n	8007e8c <osThreadSuspend+0x58>
  }
  else {
    stat = osOK;
 8007e82:	2300      	movs	r3, #0
 8007e84:	61fb      	str	r3, [r7, #28]
    vTaskSuspend (hTask);
 8007e86:	69b8      	ldr	r0, [r7, #24]
 8007e88:	f001 fbac 	bl	80095e4 <vTaskSuspend>
  }

  return (stat);
 8007e8c:	69fb      	ldr	r3, [r7, #28]
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3720      	adds	r7, #32
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
 8007e96:	bf00      	nop
 8007e98:	20000508 	.word	0x20000508

08007e9c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b086      	sub	sp, #24
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007ea4:	f3ef 8305 	mrs	r3, IPSR
 8007ea8:	613b      	str	r3, [r7, #16]
  return(result);
 8007eaa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10f      	bne.n	8007ed0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8007eb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d109      	bne.n	8007ed0 <osDelay+0x34>
 8007ebc:	4b0d      	ldr	r3, [pc, #52]	; (8007ef4 <osDelay+0x58>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	d109      	bne.n	8007ed8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007ec4:	f3ef 8311 	mrs	r3, BASEPRI
 8007ec8:	60bb      	str	r3, [r7, #8]
  return(result);
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d003      	beq.n	8007ed8 <osDelay+0x3c>
    stat = osErrorISR;
 8007ed0:	f06f 0305 	mvn.w	r3, #5
 8007ed4:	617b      	str	r3, [r7, #20]
 8007ed6:	e007      	b.n	8007ee8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8007ed8:	2300      	movs	r3, #0
 8007eda:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d002      	beq.n	8007ee8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f001 fb4a 	bl	800957c <vTaskDelay>
    }
  }

  return (stat);
 8007ee8:	697b      	ldr	r3, [r7, #20]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3718      	adds	r7, #24
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	20000508 	.word	0x20000508

08007ef8 <osEventFlagsNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b088      	sub	sp, #32
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8007f00:	2300      	movs	r3, #0
 8007f02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f04:	f3ef 8305 	mrs	r3, IPSR
 8007f08:	617b      	str	r3, [r7, #20]
  return(result);
 8007f0a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ()) {
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d13d      	bne.n	8007f8c <osEventFlagsNew+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f10:	f3ef 8310 	mrs	r3, PRIMASK
 8007f14:	613b      	str	r3, [r7, #16]
  return(result);
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d137      	bne.n	8007f8c <osEventFlagsNew+0x94>
 8007f1c:	4b1e      	ldr	r3, [pc, #120]	; (8007f98 <osEventFlagsNew+0xa0>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2b02      	cmp	r3, #2
 8007f22:	d105      	bne.n	8007f30 <osEventFlagsNew+0x38>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007f24:	f3ef 8311 	mrs	r3, BASEPRI
 8007f28:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d12d      	bne.n	8007f8c <osEventFlagsNew+0x94>
    mem = -1;
 8007f30:	f04f 33ff 	mov.w	r3, #4294967295
 8007f34:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d015      	beq.n	8007f68 <osEventFlagsNew+0x70>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d006      	beq.n	8007f52 <osEventFlagsNew+0x5a>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	2b1f      	cmp	r3, #31
 8007f4a:	d902      	bls.n	8007f52 <osEventFlagsNew+0x5a>
        mem = 1;
 8007f4c:	2301      	movs	r3, #1
 8007f4e:	61bb      	str	r3, [r7, #24]
 8007f50:	e00c      	b.n	8007f6c <osEventFlagsNew+0x74>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	689b      	ldr	r3, [r3, #8]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d108      	bne.n	8007f6c <osEventFlagsNew+0x74>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	68db      	ldr	r3, [r3, #12]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d104      	bne.n	8007f6c <osEventFlagsNew+0x74>
          mem = 0;
 8007f62:	2300      	movs	r3, #0
 8007f64:	61bb      	str	r3, [r7, #24]
 8007f66:	e001      	b.n	8007f6c <osEventFlagsNew+0x74>
        }
      }
    }
    else {
      mem = 0;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d106      	bne.n	8007f80 <osEventFlagsNew+0x88>
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	4618      	mov	r0, r3
 8007f78:	f000 f9ae 	bl	80082d8 <xEventGroupCreateStatic>
 8007f7c:	61f8      	str	r0, [r7, #28]
 8007f7e:	e005      	b.n	8007f8c <osEventFlagsNew+0x94>
    }
    else {
      if (mem == 0) {
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d102      	bne.n	8007f8c <osEventFlagsNew+0x94>
        hEventGroup = xEventGroupCreate();
 8007f86:	f000 f9de 	bl	8008346 <xEventGroupCreate>
 8007f8a:	61f8      	str	r0, [r7, #28]
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8007f8c:	69fb      	ldr	r3, [r7, #28]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3720      	adds	r7, #32
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	20000508 	.word	0x20000508

08007f9c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b088      	sub	sp, #32
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
 8007fa4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8007faa:	69bb      	ldr	r3, [r7, #24]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d004      	beq.n	8007fba <osEventFlagsSet+0x1e>
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d003      	beq.n	8007fc2 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8007fba:	f06f 0303 	mvn.w	r3, #3
 8007fbe:	61fb      	str	r3, [r7, #28]
 8007fc0:	e03a      	b.n	8008038 <osEventFlagsSet+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fc2:	f3ef 8305 	mrs	r3, IPSR
 8007fc6:	617b      	str	r3, [r7, #20]
  return(result);
 8007fc8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d10f      	bne.n	8007fee <osEventFlagsSet+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fce:	f3ef 8310 	mrs	r3, PRIMASK
 8007fd2:	613b      	str	r3, [r7, #16]
  return(result);
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d109      	bne.n	8007fee <osEventFlagsSet+0x52>
 8007fda:	4b1a      	ldr	r3, [pc, #104]	; (8008044 <osEventFlagsSet+0xa8>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	d123      	bne.n	800802a <osEventFlagsSet+0x8e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8007fe2:	f3ef 8311 	mrs	r3, BASEPRI
 8007fe6:	60fb      	str	r3, [r7, #12]
  return(result);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d01d      	beq.n	800802a <osEventFlagsSet+0x8e>
    yield = pdFALSE;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8007ff2:	f107 0308 	add.w	r3, r7, #8
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	6839      	ldr	r1, [r7, #0]
 8007ffa:	69b8      	ldr	r0, [r7, #24]
 8007ffc:	f000 fad4 	bl	80085a8 <xEventGroupSetBitsFromISR>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d003      	beq.n	800800e <osEventFlagsSet+0x72>
      rflags = (uint32_t)osErrorResource;
 8008006:	f06f 0302 	mvn.w	r3, #2
 800800a:	61fb      	str	r3, [r7, #28]
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 800800c:	e013      	b.n	8008036 <osEventFlagsSet+0x9a>
    } else {
      rflags = flags;
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	61fb      	str	r3, [r7, #28]
      portYIELD_FROM_ISR (yield);
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d00e      	beq.n	8008036 <osEventFlagsSet+0x9a>
 8008018:	4b0b      	ldr	r3, [pc, #44]	; (8008048 <osEventFlagsSet+0xac>)
 800801a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800801e:	601a      	str	r2, [r3, #0]
 8008020:	f3bf 8f4f 	dsb	sy
 8008024:	f3bf 8f6f 	isb	sy
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8008028:	e005      	b.n	8008036 <osEventFlagsSet+0x9a>
    }
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800802a:	6839      	ldr	r1, [r7, #0]
 800802c:	69b8      	ldr	r0, [r7, #24]
 800802e:	f000 fa15 	bl	800845c <xEventGroupSetBits>
 8008032:	61f8      	str	r0, [r7, #28]
 8008034:	e000      	b.n	8008038 <osEventFlagsSet+0x9c>
    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) != pdFAIL) {
 8008036:	bf00      	nop
  }

  return (rflags);
 8008038:	69fb      	ldr	r3, [r7, #28]
}
 800803a:	4618      	mov	r0, r3
 800803c:	3720      	adds	r7, #32
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
 8008042:	bf00      	nop
 8008044:	20000508 	.word	0x20000508
 8008048:	e000ed04 	.word	0xe000ed04

0800804c <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 800804c:	b580      	push	{r7, lr}
 800804e:	b088      	sub	sp, #32
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d004      	beq.n	800806a <osEventFlagsClear+0x1e>
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008066:	2b00      	cmp	r3, #0
 8008068:	d003      	beq.n	8008072 <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 800806a:	f06f 0303 	mvn.w	r3, #3
 800806e:	61fb      	str	r3, [r7, #28]
 8008070:	e029      	b.n	80080c6 <osEventFlagsClear+0x7a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008072:	f3ef 8305 	mrs	r3, IPSR
 8008076:	617b      	str	r3, [r7, #20]
  return(result);
 8008078:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800807a:	2b00      	cmp	r3, #0
 800807c:	d10f      	bne.n	800809e <osEventFlagsClear+0x52>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800807e:	f3ef 8310 	mrs	r3, PRIMASK
 8008082:	613b      	str	r3, [r7, #16]
  return(result);
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d109      	bne.n	800809e <osEventFlagsClear+0x52>
 800808a:	4b11      	ldr	r3, [pc, #68]	; (80080d0 <osEventFlagsClear+0x84>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	2b02      	cmp	r3, #2
 8008090:	d114      	bne.n	80080bc <osEventFlagsClear+0x70>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008092:	f3ef 8311 	mrs	r3, BASEPRI
 8008096:	60fb      	str	r3, [r7, #12]
  return(result);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d00e      	beq.n	80080bc <osEventFlagsClear+0x70>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 800809e:	69b8      	ldr	r0, [r7, #24]
 80080a0:	f000 f9b8 	bl	8008414 <xEventGroupGetBitsFromISR>
 80080a4:	61f8      	str	r0, [r7, #28]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80080a6:	6839      	ldr	r1, [r7, #0]
 80080a8:	69b8      	ldr	r0, [r7, #24]
 80080aa:	f000 f99f 	bl	80083ec <xEventGroupClearBitsFromISR>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d108      	bne.n	80080c6 <osEventFlagsClear+0x7a>
      rflags = (uint32_t)osErrorResource;
 80080b4:	f06f 0302 	mvn.w	r3, #2
 80080b8:	61fb      	str	r3, [r7, #28]
    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 80080ba:	e004      	b.n	80080c6 <osEventFlagsClear+0x7a>
    }
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 80080bc:	6839      	ldr	r1, [r7, #0]
 80080be:	69b8      	ldr	r0, [r7, #24]
 80080c0:	f000 f95b 	bl	800837a <xEventGroupClearBits>
 80080c4:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 80080c6:	69fb      	ldr	r3, [r7, #28]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3720      	adds	r7, #32
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	20000508 	.word	0x20000508

080080d4 <osEventFlagsGet>:

uint32_t osEventFlagsGet (osEventFlagsId_t ef_id) {
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b088      	sub	sp, #32
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	61bb      	str	r3, [r7, #24]
  uint32_t rflags;

  if (ef_id == NULL) {
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d102      	bne.n	80080ec <osEventFlagsGet+0x18>
    rflags = 0U;
 80080e6:	2300      	movs	r3, #0
 80080e8:	61fb      	str	r3, [r7, #28]
 80080ea:	e01f      	b.n	800812c <osEventFlagsGet+0x58>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080ec:	f3ef 8305 	mrs	r3, IPSR
 80080f0:	617b      	str	r3, [r7, #20]
  return(result);
 80080f2:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d10f      	bne.n	8008118 <osEventFlagsGet+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080f8:	f3ef 8310 	mrs	r3, PRIMASK
 80080fc:	613b      	str	r3, [r7, #16]
  return(result);
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d109      	bne.n	8008118 <osEventFlagsGet+0x44>
 8008104:	4b0c      	ldr	r3, [pc, #48]	; (8008138 <osEventFlagsGet+0x64>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2b02      	cmp	r3, #2
 800810a:	d10a      	bne.n	8008122 <osEventFlagsGet+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800810c:	f3ef 8311 	mrs	r3, BASEPRI
 8008110:	60fb      	str	r3, [r7, #12]
  return(result);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d004      	beq.n	8008122 <osEventFlagsGet+0x4e>
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 8008118:	69b8      	ldr	r0, [r7, #24]
 800811a:	f000 f97b 	bl	8008414 <xEventGroupGetBitsFromISR>
 800811e:	61f8      	str	r0, [r7, #28]
 8008120:	e004      	b.n	800812c <osEventFlagsGet+0x58>
  }
  else {
    rflags = xEventGroupGetBits (hEventGroup);
 8008122:	2100      	movs	r1, #0
 8008124:	69b8      	ldr	r0, [r7, #24]
 8008126:	f000 f928 	bl	800837a <xEventGroupClearBits>
 800812a:	61f8      	str	r0, [r7, #28]
  }

  return (rflags);
 800812c:	69fb      	ldr	r3, [r7, #28]
}
 800812e:	4618      	mov	r0, r3
 8008130:	3720      	adds	r7, #32
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	20000508 	.word	0x20000508

0800813c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800813c:	b580      	push	{r7, lr}
 800813e:	b08a      	sub	sp, #40	; 0x28
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008144:	2300      	movs	r3, #0
 8008146:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008148:	f3ef 8305 	mrs	r3, IPSR
 800814c:	613b      	str	r3, [r7, #16]
  return(result);
 800814e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8008150:	2b00      	cmp	r3, #0
 8008152:	f040 8085 	bne.w	8008260 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008156:	f3ef 8310 	mrs	r3, PRIMASK
 800815a:	60fb      	str	r3, [r7, #12]
  return(result);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d17e      	bne.n	8008260 <osMutexNew+0x124>
 8008162:	4b42      	ldr	r3, [pc, #264]	; (800826c <osMutexNew+0x130>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2b02      	cmp	r3, #2
 8008168:	d105      	bne.n	8008176 <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800816a:	f3ef 8311 	mrs	r3, BASEPRI
 800816e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d174      	bne.n	8008260 <osMutexNew+0x124>
    if (attr != NULL) {
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d003      	beq.n	8008184 <osMutexNew+0x48>
      type = attr->attr_bits;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	623b      	str	r3, [r7, #32]
 8008182:	e001      	b.n	8008188 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8008184:	2300      	movs	r3, #0
 8008186:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008188:	6a3b      	ldr	r3, [r7, #32]
 800818a:	f003 0301 	and.w	r3, r3, #1
 800818e:	2b00      	cmp	r3, #0
 8008190:	d002      	beq.n	8008198 <osMutexNew+0x5c>
      rmtx = 1U;
 8008192:	2301      	movs	r3, #1
 8008194:	61fb      	str	r3, [r7, #28]
 8008196:	e001      	b.n	800819c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8008198:	2300      	movs	r3, #0
 800819a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800819c:	6a3b      	ldr	r3, [r7, #32]
 800819e:	f003 0308 	and.w	r3, r3, #8
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d15c      	bne.n	8008260 <osMutexNew+0x124>
      mem = -1;
 80081a6:	f04f 33ff 	mov.w	r3, #4294967295
 80081aa:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d015      	beq.n	80081de <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d006      	beq.n	80081c8 <osMutexNew+0x8c>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	2b4f      	cmp	r3, #79	; 0x4f
 80081c0:	d902      	bls.n	80081c8 <osMutexNew+0x8c>
          mem = 1;
 80081c2:	2301      	movs	r3, #1
 80081c4:	61bb      	str	r3, [r7, #24]
 80081c6:	e00c      	b.n	80081e2 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d108      	bne.n	80081e2 <osMutexNew+0xa6>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d104      	bne.n	80081e2 <osMutexNew+0xa6>
            mem = 0;
 80081d8:	2300      	movs	r3, #0
 80081da:	61bb      	str	r3, [r7, #24]
 80081dc:	e001      	b.n	80081e2 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80081de:	2300      	movs	r3, #0
 80081e0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80081e2:	69bb      	ldr	r3, [r7, #24]
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d112      	bne.n	800820e <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d007      	beq.n	80081fe <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	4619      	mov	r1, r3
 80081f4:	2004      	movs	r0, #4
 80081f6:	f000 fc11 	bl	8008a1c <xQueueCreateMutexStatic>
 80081fa:	6278      	str	r0, [r7, #36]	; 0x24
 80081fc:	e016      	b.n	800822c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	4619      	mov	r1, r3
 8008204:	2001      	movs	r0, #1
 8008206:	f000 fc09 	bl	8008a1c <xQueueCreateMutexStatic>
 800820a:	6278      	str	r0, [r7, #36]	; 0x24
 800820c:	e00e      	b.n	800822c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800820e:	69bb      	ldr	r3, [r7, #24]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d10b      	bne.n	800822c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d004      	beq.n	8008224 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800821a:	2004      	movs	r0, #4
 800821c:	f000 fbe6 	bl	80089ec <xQueueCreateMutex>
 8008220:	6278      	str	r0, [r7, #36]	; 0x24
 8008222:	e003      	b.n	800822c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8008224:	2001      	movs	r0, #1
 8008226:	f000 fbe1 	bl	80089ec <xQueueCreateMutex>
 800822a:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800822c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00c      	beq.n	800824c <osMutexNew+0x110>
        if (attr != NULL) {
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d003      	beq.n	8008240 <osMutexNew+0x104>
          name = attr->name;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	617b      	str	r3, [r7, #20]
 800823e:	e001      	b.n	8008244 <osMutexNew+0x108>
        } else {
          name = NULL;
 8008240:	2300      	movs	r3, #0
 8008242:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8008244:	6979      	ldr	r1, [r7, #20]
 8008246:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008248:	f000 ff8a 	bl	8009160 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800824c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824e:	2b00      	cmp	r3, #0
 8008250:	d006      	beq.n	8008260 <osMutexNew+0x124>
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d003      	beq.n	8008260 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825a:	f043 0301 	orr.w	r3, r3, #1
 800825e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008262:	4618      	mov	r0, r3
 8008264:	3728      	adds	r7, #40	; 0x28
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	20000508 	.word	0x20000508

08008270 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	60f8      	str	r0, [r7, #12]
 8008278:	60b9      	str	r1, [r7, #8]
 800827a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	4a07      	ldr	r2, [pc, #28]	; (800829c <vApplicationGetIdleTaskMemory+0x2c>)
 8008280:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	4a06      	ldr	r2, [pc, #24]	; (80082a0 <vApplicationGetIdleTaskMemory+0x30>)
 8008286:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2280      	movs	r2, #128	; 0x80
 800828c:	601a      	str	r2, [r3, #0]
}
 800828e:	bf00      	nop
 8008290:	3714      	adds	r7, #20
 8008292:	46bd      	mov	sp, r7
 8008294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008298:	4770      	bx	lr
 800829a:	bf00      	nop
 800829c:	2000050c 	.word	0x2000050c
 80082a0:	200005b8 	.word	0x200005b8

080082a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	60f8      	str	r0, [r7, #12]
 80082ac:	60b9      	str	r1, [r7, #8]
 80082ae:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	4a07      	ldr	r2, [pc, #28]	; (80082d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80082b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	4a06      	ldr	r2, [pc, #24]	; (80082d4 <vApplicationGetTimerTaskMemory+0x30>)
 80082ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082c2:	601a      	str	r2, [r3, #0]
}
 80082c4:	bf00      	nop
 80082c6:	3714      	adds	r7, #20
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr
 80082d0:	200007b8 	.word	0x200007b8
 80082d4:	20000864 	.word	0x20000864

080082d8 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b086      	sub	sp, #24
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d10a      	bne.n	80082fc <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80082e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ea:	f383 8811 	msr	BASEPRI, r3
 80082ee:	f3bf 8f6f 	isb	sy
 80082f2:	f3bf 8f4f 	dsb	sy
 80082f6:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80082f8:	bf00      	nop
 80082fa:	e7fe      	b.n	80082fa <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80082fc:	2320      	movs	r3, #32
 80082fe:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	2b20      	cmp	r3, #32
 8008304:	d00a      	beq.n	800831c <xEventGroupCreateStatic+0x44>
	__asm volatile
 8008306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830a:	f383 8811 	msr	BASEPRI, r3
 800830e:	f3bf 8f6f 	isb	sy
 8008312:	f3bf 8f4f 	dsb	sy
 8008316:	60fb      	str	r3, [r7, #12]
}
 8008318:	bf00      	nop
 800831a:	e7fe      	b.n	800831a <xEventGroupCreateStatic+0x42>
		}
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 EventGroup_t and StaticEventGroup_t are guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00a      	beq.n	800833c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8008326:	697b      	ldr	r3, [r7, #20]
 8008328:	2200      	movs	r2, #0
 800832a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	3304      	adds	r3, #4
 8008330:	4618      	mov	r0, r3
 8008332:	f000 f94d 	bl	80085d0 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	2201      	movs	r2, #1
 800833a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 800833c:	697b      	ldr	r3, [r7, #20]
	}
 800833e:	4618      	mov	r0, r3
 8008340:	3718      	adds	r7, #24
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8008346:	b580      	push	{r7, lr}
 8008348:	b082      	sub	sp, #8
 800834a:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 800834c:	2020      	movs	r0, #32
 800834e:	f002 fcfb 	bl	800ad48 <pvPortMalloc>
 8008352:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d00a      	beq.n	8008370 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	3304      	adds	r3, #4
 8008364:	4618      	mov	r0, r3
 8008366:	f000 f933 	bl	80085d0 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2200      	movs	r2, #0
 800836e:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 8008370:	687b      	ldr	r3, [r7, #4]
	}
 8008372:	4618      	mov	r0, r3
 8008374:	3708      	adds	r7, #8
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}

0800837a <xEventGroupClearBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 800837a:	b580      	push	{r7, lr}
 800837c:	b086      	sub	sp, #24
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
 8008382:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d10a      	bne.n	80083a4 <xEventGroupClearBits+0x2a>
	__asm volatile
 800838e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008392:	f383 8811 	msr	BASEPRI, r3
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	f3bf 8f4f 	dsb	sy
 800839e:	60fb      	str	r3, [r7, #12]
}
 80083a0:	bf00      	nop
 80083a2:	e7fe      	b.n	80083a2 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d00a      	beq.n	80083c4 <xEventGroupClearBits+0x4a>
	__asm volatile
 80083ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083b2:	f383 8811 	msr	BASEPRI, r3
 80083b6:	f3bf 8f6f 	isb	sy
 80083ba:	f3bf 8f4f 	dsb	sy
 80083be:	60bb      	str	r3, [r7, #8]
}
 80083c0:	bf00      	nop
 80083c2:	e7fe      	b.n	80083c2 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 80083c4:	f002 fb9e 	bl	800ab04 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	43db      	mvns	r3, r3
 80083d6:	401a      	ands	r2, r3
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 80083dc:	f002 fbc2 	bl	800ab64 <vPortExitCritical>

	return uxReturn;
 80083e0:	693b      	ldr	r3, [r7, #16]
}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3718      	adds	r7, #24
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
	...

080083ec <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b084      	sub	sp, #16
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL );
 80083f6:	2300      	movs	r3, #0
 80083f8:	683a      	ldr	r2, [r7, #0]
 80083fa:	6879      	ldr	r1, [r7, #4]
 80083fc:	4804      	ldr	r0, [pc, #16]	; (8008410 <xEventGroupClearBitsFromISR+0x24>)
 80083fe:	f002 fa31 	bl	800a864 <xTimerPendFunctionCallFromISR>
 8008402:	60f8      	str	r0, [r7, #12]

		return xReturn;
 8008404:	68fb      	ldr	r3, [r7, #12]
	}
 8008406:	4618      	mov	r0, r3
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
 800840e:	bf00      	nop
 8008410:	0800858d 	.word	0x0800858d

08008414 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 8008414:	b480      	push	{r7}
 8008416:	b089      	sub	sp, #36	; 0x24
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008420:	f3ef 8211 	mrs	r2, BASEPRI
 8008424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008428:	f383 8811 	msr	BASEPRI, r3
 800842c:	f3bf 8f6f 	isb	sy
 8008430:	f3bf 8f4f 	dsb	sy
 8008434:	60fa      	str	r2, [r7, #12]
 8008436:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008438:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800843a:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	617b      	str	r3, [r7, #20]
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800844c:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 800844e:	697b      	ldr	r3, [r7, #20]
}
 8008450:	4618      	mov	r0, r3
 8008452:	3724      	adds	r7, #36	; 0x24
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b08e      	sub	sp, #56	; 0x38
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8008466:	2300      	movs	r3, #0
 8008468:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800846e:	2300      	movs	r3, #0
 8008470:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d10a      	bne.n	800848e <xEventGroupSetBits+0x32>
	__asm volatile
 8008478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847c:	f383 8811 	msr	BASEPRI, r3
 8008480:	f3bf 8f6f 	isb	sy
 8008484:	f3bf 8f4f 	dsb	sy
 8008488:	613b      	str	r3, [r7, #16]
}
 800848a:	bf00      	nop
 800848c:	e7fe      	b.n	800848c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d00a      	beq.n	80084ae <xEventGroupSetBits+0x52>
	__asm volatile
 8008498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849c:	f383 8811 	msr	BASEPRI, r3
 80084a0:	f3bf 8f6f 	isb	sy
 80084a4:	f3bf 8f4f 	dsb	sy
 80084a8:	60fb      	str	r3, [r7, #12]
}
 80084aa:	bf00      	nop
 80084ac:	e7fe      	b.n	80084ac <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80084ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084b0:	3304      	adds	r3, #4
 80084b2:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b6:	3308      	adds	r3, #8
 80084b8:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80084ba:	f001 f979 	bl	80097b0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80084be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80084c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	431a      	orrs	r2, r3
 80084cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084ce:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80084d0:	e03c      	b.n	800854c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80084d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80084d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80084de:	2300      	movs	r3, #0
 80084e0:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80084e2:	69bb      	ldr	r3, [r7, #24]
 80084e4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80084e8:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80084f0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d108      	bne.n	800850e <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80084fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	69bb      	ldr	r3, [r7, #24]
 8008502:	4013      	ands	r3, r2
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00b      	beq.n	8008520 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8008508:	2301      	movs	r3, #1
 800850a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800850c:	e008      	b.n	8008520 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800850e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	69bb      	ldr	r3, [r7, #24]
 8008514:	4013      	ands	r3, r2
 8008516:	69ba      	ldr	r2, [r7, #24]
 8008518:	429a      	cmp	r2, r3
 800851a:	d101      	bne.n	8008520 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800851c:	2301      	movs	r3, #1
 800851e:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8008520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008522:	2b00      	cmp	r3, #0
 8008524:	d010      	beq.n	8008548 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800852c:	2b00      	cmp	r3, #0
 800852e:	d003      	beq.n	8008538 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8008530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008532:	69bb      	ldr	r3, [r7, #24]
 8008534:	4313      	orrs	r3, r2
 8008536:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8008538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008540:	4619      	mov	r1, r3
 8008542:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8008544:	f001 fbc6 	bl	8009cd4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8008548:	69fb      	ldr	r3, [r7, #28]
 800854a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800854c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800854e:	6a3b      	ldr	r3, [r7, #32]
 8008550:	429a      	cmp	r2, r3
 8008552:	d1be      	bne.n	80084d2 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8008554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855a:	43db      	mvns	r3, r3
 800855c:	401a      	ands	r2, r3
 800855e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008560:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8008562:	f001 f933 	bl	80097cc <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8008566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008568:	681b      	ldr	r3, [r3, #0]
}
 800856a:	4618      	mov	r0, r3
 800856c:	3738      	adds	r7, #56	; 0x38
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8008572:	b580      	push	{r7, lr}
 8008574:	b082      	sub	sp, #8
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
 800857a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet );
 800857c:	6839      	ldr	r1, [r7, #0]
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f7ff ff6c 	bl	800845c <xEventGroupSetBits>
}
 8008584:	bf00      	nop
 8008586:	3708      	adds	r7, #8
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
 8008596:	6839      	ldr	r1, [r7, #0]
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f7ff feee 	bl	800837a <xEventGroupClearBits>
}
 800859e:	bf00      	nop
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
	...

080085a8 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b086      	sub	sp, #24
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	60f8      	str	r0, [r7, #12]
 80085b0:	60b9      	str	r1, [r7, #8]
 80085b2:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken );
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	68f9      	ldr	r1, [r7, #12]
 80085ba:	4804      	ldr	r0, [pc, #16]	; (80085cc <xEventGroupSetBitsFromISR+0x24>)
 80085bc:	f002 f952 	bl	800a864 <xTimerPendFunctionCallFromISR>
 80085c0:	6178      	str	r0, [r7, #20]

		return xReturn;
 80085c2:	697b      	ldr	r3, [r7, #20]
	}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3718      	adds	r7, #24
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	08008573 	.word	0x08008573

080085d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80085d0:	b480      	push	{r7}
 80085d2:	b083      	sub	sp, #12
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f103 0208 	add.w	r2, r3, #8
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f04f 32ff 	mov.w	r2, #4294967295
 80085e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f103 0208 	add.w	r2, r3, #8
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	f103 0208 	add.w	r2, r3, #8
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008604:	bf00      	nop
 8008606:	370c      	adds	r7, #12
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr

08008610 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800861e:	bf00      	nop
 8008620:	370c      	adds	r7, #12
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr

0800862a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800862a:	b480      	push	{r7}
 800862c:	b085      	sub	sp, #20
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
 8008632:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	689a      	ldr	r2, [r3, #8]
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	683a      	ldr	r2, [r7, #0]
 800864e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	683a      	ldr	r2, [r7, #0]
 8008654:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	1c5a      	adds	r2, r3, #1
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	601a      	str	r2, [r3, #0]
}
 8008666:	bf00      	nop
 8008668:	3714      	adds	r7, #20
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr

08008672 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008672:	b480      	push	{r7}
 8008674:	b085      	sub	sp, #20
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
 800867a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008688:	d103      	bne.n	8008692 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	60fb      	str	r3, [r7, #12]
 8008690:	e00c      	b.n	80086ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	3308      	adds	r3, #8
 8008696:	60fb      	str	r3, [r7, #12]
 8008698:	e002      	b.n	80086a0 <vListInsert+0x2e>
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	60fb      	str	r3, [r7, #12]
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	68ba      	ldr	r2, [r7, #8]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d2f6      	bcs.n	800869a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	685a      	ldr	r2, [r3, #4]
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	683a      	ldr	r2, [r7, #0]
 80086ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	68fa      	ldr	r2, [r7, #12]
 80086c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	683a      	ldr	r2, [r7, #0]
 80086c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	687a      	ldr	r2, [r7, #4]
 80086cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	1c5a      	adds	r2, r3, #1
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	601a      	str	r2, [r3, #0]
}
 80086d8:	bf00      	nop
 80086da:	3714      	adds	r7, #20
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80086e4:	b480      	push	{r7}
 80086e6:	b085      	sub	sp, #20
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	6892      	ldr	r2, [r2, #8]
 80086fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	6852      	ldr	r2, [r2, #4]
 8008704:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	429a      	cmp	r2, r3
 800870e:	d103      	bne.n	8008718 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	689a      	ldr	r2, [r3, #8]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	1e5a      	subs	r2, r3, #1
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
}
 800872c:	4618      	mov	r0, r3
 800872e:	3714      	adds	r7, #20
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr

08008738 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d10a      	bne.n	8008762 <xQueueGenericReset+0x2a>
	__asm volatile
 800874c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008750:	f383 8811 	msr	BASEPRI, r3
 8008754:	f3bf 8f6f 	isb	sy
 8008758:	f3bf 8f4f 	dsb	sy
 800875c:	60bb      	str	r3, [r7, #8]
}
 800875e:	bf00      	nop
 8008760:	e7fe      	b.n	8008760 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008762:	f002 f9cf 	bl	800ab04 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681a      	ldr	r2, [r3, #0]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800876e:	68f9      	ldr	r1, [r7, #12]
 8008770:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008772:	fb01 f303 	mul.w	r3, r1, r3
 8008776:	441a      	add	r2, r3
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	2200      	movs	r2, #0
 8008780:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008792:	3b01      	subs	r3, #1
 8008794:	68f9      	ldr	r1, [r7, #12]
 8008796:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008798:	fb01 f303 	mul.w	r3, r1, r3
 800879c:	441a      	add	r2, r3
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	22ff      	movs	r2, #255	; 0xff
 80087a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	22ff      	movs	r2, #255	; 0xff
 80087ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d114      	bne.n	80087e2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	691b      	ldr	r3, [r3, #16]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d01a      	beq.n	80087f6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	3310      	adds	r3, #16
 80087c4:	4618      	mov	r0, r3
 80087c6:	f001 fa21 	bl	8009c0c <xTaskRemoveFromEventList>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d012      	beq.n	80087f6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80087d0:	4b0c      	ldr	r3, [pc, #48]	; (8008804 <xQueueGenericReset+0xcc>)
 80087d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087d6:	601a      	str	r2, [r3, #0]
 80087d8:	f3bf 8f4f 	dsb	sy
 80087dc:	f3bf 8f6f 	isb	sy
 80087e0:	e009      	b.n	80087f6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	3310      	adds	r3, #16
 80087e6:	4618      	mov	r0, r3
 80087e8:	f7ff fef2 	bl	80085d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	3324      	adds	r3, #36	; 0x24
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7ff feed 	bl	80085d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80087f6:	f002 f9b5 	bl	800ab64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80087fa:	2301      	movs	r3, #1
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3710      	adds	r7, #16
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}
 8008804:	e000ed04 	.word	0xe000ed04

08008808 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008808:	b580      	push	{r7, lr}
 800880a:	b08e      	sub	sp, #56	; 0x38
 800880c:	af02      	add	r7, sp, #8
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	607a      	str	r2, [r7, #4]
 8008814:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d10a      	bne.n	8008832 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800881c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008820:	f383 8811 	msr	BASEPRI, r3
 8008824:	f3bf 8f6f 	isb	sy
 8008828:	f3bf 8f4f 	dsb	sy
 800882c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800882e:	bf00      	nop
 8008830:	e7fe      	b.n	8008830 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d10a      	bne.n	800884e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800883c:	f383 8811 	msr	BASEPRI, r3
 8008840:	f3bf 8f6f 	isb	sy
 8008844:	f3bf 8f4f 	dsb	sy
 8008848:	627b      	str	r3, [r7, #36]	; 0x24
}
 800884a:	bf00      	nop
 800884c:	e7fe      	b.n	800884c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d002      	beq.n	800885a <xQueueGenericCreateStatic+0x52>
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d001      	beq.n	800885e <xQueueGenericCreateStatic+0x56>
 800885a:	2301      	movs	r3, #1
 800885c:	e000      	b.n	8008860 <xQueueGenericCreateStatic+0x58>
 800885e:	2300      	movs	r3, #0
 8008860:	2b00      	cmp	r3, #0
 8008862:	d10a      	bne.n	800887a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008868:	f383 8811 	msr	BASEPRI, r3
 800886c:	f3bf 8f6f 	isb	sy
 8008870:	f3bf 8f4f 	dsb	sy
 8008874:	623b      	str	r3, [r7, #32]
}
 8008876:	bf00      	nop
 8008878:	e7fe      	b.n	8008878 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d102      	bne.n	8008886 <xQueueGenericCreateStatic+0x7e>
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d101      	bne.n	800888a <xQueueGenericCreateStatic+0x82>
 8008886:	2301      	movs	r3, #1
 8008888:	e000      	b.n	800888c <xQueueGenericCreateStatic+0x84>
 800888a:	2300      	movs	r3, #0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d10a      	bne.n	80088a6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008894:	f383 8811 	msr	BASEPRI, r3
 8008898:	f3bf 8f6f 	isb	sy
 800889c:	f3bf 8f4f 	dsb	sy
 80088a0:	61fb      	str	r3, [r7, #28]
}
 80088a2:	bf00      	nop
 80088a4:	e7fe      	b.n	80088a4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80088a6:	2350      	movs	r3, #80	; 0x50
 80088a8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	2b50      	cmp	r3, #80	; 0x50
 80088ae:	d00a      	beq.n	80088c6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80088b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b4:	f383 8811 	msr	BASEPRI, r3
 80088b8:	f3bf 8f6f 	isb	sy
 80088bc:	f3bf 8f4f 	dsb	sy
 80088c0:	61bb      	str	r3, [r7, #24]
}
 80088c2:	bf00      	nop
 80088c4:	e7fe      	b.n	80088c4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80088ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d00d      	beq.n	80088ec <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80088d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088d2:	2201      	movs	r2, #1
 80088d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80088d8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80088dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088de:	9300      	str	r3, [sp, #0]
 80088e0:	4613      	mov	r3, r2
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	68b9      	ldr	r1, [r7, #8]
 80088e6:	68f8      	ldr	r0, [r7, #12]
 80088e8:	f000 f843 	bl	8008972 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80088ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3730      	adds	r7, #48	; 0x30
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b08a      	sub	sp, #40	; 0x28
 80088fa:	af02      	add	r7, sp, #8
 80088fc:	60f8      	str	r0, [r7, #12]
 80088fe:	60b9      	str	r1, [r7, #8]
 8008900:	4613      	mov	r3, r2
 8008902:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d10a      	bne.n	8008920 <xQueueGenericCreate+0x2a>
	__asm volatile
 800890a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800890e:	f383 8811 	msr	BASEPRI, r3
 8008912:	f3bf 8f6f 	isb	sy
 8008916:	f3bf 8f4f 	dsb	sy
 800891a:	613b      	str	r3, [r7, #16]
}
 800891c:	bf00      	nop
 800891e:	e7fe      	b.n	800891e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d102      	bne.n	800892c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008926:	2300      	movs	r3, #0
 8008928:	61fb      	str	r3, [r7, #28]
 800892a:	e004      	b.n	8008936 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	68ba      	ldr	r2, [r7, #8]
 8008930:	fb02 f303 	mul.w	r3, r2, r3
 8008934:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008936:	69fb      	ldr	r3, [r7, #28]
 8008938:	3350      	adds	r3, #80	; 0x50
 800893a:	4618      	mov	r0, r3
 800893c:	f002 fa04 	bl	800ad48 <pvPortMalloc>
 8008940:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008942:	69bb      	ldr	r3, [r7, #24]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00f      	beq.n	8008968 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	3350      	adds	r3, #80	; 0x50
 800894c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800894e:	69bb      	ldr	r3, [r7, #24]
 8008950:	2200      	movs	r2, #0
 8008952:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008956:	79fa      	ldrb	r2, [r7, #7]
 8008958:	69bb      	ldr	r3, [r7, #24]
 800895a:	9300      	str	r3, [sp, #0]
 800895c:	4613      	mov	r3, r2
 800895e:	697a      	ldr	r2, [r7, #20]
 8008960:	68b9      	ldr	r1, [r7, #8]
 8008962:	68f8      	ldr	r0, [r7, #12]
 8008964:	f000 f805 	bl	8008972 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8008968:	69bb      	ldr	r3, [r7, #24]
	}
 800896a:	4618      	mov	r0, r3
 800896c:	3720      	adds	r7, #32
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}

08008972 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b084      	sub	sp, #16
 8008976:	af00      	add	r7, sp, #0
 8008978:	60f8      	str	r0, [r7, #12]
 800897a:	60b9      	str	r1, [r7, #8]
 800897c:	607a      	str	r2, [r7, #4]
 800897e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d103      	bne.n	800898e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	69ba      	ldr	r2, [r7, #24]
 800898a:	601a      	str	r2, [r3, #0]
 800898c:	e002      	b.n	8008994 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800898e:	69bb      	ldr	r3, [r7, #24]
 8008990:	687a      	ldr	r2, [r7, #4]
 8008992:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008994:	69bb      	ldr	r3, [r7, #24]
 8008996:	68fa      	ldr	r2, [r7, #12]
 8008998:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800899a:	69bb      	ldr	r3, [r7, #24]
 800899c:	68ba      	ldr	r2, [r7, #8]
 800899e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80089a0:	2101      	movs	r1, #1
 80089a2:	69b8      	ldr	r0, [r7, #24]
 80089a4:	f7ff fec8 	bl	8008738 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80089a8:	69bb      	ldr	r3, [r7, #24]
 80089aa:	78fa      	ldrb	r2, [r7, #3]
 80089ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80089b0:	bf00      	nop
 80089b2:	3710      	adds	r7, #16
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d00e      	beq.n	80089e4 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2200      	movs	r2, #0
 80089d6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80089d8:	2300      	movs	r3, #0
 80089da:	2200      	movs	r2, #0
 80089dc:	2100      	movs	r1, #0
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 f838 	bl	8008a54 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80089e4:	bf00      	nop
 80089e6:	3708      	adds	r7, #8
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b086      	sub	sp, #24
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	4603      	mov	r3, r0
 80089f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80089f6:	2301      	movs	r3, #1
 80089f8:	617b      	str	r3, [r7, #20]
 80089fa:	2300      	movs	r3, #0
 80089fc:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80089fe:	79fb      	ldrb	r3, [r7, #7]
 8008a00:	461a      	mov	r2, r3
 8008a02:	6939      	ldr	r1, [r7, #16]
 8008a04:	6978      	ldr	r0, [r7, #20]
 8008a06:	f7ff ff76 	bl	80088f6 <xQueueGenericCreate>
 8008a0a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8008a0c:	68f8      	ldr	r0, [r7, #12]
 8008a0e:	f7ff ffd3 	bl	80089b8 <prvInitialiseMutex>

		return pxNewQueue;
 8008a12:	68fb      	ldr	r3, [r7, #12]
	}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3718      	adds	r7, #24
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b088      	sub	sp, #32
 8008a20:	af02      	add	r7, sp, #8
 8008a22:	4603      	mov	r3, r0
 8008a24:	6039      	str	r1, [r7, #0]
 8008a26:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	617b      	str	r3, [r7, #20]
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8008a30:	79fb      	ldrb	r3, [r7, #7]
 8008a32:	9300      	str	r3, [sp, #0]
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	2200      	movs	r2, #0
 8008a38:	6939      	ldr	r1, [r7, #16]
 8008a3a:	6978      	ldr	r0, [r7, #20]
 8008a3c:	f7ff fee4 	bl	8008808 <xQueueGenericCreateStatic>
 8008a40:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8008a42:	68f8      	ldr	r0, [r7, #12]
 8008a44:	f7ff ffb8 	bl	80089b8 <prvInitialiseMutex>

		return pxNewQueue;
 8008a48:	68fb      	ldr	r3, [r7, #12]
	}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3718      	adds	r7, #24
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
	...

08008a54 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b08e      	sub	sp, #56	; 0x38
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	60f8      	str	r0, [r7, #12]
 8008a5c:	60b9      	str	r1, [r7, #8]
 8008a5e:	607a      	str	r2, [r7, #4]
 8008a60:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008a62:	2300      	movs	r3, #0
 8008a64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d10a      	bne.n	8008a86 <xQueueGenericSend+0x32>
	__asm volatile
 8008a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a74:	f383 8811 	msr	BASEPRI, r3
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008a82:	bf00      	nop
 8008a84:	e7fe      	b.n	8008a84 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d103      	bne.n	8008a94 <xQueueGenericSend+0x40>
 8008a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d101      	bne.n	8008a98 <xQueueGenericSend+0x44>
 8008a94:	2301      	movs	r3, #1
 8008a96:	e000      	b.n	8008a9a <xQueueGenericSend+0x46>
 8008a98:	2300      	movs	r3, #0
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10a      	bne.n	8008ab4 <xQueueGenericSend+0x60>
	__asm volatile
 8008a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa2:	f383 8811 	msr	BASEPRI, r3
 8008aa6:	f3bf 8f6f 	isb	sy
 8008aaa:	f3bf 8f4f 	dsb	sy
 8008aae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008ab0:	bf00      	nop
 8008ab2:	e7fe      	b.n	8008ab2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	d103      	bne.n	8008ac2 <xQueueGenericSend+0x6e>
 8008aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d101      	bne.n	8008ac6 <xQueueGenericSend+0x72>
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e000      	b.n	8008ac8 <xQueueGenericSend+0x74>
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d10a      	bne.n	8008ae2 <xQueueGenericSend+0x8e>
	__asm volatile
 8008acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad0:	f383 8811 	msr	BASEPRI, r3
 8008ad4:	f3bf 8f6f 	isb	sy
 8008ad8:	f3bf 8f4f 	dsb	sy
 8008adc:	623b      	str	r3, [r7, #32]
}
 8008ade:	bf00      	nop
 8008ae0:	e7fe      	b.n	8008ae0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008ae2:	f001 facd 	bl	800a080 <xTaskGetSchedulerState>
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d102      	bne.n	8008af2 <xQueueGenericSend+0x9e>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d101      	bne.n	8008af6 <xQueueGenericSend+0xa2>
 8008af2:	2301      	movs	r3, #1
 8008af4:	e000      	b.n	8008af8 <xQueueGenericSend+0xa4>
 8008af6:	2300      	movs	r3, #0
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d10a      	bne.n	8008b12 <xQueueGenericSend+0xbe>
	__asm volatile
 8008afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b00:	f383 8811 	msr	BASEPRI, r3
 8008b04:	f3bf 8f6f 	isb	sy
 8008b08:	f3bf 8f4f 	dsb	sy
 8008b0c:	61fb      	str	r3, [r7, #28]
}
 8008b0e:	bf00      	nop
 8008b10:	e7fe      	b.n	8008b10 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b12:	f001 fff7 	bl	800ab04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d302      	bcc.n	8008b28 <xQueueGenericSend+0xd4>
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	2b02      	cmp	r3, #2
 8008b26:	d129      	bne.n	8008b7c <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008b28:	683a      	ldr	r2, [r7, #0]
 8008b2a:	68b9      	ldr	r1, [r7, #8]
 8008b2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008b2e:	f000 fa07 	bl	8008f40 <prvCopyDataToQueue>
 8008b32:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d010      	beq.n	8008b5e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3e:	3324      	adds	r3, #36	; 0x24
 8008b40:	4618      	mov	r0, r3
 8008b42:	f001 f863 	bl	8009c0c <xTaskRemoveFromEventList>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d013      	beq.n	8008b74 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008b4c:	4b3f      	ldr	r3, [pc, #252]	; (8008c4c <xQueueGenericSend+0x1f8>)
 8008b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b52:	601a      	str	r2, [r3, #0]
 8008b54:	f3bf 8f4f 	dsb	sy
 8008b58:	f3bf 8f6f 	isb	sy
 8008b5c:	e00a      	b.n	8008b74 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d007      	beq.n	8008b74 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008b64:	4b39      	ldr	r3, [pc, #228]	; (8008c4c <xQueueGenericSend+0x1f8>)
 8008b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b6a:	601a      	str	r2, [r3, #0]
 8008b6c:	f3bf 8f4f 	dsb	sy
 8008b70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008b74:	f001 fff6 	bl	800ab64 <vPortExitCritical>
				return pdPASS;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e063      	b.n	8008c44 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d103      	bne.n	8008b8a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b82:	f001 ffef 	bl	800ab64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008b86:	2300      	movs	r3, #0
 8008b88:	e05c      	b.n	8008c44 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d106      	bne.n	8008b9e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b90:	f107 0314 	add.w	r3, r7, #20
 8008b94:	4618      	mov	r0, r3
 8008b96:	f001 f8ff 	bl	8009d98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b9a:	2301      	movs	r3, #1
 8008b9c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b9e:	f001 ffe1 	bl	800ab64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008ba2:	f000 fe05 	bl	80097b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ba6:	f001 ffad 	bl	800ab04 <vPortEnterCritical>
 8008baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008bb0:	b25b      	sxtb	r3, r3
 8008bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb6:	d103      	bne.n	8008bc0 <xQueueGenericSend+0x16c>
 8008bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bc2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bc6:	b25b      	sxtb	r3, r3
 8008bc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bcc:	d103      	bne.n	8008bd6 <xQueueGenericSend+0x182>
 8008bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008bd6:	f001 ffc5 	bl	800ab64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008bda:	1d3a      	adds	r2, r7, #4
 8008bdc:	f107 0314 	add.w	r3, r7, #20
 8008be0:	4611      	mov	r1, r2
 8008be2:	4618      	mov	r0, r3
 8008be4:	f001 f8ee 	bl	8009dc4 <xTaskCheckForTimeOut>
 8008be8:	4603      	mov	r3, r0
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d124      	bne.n	8008c38 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008bee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008bf0:	f000 fa9e 	bl	8009130 <prvIsQueueFull>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d018      	beq.n	8008c2c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bfc:	3310      	adds	r3, #16
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	4611      	mov	r1, r2
 8008c02:	4618      	mov	r0, r3
 8008c04:	f000 ffb2 	bl	8009b6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008c08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c0a:	f000 fa29 	bl	8009060 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008c0e:	f000 fddd 	bl	80097cc <xTaskResumeAll>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	f47f af7c 	bne.w	8008b12 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008c1a:	4b0c      	ldr	r3, [pc, #48]	; (8008c4c <xQueueGenericSend+0x1f8>)
 8008c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c20:	601a      	str	r2, [r3, #0]
 8008c22:	f3bf 8f4f 	dsb	sy
 8008c26:	f3bf 8f6f 	isb	sy
 8008c2a:	e772      	b.n	8008b12 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008c2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c2e:	f000 fa17 	bl	8009060 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c32:	f000 fdcb 	bl	80097cc <xTaskResumeAll>
 8008c36:	e76c      	b.n	8008b12 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008c38:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008c3a:	f000 fa11 	bl	8009060 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c3e:	f000 fdc5 	bl	80097cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008c42:	2300      	movs	r3, #0
		}
	}
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3738      	adds	r7, #56	; 0x38
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	e000ed04 	.word	0xe000ed04

08008c50 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b08e      	sub	sp, #56	; 0x38
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	607a      	str	r2, [r7, #4]
 8008c5c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d10a      	bne.n	8008c7e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008c68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6c:	f383 8811 	msr	BASEPRI, r3
 8008c70:	f3bf 8f6f 	isb	sy
 8008c74:	f3bf 8f4f 	dsb	sy
 8008c78:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008c7a:	bf00      	nop
 8008c7c:	e7fe      	b.n	8008c7c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d103      	bne.n	8008c8c <xQueueGenericSendFromISR+0x3c>
 8008c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d101      	bne.n	8008c90 <xQueueGenericSendFromISR+0x40>
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e000      	b.n	8008c92 <xQueueGenericSendFromISR+0x42>
 8008c90:	2300      	movs	r3, #0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d10a      	bne.n	8008cac <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9a:	f383 8811 	msr	BASEPRI, r3
 8008c9e:	f3bf 8f6f 	isb	sy
 8008ca2:	f3bf 8f4f 	dsb	sy
 8008ca6:	623b      	str	r3, [r7, #32]
}
 8008ca8:	bf00      	nop
 8008caa:	e7fe      	b.n	8008caa <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	d103      	bne.n	8008cba <xQueueGenericSendFromISR+0x6a>
 8008cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cb6:	2b01      	cmp	r3, #1
 8008cb8:	d101      	bne.n	8008cbe <xQueueGenericSendFromISR+0x6e>
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e000      	b.n	8008cc0 <xQueueGenericSendFromISR+0x70>
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d10a      	bne.n	8008cda <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc8:	f383 8811 	msr	BASEPRI, r3
 8008ccc:	f3bf 8f6f 	isb	sy
 8008cd0:	f3bf 8f4f 	dsb	sy
 8008cd4:	61fb      	str	r3, [r7, #28]
}
 8008cd6:	bf00      	nop
 8008cd8:	e7fe      	b.n	8008cd8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008cda:	f001 fff5 	bl	800acc8 <vPortValidateInterruptPriority>
	__asm volatile
 8008cde:	f3ef 8211 	mrs	r2, BASEPRI
 8008ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce6:	f383 8811 	msr	BASEPRI, r3
 8008cea:	f3bf 8f6f 	isb	sy
 8008cee:	f3bf 8f4f 	dsb	sy
 8008cf2:	61ba      	str	r2, [r7, #24]
 8008cf4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008cf6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d02:	429a      	cmp	r2, r3
 8008d04:	d302      	bcc.n	8008d0c <xQueueGenericSendFromISR+0xbc>
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	d12c      	bne.n	8008d66 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008d16:	683a      	ldr	r2, [r7, #0]
 8008d18:	68b9      	ldr	r1, [r7, #8]
 8008d1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008d1c:	f000 f910 	bl	8008f40 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008d20:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d28:	d112      	bne.n	8008d50 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d016      	beq.n	8008d60 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d34:	3324      	adds	r3, #36	; 0x24
 8008d36:	4618      	mov	r0, r3
 8008d38:	f000 ff68 	bl	8009c0c <xTaskRemoveFromEventList>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d00e      	beq.n	8008d60 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d00b      	beq.n	8008d60 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	601a      	str	r2, [r3, #0]
 8008d4e:	e007      	b.n	8008d60 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008d50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008d54:	3301      	adds	r3, #1
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	b25a      	sxtb	r2, r3
 8008d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008d60:	2301      	movs	r3, #1
 8008d62:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008d64:	e001      	b.n	8008d6a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008d66:	2300      	movs	r3, #0
 8008d68:	637b      	str	r3, [r7, #52]	; 0x34
 8008d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d6c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	f383 8811 	msr	BASEPRI, r3
}
 8008d74:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3738      	adds	r7, #56	; 0x38
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b08c      	sub	sp, #48	; 0x30
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d10a      	bne.n	8008db0 <xQueueReceive+0x30>
	__asm volatile
 8008d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9e:	f383 8811 	msr	BASEPRI, r3
 8008da2:	f3bf 8f6f 	isb	sy
 8008da6:	f3bf 8f4f 	dsb	sy
 8008daa:	623b      	str	r3, [r7, #32]
}
 8008dac:	bf00      	nop
 8008dae:	e7fe      	b.n	8008dae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d103      	bne.n	8008dbe <xQueueReceive+0x3e>
 8008db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d101      	bne.n	8008dc2 <xQueueReceive+0x42>
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e000      	b.n	8008dc4 <xQueueReceive+0x44>
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d10a      	bne.n	8008dde <xQueueReceive+0x5e>
	__asm volatile
 8008dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dcc:	f383 8811 	msr	BASEPRI, r3
 8008dd0:	f3bf 8f6f 	isb	sy
 8008dd4:	f3bf 8f4f 	dsb	sy
 8008dd8:	61fb      	str	r3, [r7, #28]
}
 8008dda:	bf00      	nop
 8008ddc:	e7fe      	b.n	8008ddc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008dde:	f001 f94f 	bl	800a080 <xTaskGetSchedulerState>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d102      	bne.n	8008dee <xQueueReceive+0x6e>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d101      	bne.n	8008df2 <xQueueReceive+0x72>
 8008dee:	2301      	movs	r3, #1
 8008df0:	e000      	b.n	8008df4 <xQueueReceive+0x74>
 8008df2:	2300      	movs	r3, #0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d10a      	bne.n	8008e0e <xQueueReceive+0x8e>
	__asm volatile
 8008df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dfc:	f383 8811 	msr	BASEPRI, r3
 8008e00:	f3bf 8f6f 	isb	sy
 8008e04:	f3bf 8f4f 	dsb	sy
 8008e08:	61bb      	str	r3, [r7, #24]
}
 8008e0a:	bf00      	nop
 8008e0c:	e7fe      	b.n	8008e0c <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e0e:	f001 fe79 	bl	800ab04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e16:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d01f      	beq.n	8008e5e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008e1e:	68b9      	ldr	r1, [r7, #8]
 8008e20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008e22:	f000 f8f7 	bl	8009014 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e28:	1e5a      	subs	r2, r3, #1
 8008e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e2c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d00f      	beq.n	8008e56 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e38:	3310      	adds	r3, #16
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f000 fee6 	bl	8009c0c <xTaskRemoveFromEventList>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d007      	beq.n	8008e56 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008e46:	4b3d      	ldr	r3, [pc, #244]	; (8008f3c <xQueueReceive+0x1bc>)
 8008e48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e4c:	601a      	str	r2, [r3, #0]
 8008e4e:	f3bf 8f4f 	dsb	sy
 8008e52:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008e56:	f001 fe85 	bl	800ab64 <vPortExitCritical>
				return pdPASS;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	e069      	b.n	8008f32 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d103      	bne.n	8008e6c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e64:	f001 fe7e 	bl	800ab64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	e062      	b.n	8008f32 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d106      	bne.n	8008e80 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e72:	f107 0310 	add.w	r3, r7, #16
 8008e76:	4618      	mov	r0, r3
 8008e78:	f000 ff8e 	bl	8009d98 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e80:	f001 fe70 	bl	800ab64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e84:	f000 fc94 	bl	80097b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e88:	f001 fe3c 	bl	800ab04 <vPortEnterCritical>
 8008e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e92:	b25b      	sxtb	r3, r3
 8008e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e98:	d103      	bne.n	8008ea2 <xQueueReceive+0x122>
 8008e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ea8:	b25b      	sxtb	r3, r3
 8008eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eae:	d103      	bne.n	8008eb8 <xQueueReceive+0x138>
 8008eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008eb8:	f001 fe54 	bl	800ab64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008ebc:	1d3a      	adds	r2, r7, #4
 8008ebe:	f107 0310 	add.w	r3, r7, #16
 8008ec2:	4611      	mov	r1, r2
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f000 ff7d 	bl	8009dc4 <xTaskCheckForTimeOut>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d123      	bne.n	8008f18 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ed0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ed2:	f000 f917 	bl	8009104 <prvIsQueueEmpty>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d017      	beq.n	8008f0c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ede:	3324      	adds	r3, #36	; 0x24
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	4611      	mov	r1, r2
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f000 fe41 	bl	8009b6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008eea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008eec:	f000 f8b8 	bl	8009060 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008ef0:	f000 fc6c 	bl	80097cc <xTaskResumeAll>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d189      	bne.n	8008e0e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008efa:	4b10      	ldr	r3, [pc, #64]	; (8008f3c <xQueueReceive+0x1bc>)
 8008efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f00:	601a      	str	r2, [r3, #0]
 8008f02:	f3bf 8f4f 	dsb	sy
 8008f06:	f3bf 8f6f 	isb	sy
 8008f0a:	e780      	b.n	8008e0e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008f0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f0e:	f000 f8a7 	bl	8009060 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f12:	f000 fc5b 	bl	80097cc <xTaskResumeAll>
 8008f16:	e77a      	b.n	8008e0e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008f18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f1a:	f000 f8a1 	bl	8009060 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f1e:	f000 fc55 	bl	80097cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008f22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008f24:	f000 f8ee 	bl	8009104 <prvIsQueueEmpty>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	f43f af6f 	beq.w	8008e0e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008f30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3730      	adds	r7, #48	; 0x30
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	e000ed04 	.word	0xe000ed04

08008f40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b086      	sub	sp, #24
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d10d      	bne.n	8008f7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d14d      	bne.n	8009002 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f001 f8a6 	bl	800a0bc <xTaskPriorityDisinherit>
 8008f70:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2200      	movs	r2, #0
 8008f76:	605a      	str	r2, [r3, #4]
 8008f78:	e043      	b.n	8009002 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d119      	bne.n	8008fb4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	6898      	ldr	r0, [r3, #8]
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f88:	461a      	mov	r2, r3
 8008f8a:	68b9      	ldr	r1, [r7, #8]
 8008f8c:	f002 fb8f 	bl	800b6ae <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	689a      	ldr	r2, [r3, #8]
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f98:	441a      	add	r2, r3
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	689a      	ldr	r2, [r3, #8]
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	429a      	cmp	r2, r3
 8008fa8:	d32b      	bcc.n	8009002 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	609a      	str	r2, [r3, #8]
 8008fb2:	e026      	b.n	8009002 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	68d8      	ldr	r0, [r3, #12]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	68b9      	ldr	r1, [r7, #8]
 8008fc0:	f002 fb75 	bl	800b6ae <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	68da      	ldr	r2, [r3, #12]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fcc:	425b      	negs	r3, r3
 8008fce:	441a      	add	r2, r3
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	68da      	ldr	r2, [r3, #12]
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	429a      	cmp	r2, r3
 8008fde:	d207      	bcs.n	8008ff0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	685a      	ldr	r2, [r3, #4]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe8:	425b      	negs	r3, r3
 8008fea:	441a      	add	r2, r3
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d105      	bne.n	8009002 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ff6:	693b      	ldr	r3, [r7, #16]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d002      	beq.n	8009002 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008ffc:	693b      	ldr	r3, [r7, #16]
 8008ffe:	3b01      	subs	r3, #1
 8009000:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009002:	693b      	ldr	r3, [r7, #16]
 8009004:	1c5a      	adds	r2, r3, #1
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800900a:	697b      	ldr	r3, [r7, #20]
}
 800900c:	4618      	mov	r0, r3
 800900e:	3718      	adds	r7, #24
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009022:	2b00      	cmp	r3, #0
 8009024:	d018      	beq.n	8009058 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	68da      	ldr	r2, [r3, #12]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800902e:	441a      	add	r2, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	68da      	ldr	r2, [r3, #12]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	429a      	cmp	r2, r3
 800903e:	d303      	bcc.n	8009048 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	68d9      	ldr	r1, [r3, #12]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009050:	461a      	mov	r2, r3
 8009052:	6838      	ldr	r0, [r7, #0]
 8009054:	f002 fb2b 	bl	800b6ae <memcpy>
	}
}
 8009058:	bf00      	nop
 800905a:	3708      	adds	r7, #8
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009068:	f001 fd4c 	bl	800ab04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009072:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009074:	e011      	b.n	800909a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907a:	2b00      	cmp	r3, #0
 800907c:	d012      	beq.n	80090a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	3324      	adds	r3, #36	; 0x24
 8009082:	4618      	mov	r0, r3
 8009084:	f000 fdc2 	bl	8009c0c <xTaskRemoveFromEventList>
 8009088:	4603      	mov	r3, r0
 800908a:	2b00      	cmp	r3, #0
 800908c:	d001      	beq.n	8009092 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800908e:	f000 fefb 	bl	8009e88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009092:	7bfb      	ldrb	r3, [r7, #15]
 8009094:	3b01      	subs	r3, #1
 8009096:	b2db      	uxtb	r3, r3
 8009098:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800909a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	dce9      	bgt.n	8009076 <prvUnlockQueue+0x16>
 80090a2:	e000      	b.n	80090a6 <prvUnlockQueue+0x46>
					break;
 80090a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	22ff      	movs	r2, #255	; 0xff
 80090aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80090ae:	f001 fd59 	bl	800ab64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80090b2:	f001 fd27 	bl	800ab04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80090be:	e011      	b.n	80090e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	691b      	ldr	r3, [r3, #16]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d012      	beq.n	80090ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	3310      	adds	r3, #16
 80090cc:	4618      	mov	r0, r3
 80090ce:	f000 fd9d 	bl	8009c0c <xTaskRemoveFromEventList>
 80090d2:	4603      	mov	r3, r0
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d001      	beq.n	80090dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80090d8:	f000 fed6 	bl	8009e88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80090dc:	7bbb      	ldrb	r3, [r7, #14]
 80090de:	3b01      	subs	r3, #1
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80090e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	dce9      	bgt.n	80090c0 <prvUnlockQueue+0x60>
 80090ec:	e000      	b.n	80090f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80090ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	22ff      	movs	r2, #255	; 0xff
 80090f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80090f8:	f001 fd34 	bl	800ab64 <vPortExitCritical>
}
 80090fc:	bf00      	nop
 80090fe:	3710      	adds	r7, #16
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800910c:	f001 fcfa 	bl	800ab04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009114:	2b00      	cmp	r3, #0
 8009116:	d102      	bne.n	800911e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009118:	2301      	movs	r3, #1
 800911a:	60fb      	str	r3, [r7, #12]
 800911c:	e001      	b.n	8009122 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800911e:	2300      	movs	r3, #0
 8009120:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009122:	f001 fd1f 	bl	800ab64 <vPortExitCritical>

	return xReturn;
 8009126:	68fb      	ldr	r3, [r7, #12]
}
 8009128:	4618      	mov	r0, r3
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b084      	sub	sp, #16
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009138:	f001 fce4 	bl	800ab04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009144:	429a      	cmp	r2, r3
 8009146:	d102      	bne.n	800914e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009148:	2301      	movs	r3, #1
 800914a:	60fb      	str	r3, [r7, #12]
 800914c:	e001      	b.n	8009152 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800914e:	2300      	movs	r3, #0
 8009150:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009152:	f001 fd07 	bl	800ab64 <vPortExitCritical>

	return xReturn;
 8009156:	68fb      	ldr	r3, [r7, #12]
}
 8009158:	4618      	mov	r0, r3
 800915a:	3710      	adds	r7, #16
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009160:	b480      	push	{r7}
 8009162:	b085      	sub	sp, #20
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800916a:	2300      	movs	r3, #0
 800916c:	60fb      	str	r3, [r7, #12]
 800916e:	e014      	b.n	800919a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009170:	4a0f      	ldr	r2, [pc, #60]	; (80091b0 <vQueueAddToRegistry+0x50>)
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d10b      	bne.n	8009194 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800917c:	490c      	ldr	r1, [pc, #48]	; (80091b0 <vQueueAddToRegistry+0x50>)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	683a      	ldr	r2, [r7, #0]
 8009182:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009186:	4a0a      	ldr	r2, [pc, #40]	; (80091b0 <vQueueAddToRegistry+0x50>)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	00db      	lsls	r3, r3, #3
 800918c:	4413      	add	r3, r2
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009192:	e006      	b.n	80091a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	3301      	adds	r3, #1
 8009198:	60fb      	str	r3, [r7, #12]
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	2b07      	cmp	r3, #7
 800919e:	d9e7      	bls.n	8009170 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80091a0:	bf00      	nop
 80091a2:	bf00      	nop
 80091a4:	3714      	adds	r7, #20
 80091a6:	46bd      	mov	sp, r7
 80091a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ac:	4770      	bx	lr
 80091ae:	bf00      	nop
 80091b0:	20000c64 	.word	0x20000c64

080091b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b086      	sub	sp, #24
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	60f8      	str	r0, [r7, #12]
 80091bc:	60b9      	str	r1, [r7, #8]
 80091be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80091c4:	f001 fc9e 	bl	800ab04 <vPortEnterCritical>
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80091ce:	b25b      	sxtb	r3, r3
 80091d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091d4:	d103      	bne.n	80091de <vQueueWaitForMessageRestricted+0x2a>
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091e4:	b25b      	sxtb	r3, r3
 80091e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ea:	d103      	bne.n	80091f4 <vQueueWaitForMessageRestricted+0x40>
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	2200      	movs	r2, #0
 80091f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80091f4:	f001 fcb6 	bl	800ab64 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d106      	bne.n	800920e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	3324      	adds	r3, #36	; 0x24
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	68b9      	ldr	r1, [r7, #8]
 8009208:	4618      	mov	r0, r3
 800920a:	f000 fcd3 	bl	8009bb4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800920e:	6978      	ldr	r0, [r7, #20]
 8009210:	f7ff ff26 	bl	8009060 <prvUnlockQueue>
	}
 8009214:	bf00      	nop
 8009216:	3718      	adds	r7, #24
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}

0800921c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800921c:	b580      	push	{r7, lr}
 800921e:	b08e      	sub	sp, #56	; 0x38
 8009220:	af04      	add	r7, sp, #16
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	607a      	str	r2, [r7, #4]
 8009228:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800922a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800922c:	2b00      	cmp	r3, #0
 800922e:	d10a      	bne.n	8009246 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009234:	f383 8811 	msr	BASEPRI, r3
 8009238:	f3bf 8f6f 	isb	sy
 800923c:	f3bf 8f4f 	dsb	sy
 8009240:	623b      	str	r3, [r7, #32]
}
 8009242:	bf00      	nop
 8009244:	e7fe      	b.n	8009244 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009248:	2b00      	cmp	r3, #0
 800924a:	d10a      	bne.n	8009262 <xTaskCreateStatic+0x46>
	__asm volatile
 800924c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009250:	f383 8811 	msr	BASEPRI, r3
 8009254:	f3bf 8f6f 	isb	sy
 8009258:	f3bf 8f4f 	dsb	sy
 800925c:	61fb      	str	r3, [r7, #28]
}
 800925e:	bf00      	nop
 8009260:	e7fe      	b.n	8009260 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009262:	23ac      	movs	r3, #172	; 0xac
 8009264:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	2bac      	cmp	r3, #172	; 0xac
 800926a:	d00a      	beq.n	8009282 <xTaskCreateStatic+0x66>
	__asm volatile
 800926c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009270:	f383 8811 	msr	BASEPRI, r3
 8009274:	f3bf 8f6f 	isb	sy
 8009278:	f3bf 8f4f 	dsb	sy
 800927c:	61bb      	str	r3, [r7, #24]
}
 800927e:	bf00      	nop
 8009280:	e7fe      	b.n	8009280 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009284:	2b00      	cmp	r3, #0
 8009286:	d01e      	beq.n	80092c6 <xTaskCreateStatic+0xaa>
 8009288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800928a:	2b00      	cmp	r3, #0
 800928c:	d01b      	beq.n	80092c6 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800928e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009290:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009294:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009296:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800929a:	2202      	movs	r2, #2
 800929c:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80092a0:	2300      	movs	r3, #0
 80092a2:	9303      	str	r3, [sp, #12]
 80092a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a6:	9302      	str	r3, [sp, #8]
 80092a8:	f107 0314 	add.w	r3, r7, #20
 80092ac:	9301      	str	r3, [sp, #4]
 80092ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092b0:	9300      	str	r3, [sp, #0]
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	68b9      	ldr	r1, [r7, #8]
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f000 f851 	bl	8009360 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80092be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80092c0:	f000 f8ec 	bl	800949c <prvAddNewTaskToReadyList>
 80092c4:	e001      	b.n	80092ca <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80092c6:	2300      	movs	r3, #0
 80092c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80092ca:	697b      	ldr	r3, [r7, #20]
	}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3728      	adds	r7, #40	; 0x28
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b08c      	sub	sp, #48	; 0x30
 80092d8:	af04      	add	r7, sp, #16
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	603b      	str	r3, [r7, #0]
 80092e0:	4613      	mov	r3, r2
 80092e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092e4:	88fb      	ldrh	r3, [r7, #6]
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	4618      	mov	r0, r3
 80092ea:	f001 fd2d 	bl	800ad48 <pvPortMalloc>
 80092ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d00e      	beq.n	8009314 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80092f6:	20ac      	movs	r0, #172	; 0xac
 80092f8:	f001 fd26 	bl	800ad48 <pvPortMalloc>
 80092fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d003      	beq.n	800930c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	697a      	ldr	r2, [r7, #20]
 8009308:	631a      	str	r2, [r3, #48]	; 0x30
 800930a:	e005      	b.n	8009318 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800930c:	6978      	ldr	r0, [r7, #20]
 800930e:	f001 fddf 	bl	800aed0 <vPortFree>
 8009312:	e001      	b.n	8009318 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009314:	2300      	movs	r3, #0
 8009316:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009318:	69fb      	ldr	r3, [r7, #28]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d017      	beq.n	800934e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800931e:	69fb      	ldr	r3, [r7, #28]
 8009320:	2200      	movs	r2, #0
 8009322:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009326:	88fa      	ldrh	r2, [r7, #6]
 8009328:	2300      	movs	r3, #0
 800932a:	9303      	str	r3, [sp, #12]
 800932c:	69fb      	ldr	r3, [r7, #28]
 800932e:	9302      	str	r3, [sp, #8]
 8009330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009332:	9301      	str	r3, [sp, #4]
 8009334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009336:	9300      	str	r3, [sp, #0]
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	68b9      	ldr	r1, [r7, #8]
 800933c:	68f8      	ldr	r0, [r7, #12]
 800933e:	f000 f80f 	bl	8009360 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009342:	69f8      	ldr	r0, [r7, #28]
 8009344:	f000 f8aa 	bl	800949c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009348:	2301      	movs	r3, #1
 800934a:	61bb      	str	r3, [r7, #24]
 800934c:	e002      	b.n	8009354 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800934e:	f04f 33ff 	mov.w	r3, #4294967295
 8009352:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009354:	69bb      	ldr	r3, [r7, #24]
	}
 8009356:	4618      	mov	r0, r3
 8009358:	3720      	adds	r7, #32
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
	...

08009360 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b088      	sub	sp, #32
 8009364:	af00      	add	r7, sp, #0
 8009366:	60f8      	str	r0, [r7, #12]
 8009368:	60b9      	str	r1, [r7, #8]
 800936a:	607a      	str	r2, [r7, #4]
 800936c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800936e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009370:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	461a      	mov	r2, r3
 8009378:	21a5      	movs	r1, #165	; 0xa5
 800937a:	f002 f8c7 	bl	800b50c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800937e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009388:	3b01      	subs	r3, #1
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	4413      	add	r3, r2
 800938e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009390:	69bb      	ldr	r3, [r7, #24]
 8009392:	f023 0307 	bic.w	r3, r3, #7
 8009396:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009398:	69bb      	ldr	r3, [r7, #24]
 800939a:	f003 0307 	and.w	r3, r3, #7
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00a      	beq.n	80093b8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80093a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a6:	f383 8811 	msr	BASEPRI, r3
 80093aa:	f3bf 8f6f 	isb	sy
 80093ae:	f3bf 8f4f 	dsb	sy
 80093b2:	617b      	str	r3, [r7, #20]
}
 80093b4:	bf00      	nop
 80093b6:	e7fe      	b.n	80093b6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80093b8:	2300      	movs	r3, #0
 80093ba:	61fb      	str	r3, [r7, #28]
 80093bc:	e012      	b.n	80093e4 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80093be:	68ba      	ldr	r2, [r7, #8]
 80093c0:	69fb      	ldr	r3, [r7, #28]
 80093c2:	4413      	add	r3, r2
 80093c4:	7819      	ldrb	r1, [r3, #0]
 80093c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	4413      	add	r3, r2
 80093cc:	3334      	adds	r3, #52	; 0x34
 80093ce:	460a      	mov	r2, r1
 80093d0:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80093d2:	68ba      	ldr	r2, [r7, #8]
 80093d4:	69fb      	ldr	r3, [r7, #28]
 80093d6:	4413      	add	r3, r2
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d006      	beq.n	80093ec <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80093de:	69fb      	ldr	r3, [r7, #28]
 80093e0:	3301      	adds	r3, #1
 80093e2:	61fb      	str	r3, [r7, #28]
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	2b13      	cmp	r3, #19
 80093e8:	d9e9      	bls.n	80093be <prvInitialiseNewTask+0x5e>
 80093ea:	e000      	b.n	80093ee <prvInitialiseNewTask+0x8e>
		{
			break;
 80093ec:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80093ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f0:	2200      	movs	r2, #0
 80093f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80093f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f8:	2b37      	cmp	r3, #55	; 0x37
 80093fa:	d901      	bls.n	8009400 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80093fc:	2337      	movs	r3, #55	; 0x37
 80093fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009402:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009404:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009408:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800940a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
 800940c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800940e:	2200      	movs	r2, #0
 8009410:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009414:	3304      	adds	r3, #4
 8009416:	4618      	mov	r0, r3
 8009418:	f7ff f8fa 	bl	8008610 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800941c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800941e:	3318      	adds	r3, #24
 8009420:	4618      	mov	r0, r3
 8009422:	f7ff f8f5 	bl	8008610 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800942a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800942c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009434:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800943a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800943c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943e:	2200      	movs	r2, #0
 8009440:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009446:	2200      	movs	r2, #0
 8009448:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800944c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944e:	3358      	adds	r3, #88	; 0x58
 8009450:	224c      	movs	r2, #76	; 0x4c
 8009452:	2100      	movs	r1, #0
 8009454:	4618      	mov	r0, r3
 8009456:	f002 f859 	bl	800b50c <memset>
 800945a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800945c:	4a0c      	ldr	r2, [pc, #48]	; (8009490 <prvInitialiseNewTask+0x130>)
 800945e:	65da      	str	r2, [r3, #92]	; 0x5c
 8009460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009462:	4a0c      	ldr	r2, [pc, #48]	; (8009494 <prvInitialiseNewTask+0x134>)
 8009464:	661a      	str	r2, [r3, #96]	; 0x60
 8009466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009468:	4a0b      	ldr	r2, [pc, #44]	; (8009498 <prvInitialiseNewTask+0x138>)
 800946a:	665a      	str	r2, [r3, #100]	; 0x64
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800946c:	683a      	ldr	r2, [r7, #0]
 800946e:	68f9      	ldr	r1, [r7, #12]
 8009470:	69b8      	ldr	r0, [r7, #24]
 8009472:	f001 fa17 	bl	800a8a4 <pxPortInitialiseStack>
 8009476:	4602      	mov	r2, r0
 8009478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800947a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800947c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800947e:	2b00      	cmp	r3, #0
 8009480:	d002      	beq.n	8009488 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009486:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009488:	bf00      	nop
 800948a:	3720      	adds	r7, #32
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}
 8009490:	200026f0 	.word	0x200026f0
 8009494:	20002758 	.word	0x20002758
 8009498:	200027c0 	.word	0x200027c0

0800949c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80094a4:	f001 fb2e 	bl	800ab04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80094a8:	4b2d      	ldr	r3, [pc, #180]	; (8009560 <prvAddNewTaskToReadyList+0xc4>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	3301      	adds	r3, #1
 80094ae:	4a2c      	ldr	r2, [pc, #176]	; (8009560 <prvAddNewTaskToReadyList+0xc4>)
 80094b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80094b2:	4b2c      	ldr	r3, [pc, #176]	; (8009564 <prvAddNewTaskToReadyList+0xc8>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d109      	bne.n	80094ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80094ba:	4a2a      	ldr	r2, [pc, #168]	; (8009564 <prvAddNewTaskToReadyList+0xc8>)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80094c0:	4b27      	ldr	r3, [pc, #156]	; (8009560 <prvAddNewTaskToReadyList+0xc4>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d110      	bne.n	80094ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80094c8:	f000 fd02 	bl	8009ed0 <prvInitialiseTaskLists>
 80094cc:	e00d      	b.n	80094ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80094ce:	4b26      	ldr	r3, [pc, #152]	; (8009568 <prvAddNewTaskToReadyList+0xcc>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d109      	bne.n	80094ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80094d6:	4b23      	ldr	r3, [pc, #140]	; (8009564 <prvAddNewTaskToReadyList+0xc8>)
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e0:	429a      	cmp	r2, r3
 80094e2:	d802      	bhi.n	80094ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80094e4:	4a1f      	ldr	r2, [pc, #124]	; (8009564 <prvAddNewTaskToReadyList+0xc8>)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80094ea:	4b20      	ldr	r3, [pc, #128]	; (800956c <prvAddNewTaskToReadyList+0xd0>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	3301      	adds	r3, #1
 80094f0:	4a1e      	ldr	r2, [pc, #120]	; (800956c <prvAddNewTaskToReadyList+0xd0>)
 80094f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80094f4:	4b1d      	ldr	r3, [pc, #116]	; (800956c <prvAddNewTaskToReadyList+0xd0>)
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	649a      	str	r2, [r3, #72]	; 0x48
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009500:	4b1b      	ldr	r3, [pc, #108]	; (8009570 <prvAddNewTaskToReadyList+0xd4>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	429a      	cmp	r2, r3
 8009506:	d903      	bls.n	8009510 <prvAddNewTaskToReadyList+0x74>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950c:	4a18      	ldr	r2, [pc, #96]	; (8009570 <prvAddNewTaskToReadyList+0xd4>)
 800950e:	6013      	str	r3, [r2, #0]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009514:	4613      	mov	r3, r2
 8009516:	009b      	lsls	r3, r3, #2
 8009518:	4413      	add	r3, r2
 800951a:	009b      	lsls	r3, r3, #2
 800951c:	4a15      	ldr	r2, [pc, #84]	; (8009574 <prvAddNewTaskToReadyList+0xd8>)
 800951e:	441a      	add	r2, r3
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	3304      	adds	r3, #4
 8009524:	4619      	mov	r1, r3
 8009526:	4610      	mov	r0, r2
 8009528:	f7ff f87f 	bl	800862a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800952c:	f001 fb1a 	bl	800ab64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009530:	4b0d      	ldr	r3, [pc, #52]	; (8009568 <prvAddNewTaskToReadyList+0xcc>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d00e      	beq.n	8009556 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009538:	4b0a      	ldr	r3, [pc, #40]	; (8009564 <prvAddNewTaskToReadyList+0xc8>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009542:	429a      	cmp	r2, r3
 8009544:	d207      	bcs.n	8009556 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009546:	4b0c      	ldr	r3, [pc, #48]	; (8009578 <prvAddNewTaskToReadyList+0xdc>)
 8009548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800954c:	601a      	str	r2, [r3, #0]
 800954e:	f3bf 8f4f 	dsb	sy
 8009552:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009556:	bf00      	nop
 8009558:	3708      	adds	r7, #8
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	20001178 	.word	0x20001178
 8009564:	20000ca4 	.word	0x20000ca4
 8009568:	20001184 	.word	0x20001184
 800956c:	20001194 	.word	0x20001194
 8009570:	20001180 	.word	0x20001180
 8009574:	20000ca8 	.word	0x20000ca8
 8009578:	e000ed04 	.word	0xe000ed04

0800957c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009584:	2300      	movs	r3, #0
 8009586:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d017      	beq.n	80095be <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800958e:	4b13      	ldr	r3, [pc, #76]	; (80095dc <vTaskDelay+0x60>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d00a      	beq.n	80095ac <vTaskDelay+0x30>
	__asm volatile
 8009596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800959a:	f383 8811 	msr	BASEPRI, r3
 800959e:	f3bf 8f6f 	isb	sy
 80095a2:	f3bf 8f4f 	dsb	sy
 80095a6:	60bb      	str	r3, [r7, #8]
}
 80095a8:	bf00      	nop
 80095aa:	e7fe      	b.n	80095aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80095ac:	f000 f900 	bl	80097b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80095b0:	2100      	movs	r1, #0
 80095b2:	6878      	ldr	r0, [r7, #4]
 80095b4:	f000 fdf0 	bl	800a198 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80095b8:	f000 f908 	bl	80097cc <xTaskResumeAll>
 80095bc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d107      	bne.n	80095d4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80095c4:	4b06      	ldr	r3, [pc, #24]	; (80095e0 <vTaskDelay+0x64>)
 80095c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095ca:	601a      	str	r2, [r3, #0]
 80095cc:	f3bf 8f4f 	dsb	sy
 80095d0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80095d4:	bf00      	nop
 80095d6:	3710      	adds	r7, #16
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}
 80095dc:	200011a0 	.word	0x200011a0
 80095e0:	e000ed04 	.word	0xe000ed04

080095e4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80095ec:	f001 fa8a 	bl	800ab04 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d102      	bne.n	80095fc <vTaskSuspend+0x18>
 80095f6:	4b30      	ldr	r3, [pc, #192]	; (80096b8 <vTaskSuspend+0xd4>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	e000      	b.n	80095fe <vTaskSuspend+0x1a>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	3304      	adds	r3, #4
 8009604:	4618      	mov	r0, r3
 8009606:	f7ff f86d 	bl	80086e4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800960e:	2b00      	cmp	r3, #0
 8009610:	d004      	beq.n	800961c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	3318      	adds	r3, #24
 8009616:	4618      	mov	r0, r3
 8009618:	f7ff f864 	bl	80086e4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	3304      	adds	r3, #4
 8009620:	4619      	mov	r1, r3
 8009622:	4826      	ldr	r0, [pc, #152]	; (80096bc <vTaskSuspend+0xd8>)
 8009624:	f7ff f801 	bl	800862a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800962e:	b2db      	uxtb	r3, r3
 8009630:	2b01      	cmp	r3, #1
 8009632:	d103      	bne.n	800963c <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2200      	movs	r2, #0
 8009638:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800963c:	f001 fa92 	bl	800ab64 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8009640:	4b1f      	ldr	r3, [pc, #124]	; (80096c0 <vTaskSuspend+0xdc>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d005      	beq.n	8009654 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8009648:	f001 fa5c 	bl	800ab04 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800964c:	f000 fce2 	bl	800a014 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8009650:	f001 fa88 	bl	800ab64 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8009654:	4b18      	ldr	r3, [pc, #96]	; (80096b8 <vTaskSuspend+0xd4>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	68fa      	ldr	r2, [r7, #12]
 800965a:	429a      	cmp	r2, r3
 800965c:	d127      	bne.n	80096ae <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800965e:	4b18      	ldr	r3, [pc, #96]	; (80096c0 <vTaskSuspend+0xdc>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d017      	beq.n	8009696 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8009666:	4b17      	ldr	r3, [pc, #92]	; (80096c4 <vTaskSuspend+0xe0>)
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d00a      	beq.n	8009684 <vTaskSuspend+0xa0>
	__asm volatile
 800966e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009672:	f383 8811 	msr	BASEPRI, r3
 8009676:	f3bf 8f6f 	isb	sy
 800967a:	f3bf 8f4f 	dsb	sy
 800967e:	60bb      	str	r3, [r7, #8]
}
 8009680:	bf00      	nop
 8009682:	e7fe      	b.n	8009682 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8009684:	4b10      	ldr	r3, [pc, #64]	; (80096c8 <vTaskSuspend+0xe4>)
 8009686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800968a:	601a      	str	r2, [r3, #0]
 800968c:	f3bf 8f4f 	dsb	sy
 8009690:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009694:	e00b      	b.n	80096ae <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8009696:	4b09      	ldr	r3, [pc, #36]	; (80096bc <vTaskSuspend+0xd8>)
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	4b0c      	ldr	r3, [pc, #48]	; (80096cc <vTaskSuspend+0xe8>)
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	429a      	cmp	r2, r3
 80096a0:	d103      	bne.n	80096aa <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 80096a2:	4b05      	ldr	r3, [pc, #20]	; (80096b8 <vTaskSuspend+0xd4>)
 80096a4:	2200      	movs	r2, #0
 80096a6:	601a      	str	r2, [r3, #0]
	}
 80096a8:	e001      	b.n	80096ae <vTaskSuspend+0xca>
					vTaskSwitchContext();
 80096aa:	f000 f9fb 	bl	8009aa4 <vTaskSwitchContext>
	}
 80096ae:	bf00      	nop
 80096b0:	3710      	adds	r7, #16
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	bf00      	nop
 80096b8:	20000ca4 	.word	0x20000ca4
 80096bc:	20001164 	.word	0x20001164
 80096c0:	20001184 	.word	0x20001184
 80096c4:	200011a0 	.word	0x200011a0
 80096c8:	e000ed04 	.word	0xe000ed04
 80096cc:	20001178 	.word	0x20001178

080096d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b08a      	sub	sp, #40	; 0x28
 80096d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80096d6:	2300      	movs	r3, #0
 80096d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80096da:	2300      	movs	r3, #0
 80096dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80096de:	463a      	mov	r2, r7
 80096e0:	1d39      	adds	r1, r7, #4
 80096e2:	f107 0308 	add.w	r3, r7, #8
 80096e6:	4618      	mov	r0, r3
 80096e8:	f7fe fdc2 	bl	8008270 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80096ec:	6839      	ldr	r1, [r7, #0]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	68ba      	ldr	r2, [r7, #8]
 80096f2:	9202      	str	r2, [sp, #8]
 80096f4:	9301      	str	r3, [sp, #4]
 80096f6:	2300      	movs	r3, #0
 80096f8:	9300      	str	r3, [sp, #0]
 80096fa:	2300      	movs	r3, #0
 80096fc:	460a      	mov	r2, r1
 80096fe:	4924      	ldr	r1, [pc, #144]	; (8009790 <vTaskStartScheduler+0xc0>)
 8009700:	4824      	ldr	r0, [pc, #144]	; (8009794 <vTaskStartScheduler+0xc4>)
 8009702:	f7ff fd8b 	bl	800921c <xTaskCreateStatic>
 8009706:	4603      	mov	r3, r0
 8009708:	4a23      	ldr	r2, [pc, #140]	; (8009798 <vTaskStartScheduler+0xc8>)
 800970a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800970c:	4b22      	ldr	r3, [pc, #136]	; (8009798 <vTaskStartScheduler+0xc8>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d002      	beq.n	800971a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009714:	2301      	movs	r3, #1
 8009716:	617b      	str	r3, [r7, #20]
 8009718:	e001      	b.n	800971e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800971a:	2300      	movs	r3, #0
 800971c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	2b01      	cmp	r3, #1
 8009722:	d102      	bne.n	800972a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009724:	f000 fd8c 	bl	800a240 <xTimerCreateTimerTask>
 8009728:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	2b01      	cmp	r3, #1
 800972e:	d11b      	bne.n	8009768 <vTaskStartScheduler+0x98>
	__asm volatile
 8009730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009734:	f383 8811 	msr	BASEPRI, r3
 8009738:	f3bf 8f6f 	isb	sy
 800973c:	f3bf 8f4f 	dsb	sy
 8009740:	613b      	str	r3, [r7, #16]
}
 8009742:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009744:	4b15      	ldr	r3, [pc, #84]	; (800979c <vTaskStartScheduler+0xcc>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	3358      	adds	r3, #88	; 0x58
 800974a:	4a15      	ldr	r2, [pc, #84]	; (80097a0 <vTaskStartScheduler+0xd0>)
 800974c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800974e:	4b15      	ldr	r3, [pc, #84]	; (80097a4 <vTaskStartScheduler+0xd4>)
 8009750:	f04f 32ff 	mov.w	r2, #4294967295
 8009754:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009756:	4b14      	ldr	r3, [pc, #80]	; (80097a8 <vTaskStartScheduler+0xd8>)
 8009758:	2201      	movs	r2, #1
 800975a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800975c:	4b13      	ldr	r3, [pc, #76]	; (80097ac <vTaskStartScheduler+0xdc>)
 800975e:	2200      	movs	r2, #0
 8009760:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009762:	f001 f92d 	bl	800a9c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009766:	e00e      	b.n	8009786 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800976e:	d10a      	bne.n	8009786 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009774:	f383 8811 	msr	BASEPRI, r3
 8009778:	f3bf 8f6f 	isb	sy
 800977c:	f3bf 8f4f 	dsb	sy
 8009780:	60fb      	str	r3, [r7, #12]
}
 8009782:	bf00      	nop
 8009784:	e7fe      	b.n	8009784 <vTaskStartScheduler+0xb4>
}
 8009786:	bf00      	nop
 8009788:	3718      	adds	r7, #24
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	0800c3b8 	.word	0x0800c3b8
 8009794:	08009ea1 	.word	0x08009ea1
 8009798:	2000119c 	.word	0x2000119c
 800979c:	20000ca4 	.word	0x20000ca4
 80097a0:	200000e4 	.word	0x200000e4
 80097a4:	20001198 	.word	0x20001198
 80097a8:	20001184 	.word	0x20001184
 80097ac:	2000117c 	.word	0x2000117c

080097b0 <vTaskSuspendAll>:

}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80097b0:	b480      	push	{r7}
 80097b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80097b4:	4b04      	ldr	r3, [pc, #16]	; (80097c8 <vTaskSuspendAll+0x18>)
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	3301      	adds	r3, #1
 80097ba:	4a03      	ldr	r2, [pc, #12]	; (80097c8 <vTaskSuspendAll+0x18>)
 80097bc:	6013      	str	r3, [r2, #0]
}
 80097be:	bf00      	nop
 80097c0:	46bd      	mov	sp, r7
 80097c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c6:	4770      	bx	lr
 80097c8:	200011a0 	.word	0x200011a0

080097cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80097d2:	2300      	movs	r3, #0
 80097d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80097d6:	2300      	movs	r3, #0
 80097d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80097da:	4b42      	ldr	r3, [pc, #264]	; (80098e4 <xTaskResumeAll+0x118>)
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d10a      	bne.n	80097f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80097e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e6:	f383 8811 	msr	BASEPRI, r3
 80097ea:	f3bf 8f6f 	isb	sy
 80097ee:	f3bf 8f4f 	dsb	sy
 80097f2:	603b      	str	r3, [r7, #0]
}
 80097f4:	bf00      	nop
 80097f6:	e7fe      	b.n	80097f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80097f8:	f001 f984 	bl	800ab04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80097fc:	4b39      	ldr	r3, [pc, #228]	; (80098e4 <xTaskResumeAll+0x118>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	3b01      	subs	r3, #1
 8009802:	4a38      	ldr	r2, [pc, #224]	; (80098e4 <xTaskResumeAll+0x118>)
 8009804:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009806:	4b37      	ldr	r3, [pc, #220]	; (80098e4 <xTaskResumeAll+0x118>)
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d162      	bne.n	80098d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800980e:	4b36      	ldr	r3, [pc, #216]	; (80098e8 <xTaskResumeAll+0x11c>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d05e      	beq.n	80098d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009816:	e02f      	b.n	8009878 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009818:	4b34      	ldr	r3, [pc, #208]	; (80098ec <xTaskResumeAll+0x120>)
 800981a:	68db      	ldr	r3, [r3, #12]
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	3318      	adds	r3, #24
 8009824:	4618      	mov	r0, r3
 8009826:	f7fe ff5d 	bl	80086e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	3304      	adds	r3, #4
 800982e:	4618      	mov	r0, r3
 8009830:	f7fe ff58 	bl	80086e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009838:	4b2d      	ldr	r3, [pc, #180]	; (80098f0 <xTaskResumeAll+0x124>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	429a      	cmp	r2, r3
 800983e:	d903      	bls.n	8009848 <xTaskResumeAll+0x7c>
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009844:	4a2a      	ldr	r2, [pc, #168]	; (80098f0 <xTaskResumeAll+0x124>)
 8009846:	6013      	str	r3, [r2, #0]
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800984c:	4613      	mov	r3, r2
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	4413      	add	r3, r2
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	4a27      	ldr	r2, [pc, #156]	; (80098f4 <xTaskResumeAll+0x128>)
 8009856:	441a      	add	r2, r3
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	3304      	adds	r3, #4
 800985c:	4619      	mov	r1, r3
 800985e:	4610      	mov	r0, r2
 8009860:	f7fe fee3 	bl	800862a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009868:	4b23      	ldr	r3, [pc, #140]	; (80098f8 <xTaskResumeAll+0x12c>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800986e:	429a      	cmp	r2, r3
 8009870:	d302      	bcc.n	8009878 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009872:	4b22      	ldr	r3, [pc, #136]	; (80098fc <xTaskResumeAll+0x130>)
 8009874:	2201      	movs	r2, #1
 8009876:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009878:	4b1c      	ldr	r3, [pc, #112]	; (80098ec <xTaskResumeAll+0x120>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d1cb      	bne.n	8009818 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d001      	beq.n	800988a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009886:	f000 fbc5 	bl	800a014 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800988a:	4b1d      	ldr	r3, [pc, #116]	; (8009900 <xTaskResumeAll+0x134>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d010      	beq.n	80098b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009896:	f000 f847 	bl	8009928 <xTaskIncrementTick>
 800989a:	4603      	mov	r3, r0
 800989c:	2b00      	cmp	r3, #0
 800989e:	d002      	beq.n	80098a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80098a0:	4b16      	ldr	r3, [pc, #88]	; (80098fc <xTaskResumeAll+0x130>)
 80098a2:	2201      	movs	r2, #1
 80098a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	3b01      	subs	r3, #1
 80098aa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d1f1      	bne.n	8009896 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80098b2:	4b13      	ldr	r3, [pc, #76]	; (8009900 <xTaskResumeAll+0x134>)
 80098b4:	2200      	movs	r2, #0
 80098b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80098b8:	4b10      	ldr	r3, [pc, #64]	; (80098fc <xTaskResumeAll+0x130>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d009      	beq.n	80098d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80098c0:	2301      	movs	r3, #1
 80098c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80098c4:	4b0f      	ldr	r3, [pc, #60]	; (8009904 <xTaskResumeAll+0x138>)
 80098c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098ca:	601a      	str	r2, [r3, #0]
 80098cc:	f3bf 8f4f 	dsb	sy
 80098d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80098d4:	f001 f946 	bl	800ab64 <vPortExitCritical>

	return xAlreadyYielded;
 80098d8:	68bb      	ldr	r3, [r7, #8]
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3710      	adds	r7, #16
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
 80098e2:	bf00      	nop
 80098e4:	200011a0 	.word	0x200011a0
 80098e8:	20001178 	.word	0x20001178
 80098ec:	20001138 	.word	0x20001138
 80098f0:	20001180 	.word	0x20001180
 80098f4:	20000ca8 	.word	0x20000ca8
 80098f8:	20000ca4 	.word	0x20000ca4
 80098fc:	2000118c 	.word	0x2000118c
 8009900:	20001188 	.word	0x20001188
 8009904:	e000ed04 	.word	0xe000ed04

08009908 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009908:	b480      	push	{r7}
 800990a:	b083      	sub	sp, #12
 800990c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800990e:	4b05      	ldr	r3, [pc, #20]	; (8009924 <xTaskGetTickCount+0x1c>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009914:	687b      	ldr	r3, [r7, #4]
}
 8009916:	4618      	mov	r0, r3
 8009918:	370c      	adds	r7, #12
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	2000117c 	.word	0x2000117c

08009928 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b086      	sub	sp, #24
 800992c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800992e:	2300      	movs	r3, #0
 8009930:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009932:	4b51      	ldr	r3, [pc, #324]	; (8009a78 <xTaskIncrementTick+0x150>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	f040 808e 	bne.w	8009a58 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800993c:	4b4f      	ldr	r3, [pc, #316]	; (8009a7c <xTaskIncrementTick+0x154>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	3301      	adds	r3, #1
 8009942:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009944:	4a4d      	ldr	r2, [pc, #308]	; (8009a7c <xTaskIncrementTick+0x154>)
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d120      	bne.n	8009992 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009950:	4b4b      	ldr	r3, [pc, #300]	; (8009a80 <xTaskIncrementTick+0x158>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d00a      	beq.n	8009970 <xTaskIncrementTick+0x48>
	__asm volatile
 800995a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800995e:	f383 8811 	msr	BASEPRI, r3
 8009962:	f3bf 8f6f 	isb	sy
 8009966:	f3bf 8f4f 	dsb	sy
 800996a:	603b      	str	r3, [r7, #0]
}
 800996c:	bf00      	nop
 800996e:	e7fe      	b.n	800996e <xTaskIncrementTick+0x46>
 8009970:	4b43      	ldr	r3, [pc, #268]	; (8009a80 <xTaskIncrementTick+0x158>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	60fb      	str	r3, [r7, #12]
 8009976:	4b43      	ldr	r3, [pc, #268]	; (8009a84 <xTaskIncrementTick+0x15c>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	4a41      	ldr	r2, [pc, #260]	; (8009a80 <xTaskIncrementTick+0x158>)
 800997c:	6013      	str	r3, [r2, #0]
 800997e:	4a41      	ldr	r2, [pc, #260]	; (8009a84 <xTaskIncrementTick+0x15c>)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	6013      	str	r3, [r2, #0]
 8009984:	4b40      	ldr	r3, [pc, #256]	; (8009a88 <xTaskIncrementTick+0x160>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	3301      	adds	r3, #1
 800998a:	4a3f      	ldr	r2, [pc, #252]	; (8009a88 <xTaskIncrementTick+0x160>)
 800998c:	6013      	str	r3, [r2, #0]
 800998e:	f000 fb41 	bl	800a014 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009992:	4b3e      	ldr	r3, [pc, #248]	; (8009a8c <xTaskIncrementTick+0x164>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	693a      	ldr	r2, [r7, #16]
 8009998:	429a      	cmp	r2, r3
 800999a:	d34e      	bcc.n	8009a3a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800999c:	4b38      	ldr	r3, [pc, #224]	; (8009a80 <xTaskIncrementTick+0x158>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d101      	bne.n	80099aa <xTaskIncrementTick+0x82>
 80099a6:	2301      	movs	r3, #1
 80099a8:	e000      	b.n	80099ac <xTaskIncrementTick+0x84>
 80099aa:	2300      	movs	r3, #0
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d004      	beq.n	80099ba <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099b0:	4b36      	ldr	r3, [pc, #216]	; (8009a8c <xTaskIncrementTick+0x164>)
 80099b2:	f04f 32ff 	mov.w	r2, #4294967295
 80099b6:	601a      	str	r2, [r3, #0]
					break;
 80099b8:	e03f      	b.n	8009a3a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80099ba:	4b31      	ldr	r3, [pc, #196]	; (8009a80 <xTaskIncrementTick+0x158>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80099c4:	68bb      	ldr	r3, [r7, #8]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80099ca:	693a      	ldr	r2, [r7, #16]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d203      	bcs.n	80099da <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80099d2:	4a2e      	ldr	r2, [pc, #184]	; (8009a8c <xTaskIncrementTick+0x164>)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6013      	str	r3, [r2, #0]
						break;
 80099d8:	e02f      	b.n	8009a3a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	3304      	adds	r3, #4
 80099de:	4618      	mov	r0, r3
 80099e0:	f7fe fe80 	bl	80086e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d004      	beq.n	80099f6 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	3318      	adds	r3, #24
 80099f0:	4618      	mov	r0, r3
 80099f2:	f7fe fe77 	bl	80086e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099fa:	4b25      	ldr	r3, [pc, #148]	; (8009a90 <xTaskIncrementTick+0x168>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d903      	bls.n	8009a0a <xTaskIncrementTick+0xe2>
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a06:	4a22      	ldr	r2, [pc, #136]	; (8009a90 <xTaskIncrementTick+0x168>)
 8009a08:	6013      	str	r3, [r2, #0]
 8009a0a:	68bb      	ldr	r3, [r7, #8]
 8009a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a0e:	4613      	mov	r3, r2
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	4413      	add	r3, r2
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	4a1f      	ldr	r2, [pc, #124]	; (8009a94 <xTaskIncrementTick+0x16c>)
 8009a18:	441a      	add	r2, r3
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	3304      	adds	r3, #4
 8009a1e:	4619      	mov	r1, r3
 8009a20:	4610      	mov	r0, r2
 8009a22:	f7fe fe02 	bl	800862a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a2a:	4b1b      	ldr	r3, [pc, #108]	; (8009a98 <xTaskIncrementTick+0x170>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d3b3      	bcc.n	800999c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009a34:	2301      	movs	r3, #1
 8009a36:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a38:	e7b0      	b.n	800999c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009a3a:	4b17      	ldr	r3, [pc, #92]	; (8009a98 <xTaskIncrementTick+0x170>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a40:	4914      	ldr	r1, [pc, #80]	; (8009a94 <xTaskIncrementTick+0x16c>)
 8009a42:	4613      	mov	r3, r2
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	4413      	add	r3, r2
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	440b      	add	r3, r1
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d907      	bls.n	8009a62 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009a52:	2301      	movs	r3, #1
 8009a54:	617b      	str	r3, [r7, #20]
 8009a56:	e004      	b.n	8009a62 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009a58:	4b10      	ldr	r3, [pc, #64]	; (8009a9c <xTaskIncrementTick+0x174>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	4a0f      	ldr	r2, [pc, #60]	; (8009a9c <xTaskIncrementTick+0x174>)
 8009a60:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009a62:	4b0f      	ldr	r3, [pc, #60]	; (8009aa0 <xTaskIncrementTick+0x178>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d001      	beq.n	8009a6e <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009a6e:	697b      	ldr	r3, [r7, #20]
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3718      	adds	r7, #24
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	200011a0 	.word	0x200011a0
 8009a7c:	2000117c 	.word	0x2000117c
 8009a80:	20001130 	.word	0x20001130
 8009a84:	20001134 	.word	0x20001134
 8009a88:	20001190 	.word	0x20001190
 8009a8c:	20001198 	.word	0x20001198
 8009a90:	20001180 	.word	0x20001180
 8009a94:	20000ca8 	.word	0x20000ca8
 8009a98:	20000ca4 	.word	0x20000ca4
 8009a9c:	20001188 	.word	0x20001188
 8009aa0:	2000118c 	.word	0x2000118c

08009aa4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009aaa:	4b2a      	ldr	r3, [pc, #168]	; (8009b54 <vTaskSwitchContext+0xb0>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d003      	beq.n	8009aba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009ab2:	4b29      	ldr	r3, [pc, #164]	; (8009b58 <vTaskSwitchContext+0xb4>)
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009ab8:	e046      	b.n	8009b48 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009aba:	4b27      	ldr	r3, [pc, #156]	; (8009b58 <vTaskSwitchContext+0xb4>)
 8009abc:	2200      	movs	r2, #0
 8009abe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009ac0:	4b26      	ldr	r3, [pc, #152]	; (8009b5c <vTaskSwitchContext+0xb8>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	60fb      	str	r3, [r7, #12]
 8009ac6:	e010      	b.n	8009aea <vTaskSwitchContext+0x46>
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d10a      	bne.n	8009ae4 <vTaskSwitchContext+0x40>
	__asm volatile
 8009ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad2:	f383 8811 	msr	BASEPRI, r3
 8009ad6:	f3bf 8f6f 	isb	sy
 8009ada:	f3bf 8f4f 	dsb	sy
 8009ade:	607b      	str	r3, [r7, #4]
}
 8009ae0:	bf00      	nop
 8009ae2:	e7fe      	b.n	8009ae2 <vTaskSwitchContext+0x3e>
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	3b01      	subs	r3, #1
 8009ae8:	60fb      	str	r3, [r7, #12]
 8009aea:	491d      	ldr	r1, [pc, #116]	; (8009b60 <vTaskSwitchContext+0xbc>)
 8009aec:	68fa      	ldr	r2, [r7, #12]
 8009aee:	4613      	mov	r3, r2
 8009af0:	009b      	lsls	r3, r3, #2
 8009af2:	4413      	add	r3, r2
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	440b      	add	r3, r1
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d0e4      	beq.n	8009ac8 <vTaskSwitchContext+0x24>
 8009afe:	68fa      	ldr	r2, [r7, #12]
 8009b00:	4613      	mov	r3, r2
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	4413      	add	r3, r2
 8009b06:	009b      	lsls	r3, r3, #2
 8009b08:	4a15      	ldr	r2, [pc, #84]	; (8009b60 <vTaskSwitchContext+0xbc>)
 8009b0a:	4413      	add	r3, r2
 8009b0c:	60bb      	str	r3, [r7, #8]
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	685a      	ldr	r2, [r3, #4]
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	605a      	str	r2, [r3, #4]
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	685a      	ldr	r2, [r3, #4]
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	3308      	adds	r3, #8
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d104      	bne.n	8009b2e <vTaskSwitchContext+0x8a>
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	685b      	ldr	r3, [r3, #4]
 8009b28:	685a      	ldr	r2, [r3, #4]
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	605a      	str	r2, [r3, #4]
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	68db      	ldr	r3, [r3, #12]
 8009b34:	4a0b      	ldr	r2, [pc, #44]	; (8009b64 <vTaskSwitchContext+0xc0>)
 8009b36:	6013      	str	r3, [r2, #0]
 8009b38:	4a08      	ldr	r2, [pc, #32]	; (8009b5c <vTaskSwitchContext+0xb8>)
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009b3e:	4b09      	ldr	r3, [pc, #36]	; (8009b64 <vTaskSwitchContext+0xc0>)
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	3358      	adds	r3, #88	; 0x58
 8009b44:	4a08      	ldr	r2, [pc, #32]	; (8009b68 <vTaskSwitchContext+0xc4>)
 8009b46:	6013      	str	r3, [r2, #0]
}
 8009b48:	bf00      	nop
 8009b4a:	3714      	adds	r7, #20
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr
 8009b54:	200011a0 	.word	0x200011a0
 8009b58:	2000118c 	.word	0x2000118c
 8009b5c:	20001180 	.word	0x20001180
 8009b60:	20000ca8 	.word	0x20000ca8
 8009b64:	20000ca4 	.word	0x20000ca4
 8009b68:	200000e4 	.word	0x200000e4

08009b6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b084      	sub	sp, #16
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d10a      	bne.n	8009b92 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b80:	f383 8811 	msr	BASEPRI, r3
 8009b84:	f3bf 8f6f 	isb	sy
 8009b88:	f3bf 8f4f 	dsb	sy
 8009b8c:	60fb      	str	r3, [r7, #12]
}
 8009b8e:	bf00      	nop
 8009b90:	e7fe      	b.n	8009b90 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009b92:	4b07      	ldr	r3, [pc, #28]	; (8009bb0 <vTaskPlaceOnEventList+0x44>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	3318      	adds	r3, #24
 8009b98:	4619      	mov	r1, r3
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f7fe fd69 	bl	8008672 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009ba0:	2101      	movs	r1, #1
 8009ba2:	6838      	ldr	r0, [r7, #0]
 8009ba4:	f000 faf8 	bl	800a198 <prvAddCurrentTaskToDelayedList>
}
 8009ba8:	bf00      	nop
 8009baa:	3710      	adds	r7, #16
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	20000ca4 	.word	0x20000ca4

08009bb4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b086      	sub	sp, #24
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d10a      	bne.n	8009bdc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bca:	f383 8811 	msr	BASEPRI, r3
 8009bce:	f3bf 8f6f 	isb	sy
 8009bd2:	f3bf 8f4f 	dsb	sy
 8009bd6:	617b      	str	r3, [r7, #20]
}
 8009bd8:	bf00      	nop
 8009bda:	e7fe      	b.n	8009bda <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009bdc:	4b0a      	ldr	r3, [pc, #40]	; (8009c08 <vTaskPlaceOnEventListRestricted+0x54>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	3318      	adds	r3, #24
 8009be2:	4619      	mov	r1, r3
 8009be4:	68f8      	ldr	r0, [r7, #12]
 8009be6:	f7fe fd20 	bl	800862a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d002      	beq.n	8009bf6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8009bf4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009bf6:	6879      	ldr	r1, [r7, #4]
 8009bf8:	68b8      	ldr	r0, [r7, #8]
 8009bfa:	f000 facd 	bl	800a198 <prvAddCurrentTaskToDelayedList>
	}
 8009bfe:	bf00      	nop
 8009c00:	3718      	adds	r7, #24
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	20000ca4 	.word	0x20000ca4

08009c0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b086      	sub	sp, #24
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	68db      	ldr	r3, [r3, #12]
 8009c18:	68db      	ldr	r3, [r3, #12]
 8009c1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d10a      	bne.n	8009c38 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c26:	f383 8811 	msr	BASEPRI, r3
 8009c2a:	f3bf 8f6f 	isb	sy
 8009c2e:	f3bf 8f4f 	dsb	sy
 8009c32:	60fb      	str	r3, [r7, #12]
}
 8009c34:	bf00      	nop
 8009c36:	e7fe      	b.n	8009c36 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	3318      	adds	r3, #24
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	f7fe fd51 	bl	80086e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c42:	4b1e      	ldr	r3, [pc, #120]	; (8009cbc <xTaskRemoveFromEventList+0xb0>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d11d      	bne.n	8009c86 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	3304      	adds	r3, #4
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7fe fd48 	bl	80086e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c58:	4b19      	ldr	r3, [pc, #100]	; (8009cc0 <xTaskRemoveFromEventList+0xb4>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	429a      	cmp	r2, r3
 8009c5e:	d903      	bls.n	8009c68 <xTaskRemoveFromEventList+0x5c>
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c64:	4a16      	ldr	r2, [pc, #88]	; (8009cc0 <xTaskRemoveFromEventList+0xb4>)
 8009c66:	6013      	str	r3, [r2, #0]
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c6c:	4613      	mov	r3, r2
 8009c6e:	009b      	lsls	r3, r3, #2
 8009c70:	4413      	add	r3, r2
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	4a13      	ldr	r2, [pc, #76]	; (8009cc4 <xTaskRemoveFromEventList+0xb8>)
 8009c76:	441a      	add	r2, r3
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	3304      	adds	r3, #4
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	4610      	mov	r0, r2
 8009c80:	f7fe fcd3 	bl	800862a <vListInsertEnd>
 8009c84:	e005      	b.n	8009c92 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	3318      	adds	r3, #24
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	480e      	ldr	r0, [pc, #56]	; (8009cc8 <xTaskRemoveFromEventList+0xbc>)
 8009c8e:	f7fe fccc 	bl	800862a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c96:	4b0d      	ldr	r3, [pc, #52]	; (8009ccc <xTaskRemoveFromEventList+0xc0>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d905      	bls.n	8009cac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009ca4:	4b0a      	ldr	r3, [pc, #40]	; (8009cd0 <xTaskRemoveFromEventList+0xc4>)
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	601a      	str	r2, [r3, #0]
 8009caa:	e001      	b.n	8009cb0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8009cac:	2300      	movs	r3, #0
 8009cae:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8009cb0:	697b      	ldr	r3, [r7, #20]
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3718      	adds	r7, #24
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
 8009cba:	bf00      	nop
 8009cbc:	200011a0 	.word	0x200011a0
 8009cc0:	20001180 	.word	0x20001180
 8009cc4:	20000ca8 	.word	0x20000ca8
 8009cc8:	20001138 	.word	0x20001138
 8009ccc:	20000ca4 	.word	0x20000ca4
 8009cd0:	2000118c 	.word	0x2000118c

08009cd4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b086      	sub	sp, #24
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8009cde:	4b29      	ldr	r3, [pc, #164]	; (8009d84 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d10a      	bne.n	8009cfc <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8009ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cea:	f383 8811 	msr	BASEPRI, r3
 8009cee:	f3bf 8f6f 	isb	sy
 8009cf2:	f3bf 8f4f 	dsb	sy
 8009cf6:	613b      	str	r3, [r7, #16]
}
 8009cf8:	bf00      	nop
 8009cfa:	e7fe      	b.n	8009cfa <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	68db      	ldr	r3, [r3, #12]
 8009d0a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d10a      	bne.n	8009d28 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8009d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d16:	f383 8811 	msr	BASEPRI, r3
 8009d1a:	f3bf 8f6f 	isb	sy
 8009d1e:	f3bf 8f4f 	dsb	sy
 8009d22:	60fb      	str	r3, [r7, #12]
}
 8009d24:	bf00      	nop
 8009d26:	e7fe      	b.n	8009d26 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f7fe fcdb 	bl	80086e4 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	3304      	adds	r3, #4
 8009d32:	4618      	mov	r0, r3
 8009d34:	f7fe fcd6 	bl	80086e4 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8009d38:	697b      	ldr	r3, [r7, #20]
 8009d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d3c:	4b12      	ldr	r3, [pc, #72]	; (8009d88 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	429a      	cmp	r2, r3
 8009d42:	d903      	bls.n	8009d4c <vTaskRemoveFromUnorderedEventList+0x78>
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d48:	4a0f      	ldr	r2, [pc, #60]	; (8009d88 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8009d4a:	6013      	str	r3, [r2, #0]
 8009d4c:	697b      	ldr	r3, [r7, #20]
 8009d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d50:	4613      	mov	r3, r2
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	4413      	add	r3, r2
 8009d56:	009b      	lsls	r3, r3, #2
 8009d58:	4a0c      	ldr	r2, [pc, #48]	; (8009d8c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8009d5a:	441a      	add	r2, r3
 8009d5c:	697b      	ldr	r3, [r7, #20]
 8009d5e:	3304      	adds	r3, #4
 8009d60:	4619      	mov	r1, r3
 8009d62:	4610      	mov	r0, r2
 8009d64:	f7fe fc61 	bl	800862a <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d6c:	4b08      	ldr	r3, [pc, #32]	; (8009d90 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d902      	bls.n	8009d7c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8009d76:	4b07      	ldr	r3, [pc, #28]	; (8009d94 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8009d78:	2201      	movs	r2, #1
 8009d7a:	601a      	str	r2, [r3, #0]
	}
}
 8009d7c:	bf00      	nop
 8009d7e:	3718      	adds	r7, #24
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}
 8009d84:	200011a0 	.word	0x200011a0
 8009d88:	20001180 	.word	0x20001180
 8009d8c:	20000ca8 	.word	0x20000ca8
 8009d90:	20000ca4 	.word	0x20000ca4
 8009d94:	2000118c 	.word	0x2000118c

08009d98 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009da0:	4b06      	ldr	r3, [pc, #24]	; (8009dbc <vTaskInternalSetTimeOutState+0x24>)
 8009da2:	681a      	ldr	r2, [r3, #0]
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009da8:	4b05      	ldr	r3, [pc, #20]	; (8009dc0 <vTaskInternalSetTimeOutState+0x28>)
 8009daa:	681a      	ldr	r2, [r3, #0]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	605a      	str	r2, [r3, #4]
}
 8009db0:	bf00      	nop
 8009db2:	370c      	adds	r7, #12
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr
 8009dbc:	20001190 	.word	0x20001190
 8009dc0:	2000117c 	.word	0x2000117c

08009dc4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b088      	sub	sp, #32
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d10a      	bne.n	8009dea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd8:	f383 8811 	msr	BASEPRI, r3
 8009ddc:	f3bf 8f6f 	isb	sy
 8009de0:	f3bf 8f4f 	dsb	sy
 8009de4:	613b      	str	r3, [r7, #16]
}
 8009de6:	bf00      	nop
 8009de8:	e7fe      	b.n	8009de8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d10a      	bne.n	8009e06 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df4:	f383 8811 	msr	BASEPRI, r3
 8009df8:	f3bf 8f6f 	isb	sy
 8009dfc:	f3bf 8f4f 	dsb	sy
 8009e00:	60fb      	str	r3, [r7, #12]
}
 8009e02:	bf00      	nop
 8009e04:	e7fe      	b.n	8009e04 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009e06:	f000 fe7d 	bl	800ab04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009e0a:	4b1d      	ldr	r3, [pc, #116]	; (8009e80 <xTaskCheckForTimeOut+0xbc>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	69ba      	ldr	r2, [r7, #24]
 8009e16:	1ad3      	subs	r3, r2, r3
 8009e18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e22:	d102      	bne.n	8009e2a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009e24:	2300      	movs	r3, #0
 8009e26:	61fb      	str	r3, [r7, #28]
 8009e28:	e023      	b.n	8009e72 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681a      	ldr	r2, [r3, #0]
 8009e2e:	4b15      	ldr	r3, [pc, #84]	; (8009e84 <xTaskCheckForTimeOut+0xc0>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d007      	beq.n	8009e46 <xTaskCheckForTimeOut+0x82>
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	69ba      	ldr	r2, [r7, #24]
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d302      	bcc.n	8009e46 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009e40:	2301      	movs	r3, #1
 8009e42:	61fb      	str	r3, [r7, #28]
 8009e44:	e015      	b.n	8009e72 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	697a      	ldr	r2, [r7, #20]
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d20b      	bcs.n	8009e68 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	1ad2      	subs	r2, r2, r3
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f7ff ff9b 	bl	8009d98 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009e62:	2300      	movs	r3, #0
 8009e64:	61fb      	str	r3, [r7, #28]
 8009e66:	e004      	b.n	8009e72 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009e6e:	2301      	movs	r3, #1
 8009e70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009e72:	f000 fe77 	bl	800ab64 <vPortExitCritical>

	return xReturn;
 8009e76:	69fb      	ldr	r3, [r7, #28]
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3720      	adds	r7, #32
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}
 8009e80:	2000117c 	.word	0x2000117c
 8009e84:	20001190 	.word	0x20001190

08009e88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009e88:	b480      	push	{r7}
 8009e8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009e8c:	4b03      	ldr	r3, [pc, #12]	; (8009e9c <vTaskMissedYield+0x14>)
 8009e8e:	2201      	movs	r2, #1
 8009e90:	601a      	str	r2, [r3, #0]
}
 8009e92:	bf00      	nop
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr
 8009e9c:	2000118c 	.word	0x2000118c

08009ea0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009ea8:	f000 f852 	bl	8009f50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009eac:	4b06      	ldr	r3, [pc, #24]	; (8009ec8 <prvIdleTask+0x28>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d9f9      	bls.n	8009ea8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009eb4:	4b05      	ldr	r3, [pc, #20]	; (8009ecc <prvIdleTask+0x2c>)
 8009eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eba:	601a      	str	r2, [r3, #0]
 8009ebc:	f3bf 8f4f 	dsb	sy
 8009ec0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009ec4:	e7f0      	b.n	8009ea8 <prvIdleTask+0x8>
 8009ec6:	bf00      	nop
 8009ec8:	20000ca8 	.word	0x20000ca8
 8009ecc:	e000ed04 	.word	0xe000ed04

08009ed0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b082      	sub	sp, #8
 8009ed4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	607b      	str	r3, [r7, #4]
 8009eda:	e00c      	b.n	8009ef6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	4613      	mov	r3, r2
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	4413      	add	r3, r2
 8009ee4:	009b      	lsls	r3, r3, #2
 8009ee6:	4a12      	ldr	r2, [pc, #72]	; (8009f30 <prvInitialiseTaskLists+0x60>)
 8009ee8:	4413      	add	r3, r2
 8009eea:	4618      	mov	r0, r3
 8009eec:	f7fe fb70 	bl	80085d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	607b      	str	r3, [r7, #4]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	2b37      	cmp	r3, #55	; 0x37
 8009efa:	d9ef      	bls.n	8009edc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009efc:	480d      	ldr	r0, [pc, #52]	; (8009f34 <prvInitialiseTaskLists+0x64>)
 8009efe:	f7fe fb67 	bl	80085d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009f02:	480d      	ldr	r0, [pc, #52]	; (8009f38 <prvInitialiseTaskLists+0x68>)
 8009f04:	f7fe fb64 	bl	80085d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009f08:	480c      	ldr	r0, [pc, #48]	; (8009f3c <prvInitialiseTaskLists+0x6c>)
 8009f0a:	f7fe fb61 	bl	80085d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009f0e:	480c      	ldr	r0, [pc, #48]	; (8009f40 <prvInitialiseTaskLists+0x70>)
 8009f10:	f7fe fb5e 	bl	80085d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009f14:	480b      	ldr	r0, [pc, #44]	; (8009f44 <prvInitialiseTaskLists+0x74>)
 8009f16:	f7fe fb5b 	bl	80085d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009f1a:	4b0b      	ldr	r3, [pc, #44]	; (8009f48 <prvInitialiseTaskLists+0x78>)
 8009f1c:	4a05      	ldr	r2, [pc, #20]	; (8009f34 <prvInitialiseTaskLists+0x64>)
 8009f1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009f20:	4b0a      	ldr	r3, [pc, #40]	; (8009f4c <prvInitialiseTaskLists+0x7c>)
 8009f22:	4a05      	ldr	r2, [pc, #20]	; (8009f38 <prvInitialiseTaskLists+0x68>)
 8009f24:	601a      	str	r2, [r3, #0]
}
 8009f26:	bf00      	nop
 8009f28:	3708      	adds	r7, #8
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	20000ca8 	.word	0x20000ca8
 8009f34:	20001108 	.word	0x20001108
 8009f38:	2000111c 	.word	0x2000111c
 8009f3c:	20001138 	.word	0x20001138
 8009f40:	2000114c 	.word	0x2000114c
 8009f44:	20001164 	.word	0x20001164
 8009f48:	20001130 	.word	0x20001130
 8009f4c:	20001134 	.word	0x20001134

08009f50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b082      	sub	sp, #8
 8009f54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009f56:	e019      	b.n	8009f8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009f58:	f000 fdd4 	bl	800ab04 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009f5c:	4b10      	ldr	r3, [pc, #64]	; (8009fa0 <prvCheckTasksWaitingTermination+0x50>)
 8009f5e:	68db      	ldr	r3, [r3, #12]
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	3304      	adds	r3, #4
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f7fe fbbb 	bl	80086e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009f6e:	4b0d      	ldr	r3, [pc, #52]	; (8009fa4 <prvCheckTasksWaitingTermination+0x54>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	3b01      	subs	r3, #1
 8009f74:	4a0b      	ldr	r2, [pc, #44]	; (8009fa4 <prvCheckTasksWaitingTermination+0x54>)
 8009f76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009f78:	4b0b      	ldr	r3, [pc, #44]	; (8009fa8 <prvCheckTasksWaitingTermination+0x58>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	3b01      	subs	r3, #1
 8009f7e:	4a0a      	ldr	r2, [pc, #40]	; (8009fa8 <prvCheckTasksWaitingTermination+0x58>)
 8009f80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009f82:	f000 fdef 	bl	800ab64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 f810 	bl	8009fac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009f8c:	4b06      	ldr	r3, [pc, #24]	; (8009fa8 <prvCheckTasksWaitingTermination+0x58>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d1e1      	bne.n	8009f58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009f94:	bf00      	nop
 8009f96:	bf00      	nop
 8009f98:	3708      	adds	r7, #8
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	2000114c 	.word	0x2000114c
 8009fa4:	20001178 	.word	0x20001178
 8009fa8:	20001160 	.word	0x20001160

08009fac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b084      	sub	sp, #16
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	3358      	adds	r3, #88	; 0x58
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f001 fabf 	bl	800b53c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d108      	bne.n	8009fda <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f000 ff7f 	bl	800aed0 <vPortFree>
				vPortFree( pxTCB );
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 ff7c 	bl	800aed0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009fd8:	e018      	b.n	800a00c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d103      	bne.n	8009fec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	f000 ff73 	bl	800aed0 <vPortFree>
	}
 8009fea:	e00f      	b.n	800a00c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8009ff2:	2b02      	cmp	r3, #2
 8009ff4:	d00a      	beq.n	800a00c <prvDeleteTCB+0x60>
	__asm volatile
 8009ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffa:	f383 8811 	msr	BASEPRI, r3
 8009ffe:	f3bf 8f6f 	isb	sy
 800a002:	f3bf 8f4f 	dsb	sy
 800a006:	60fb      	str	r3, [r7, #12]
}
 800a008:	bf00      	nop
 800a00a:	e7fe      	b.n	800a00a <prvDeleteTCB+0x5e>
	}
 800a00c:	bf00      	nop
 800a00e:	3710      	adds	r7, #16
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a01a:	4b0f      	ldr	r3, [pc, #60]	; (800a058 <prvResetNextTaskUnblockTime+0x44>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	2b00      	cmp	r3, #0
 800a022:	d101      	bne.n	800a028 <prvResetNextTaskUnblockTime+0x14>
 800a024:	2301      	movs	r3, #1
 800a026:	e000      	b.n	800a02a <prvResetNextTaskUnblockTime+0x16>
 800a028:	2300      	movs	r3, #0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d004      	beq.n	800a038 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a02e:	4b0b      	ldr	r3, [pc, #44]	; (800a05c <prvResetNextTaskUnblockTime+0x48>)
 800a030:	f04f 32ff 	mov.w	r2, #4294967295
 800a034:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a036:	e008      	b.n	800a04a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a038:	4b07      	ldr	r3, [pc, #28]	; (800a058 <prvResetNextTaskUnblockTime+0x44>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	68db      	ldr	r3, [r3, #12]
 800a03e:	68db      	ldr	r3, [r3, #12]
 800a040:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	4a05      	ldr	r2, [pc, #20]	; (800a05c <prvResetNextTaskUnblockTime+0x48>)
 800a048:	6013      	str	r3, [r2, #0]
}
 800a04a:	bf00      	nop
 800a04c:	370c      	adds	r7, #12
 800a04e:	46bd      	mov	sp, r7
 800a050:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a054:	4770      	bx	lr
 800a056:	bf00      	nop
 800a058:	20001130 	.word	0x20001130
 800a05c:	20001198 	.word	0x20001198

0800a060 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a060:	b480      	push	{r7}
 800a062:	b083      	sub	sp, #12
 800a064:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a066:	4b05      	ldr	r3, [pc, #20]	; (800a07c <xTaskGetCurrentTaskHandle+0x1c>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a06c:	687b      	ldr	r3, [r7, #4]
	}
 800a06e:	4618      	mov	r0, r3
 800a070:	370c      	adds	r7, #12
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr
 800a07a:	bf00      	nop
 800a07c:	20000ca4 	.word	0x20000ca4

0800a080 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a080:	b480      	push	{r7}
 800a082:	b083      	sub	sp, #12
 800a084:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a086:	4b0b      	ldr	r3, [pc, #44]	; (800a0b4 <xTaskGetSchedulerState+0x34>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d102      	bne.n	800a094 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a08e:	2301      	movs	r3, #1
 800a090:	607b      	str	r3, [r7, #4]
 800a092:	e008      	b.n	800a0a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a094:	4b08      	ldr	r3, [pc, #32]	; (800a0b8 <xTaskGetSchedulerState+0x38>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d102      	bne.n	800a0a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a09c:	2302      	movs	r3, #2
 800a09e:	607b      	str	r3, [r7, #4]
 800a0a0:	e001      	b.n	800a0a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a0a6:	687b      	ldr	r3, [r7, #4]
	}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	370c      	adds	r7, #12
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr
 800a0b4:	20001184 	.word	0x20001184
 800a0b8:	200011a0 	.word	0x200011a0

0800a0bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b086      	sub	sp, #24
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d056      	beq.n	800a180 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a0d2:	4b2e      	ldr	r3, [pc, #184]	; (800a18c <xTaskPriorityDisinherit+0xd0>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	693a      	ldr	r2, [r7, #16]
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d00a      	beq.n	800a0f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e0:	f383 8811 	msr	BASEPRI, r3
 800a0e4:	f3bf 8f6f 	isb	sy
 800a0e8:	f3bf 8f4f 	dsb	sy
 800a0ec:	60fb      	str	r3, [r7, #12]
}
 800a0ee:	bf00      	nop
 800a0f0:	e7fe      	b.n	800a0f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d10a      	bne.n	800a110 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0fe:	f383 8811 	msr	BASEPRI, r3
 800a102:	f3bf 8f6f 	isb	sy
 800a106:	f3bf 8f4f 	dsb	sy
 800a10a:	60bb      	str	r3, [r7, #8]
}
 800a10c:	bf00      	nop
 800a10e:	e7fe      	b.n	800a10e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a114:	1e5a      	subs	r2, r3, #1
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	655a      	str	r2, [r3, #84]	; 0x54

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a122:	429a      	cmp	r2, r3
 800a124:	d02c      	beq.n	800a180 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d128      	bne.n	800a180 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	3304      	adds	r3, #4
 800a132:	4618      	mov	r0, r3
 800a134:	f7fe fad6 	bl	80086e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a144:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a150:	4b0f      	ldr	r3, [pc, #60]	; (800a190 <xTaskPriorityDisinherit+0xd4>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	429a      	cmp	r2, r3
 800a156:	d903      	bls.n	800a160 <xTaskPriorityDisinherit+0xa4>
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a15c:	4a0c      	ldr	r2, [pc, #48]	; (800a190 <xTaskPriorityDisinherit+0xd4>)
 800a15e:	6013      	str	r3, [r2, #0]
 800a160:	693b      	ldr	r3, [r7, #16]
 800a162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a164:	4613      	mov	r3, r2
 800a166:	009b      	lsls	r3, r3, #2
 800a168:	4413      	add	r3, r2
 800a16a:	009b      	lsls	r3, r3, #2
 800a16c:	4a09      	ldr	r2, [pc, #36]	; (800a194 <xTaskPriorityDisinherit+0xd8>)
 800a16e:	441a      	add	r2, r3
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	3304      	adds	r3, #4
 800a174:	4619      	mov	r1, r3
 800a176:	4610      	mov	r0, r2
 800a178:	f7fe fa57 	bl	800862a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a17c:	2301      	movs	r3, #1
 800a17e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a180:	697b      	ldr	r3, [r7, #20]
	}
 800a182:	4618      	mov	r0, r3
 800a184:	3718      	adds	r7, #24
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	20000ca4 	.word	0x20000ca4
 800a190:	20001180 	.word	0x20001180
 800a194:	20000ca8 	.word	0x20000ca8

0800a198 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
 800a1a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a1a2:	4b21      	ldr	r3, [pc, #132]	; (800a228 <prvAddCurrentTaskToDelayedList+0x90>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a1a8:	4b20      	ldr	r3, [pc, #128]	; (800a22c <prvAddCurrentTaskToDelayedList+0x94>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	3304      	adds	r3, #4
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f7fe fa98 	bl	80086e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ba:	d10a      	bne.n	800a1d2 <prvAddCurrentTaskToDelayedList+0x3a>
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d007      	beq.n	800a1d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1c2:	4b1a      	ldr	r3, [pc, #104]	; (800a22c <prvAddCurrentTaskToDelayedList+0x94>)
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	3304      	adds	r3, #4
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	4819      	ldr	r0, [pc, #100]	; (800a230 <prvAddCurrentTaskToDelayedList+0x98>)
 800a1cc:	f7fe fa2d 	bl	800862a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a1d0:	e026      	b.n	800a220 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a1d2:	68fa      	ldr	r2, [r7, #12]
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	4413      	add	r3, r2
 800a1d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a1da:	4b14      	ldr	r3, [pc, #80]	; (800a22c <prvAddCurrentTaskToDelayedList+0x94>)
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	68ba      	ldr	r2, [r7, #8]
 800a1e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a1e2:	68ba      	ldr	r2, [r7, #8]
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d209      	bcs.n	800a1fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1ea:	4b12      	ldr	r3, [pc, #72]	; (800a234 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a1ec:	681a      	ldr	r2, [r3, #0]
 800a1ee:	4b0f      	ldr	r3, [pc, #60]	; (800a22c <prvAddCurrentTaskToDelayedList+0x94>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	3304      	adds	r3, #4
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	4610      	mov	r0, r2
 800a1f8:	f7fe fa3b 	bl	8008672 <vListInsert>
}
 800a1fc:	e010      	b.n	800a220 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a1fe:	4b0e      	ldr	r3, [pc, #56]	; (800a238 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	4b0a      	ldr	r3, [pc, #40]	; (800a22c <prvAddCurrentTaskToDelayedList+0x94>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	3304      	adds	r3, #4
 800a208:	4619      	mov	r1, r3
 800a20a:	4610      	mov	r0, r2
 800a20c:	f7fe fa31 	bl	8008672 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a210:	4b0a      	ldr	r3, [pc, #40]	; (800a23c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	68ba      	ldr	r2, [r7, #8]
 800a216:	429a      	cmp	r2, r3
 800a218:	d202      	bcs.n	800a220 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a21a:	4a08      	ldr	r2, [pc, #32]	; (800a23c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	6013      	str	r3, [r2, #0]
}
 800a220:	bf00      	nop
 800a222:	3710      	adds	r7, #16
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}
 800a228:	2000117c 	.word	0x2000117c
 800a22c:	20000ca4 	.word	0x20000ca4
 800a230:	20001164 	.word	0x20001164
 800a234:	20001134 	.word	0x20001134
 800a238:	20001130 	.word	0x20001130
 800a23c:	20001198 	.word	0x20001198

0800a240 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b08a      	sub	sp, #40	; 0x28
 800a244:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a246:	2300      	movs	r3, #0
 800a248:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a24a:	f000 facb 	bl	800a7e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a24e:	4b1c      	ldr	r3, [pc, #112]	; (800a2c0 <xTimerCreateTimerTask+0x80>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d021      	beq.n	800a29a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a256:	2300      	movs	r3, #0
 800a258:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a25a:	2300      	movs	r3, #0
 800a25c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a25e:	1d3a      	adds	r2, r7, #4
 800a260:	f107 0108 	add.w	r1, r7, #8
 800a264:	f107 030c 	add.w	r3, r7, #12
 800a268:	4618      	mov	r0, r3
 800a26a:	f7fe f81b 	bl	80082a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a26e:	6879      	ldr	r1, [r7, #4]
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	68fa      	ldr	r2, [r7, #12]
 800a274:	9202      	str	r2, [sp, #8]
 800a276:	9301      	str	r3, [sp, #4]
 800a278:	2302      	movs	r3, #2
 800a27a:	9300      	str	r3, [sp, #0]
 800a27c:	2300      	movs	r3, #0
 800a27e:	460a      	mov	r2, r1
 800a280:	4910      	ldr	r1, [pc, #64]	; (800a2c4 <xTimerCreateTimerTask+0x84>)
 800a282:	4811      	ldr	r0, [pc, #68]	; (800a2c8 <xTimerCreateTimerTask+0x88>)
 800a284:	f7fe ffca 	bl	800921c <xTaskCreateStatic>
 800a288:	4603      	mov	r3, r0
 800a28a:	4a10      	ldr	r2, [pc, #64]	; (800a2cc <xTimerCreateTimerTask+0x8c>)
 800a28c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a28e:	4b0f      	ldr	r3, [pc, #60]	; (800a2cc <xTimerCreateTimerTask+0x8c>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	2b00      	cmp	r3, #0
 800a294:	d001      	beq.n	800a29a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a296:	2301      	movs	r3, #1
 800a298:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d10a      	bne.n	800a2b6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a4:	f383 8811 	msr	BASEPRI, r3
 800a2a8:	f3bf 8f6f 	isb	sy
 800a2ac:	f3bf 8f4f 	dsb	sy
 800a2b0:	613b      	str	r3, [r7, #16]
}
 800a2b2:	bf00      	nop
 800a2b4:	e7fe      	b.n	800a2b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a2b6:	697b      	ldr	r3, [r7, #20]
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3718      	adds	r7, #24
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}
 800a2c0:	200011d4 	.word	0x200011d4
 800a2c4:	0800c3c0 	.word	0x0800c3c0
 800a2c8:	0800a3ed 	.word	0x0800a3ed
 800a2cc:	200011d8 	.word	0x200011d8

0800a2d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b08a      	sub	sp, #40	; 0x28
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	60f8      	str	r0, [r7, #12]
 800a2d8:	60b9      	str	r1, [r7, #8]
 800a2da:	607a      	str	r2, [r7, #4]
 800a2dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d10a      	bne.n	800a2fe <xTimerGenericCommand+0x2e>
	__asm volatile
 800a2e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ec:	f383 8811 	msr	BASEPRI, r3
 800a2f0:	f3bf 8f6f 	isb	sy
 800a2f4:	f3bf 8f4f 	dsb	sy
 800a2f8:	623b      	str	r3, [r7, #32]
}
 800a2fa:	bf00      	nop
 800a2fc:	e7fe      	b.n	800a2fc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a2fe:	4b1a      	ldr	r3, [pc, #104]	; (800a368 <xTimerGenericCommand+0x98>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d02a      	beq.n	800a35c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	2b05      	cmp	r3, #5
 800a316:	dc18      	bgt.n	800a34a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a318:	f7ff feb2 	bl	800a080 <xTaskGetSchedulerState>
 800a31c:	4603      	mov	r3, r0
 800a31e:	2b02      	cmp	r3, #2
 800a320:	d109      	bne.n	800a336 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a322:	4b11      	ldr	r3, [pc, #68]	; (800a368 <xTimerGenericCommand+0x98>)
 800a324:	6818      	ldr	r0, [r3, #0]
 800a326:	f107 0110 	add.w	r1, r7, #16
 800a32a:	2300      	movs	r3, #0
 800a32c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a32e:	f7fe fb91 	bl	8008a54 <xQueueGenericSend>
 800a332:	6278      	str	r0, [r7, #36]	; 0x24
 800a334:	e012      	b.n	800a35c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a336:	4b0c      	ldr	r3, [pc, #48]	; (800a368 <xTimerGenericCommand+0x98>)
 800a338:	6818      	ldr	r0, [r3, #0]
 800a33a:	f107 0110 	add.w	r1, r7, #16
 800a33e:	2300      	movs	r3, #0
 800a340:	2200      	movs	r2, #0
 800a342:	f7fe fb87 	bl	8008a54 <xQueueGenericSend>
 800a346:	6278      	str	r0, [r7, #36]	; 0x24
 800a348:	e008      	b.n	800a35c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a34a:	4b07      	ldr	r3, [pc, #28]	; (800a368 <xTimerGenericCommand+0x98>)
 800a34c:	6818      	ldr	r0, [r3, #0]
 800a34e:	f107 0110 	add.w	r1, r7, #16
 800a352:	2300      	movs	r3, #0
 800a354:	683a      	ldr	r2, [r7, #0]
 800a356:	f7fe fc7b 	bl	8008c50 <xQueueGenericSendFromISR>
 800a35a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3728      	adds	r7, #40	; 0x28
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	200011d4 	.word	0x200011d4

0800a36c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b088      	sub	sp, #32
 800a370:	af02      	add	r7, sp, #8
 800a372:	6078      	str	r0, [r7, #4]
 800a374:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a376:	4b1c      	ldr	r3, [pc, #112]	; (800a3e8 <prvProcessExpiredTimer+0x7c>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	3304      	adds	r3, #4
 800a384:	4618      	mov	r0, r3
 800a386:	f7fe f9ad 	bl	80086e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	69db      	ldr	r3, [r3, #28]
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d122      	bne.n	800a3d8 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	699a      	ldr	r2, [r3, #24]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	18d1      	adds	r1, r2, r3
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	683a      	ldr	r2, [r7, #0]
 800a39e:	6978      	ldr	r0, [r7, #20]
 800a3a0:	f000 f8c8 	bl	800a534 <prvInsertTimerInActiveList>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d016      	beq.n	800a3d8 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	9300      	str	r3, [sp, #0]
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	2100      	movs	r1, #0
 800a3b4:	6978      	ldr	r0, [r7, #20]
 800a3b6:	f7ff ff8b 	bl	800a2d0 <xTimerGenericCommand>
 800a3ba:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d10a      	bne.n	800a3d8 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800a3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3c6:	f383 8811 	msr	BASEPRI, r3
 800a3ca:	f3bf 8f6f 	isb	sy
 800a3ce:	f3bf 8f4f 	dsb	sy
 800a3d2:	60fb      	str	r3, [r7, #12]
}
 800a3d4:	bf00      	nop
 800a3d6:	e7fe      	b.n	800a3d6 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a3d8:	697b      	ldr	r3, [r7, #20]
 800a3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3dc:	6978      	ldr	r0, [r7, #20]
 800a3de:	4798      	blx	r3
}
 800a3e0:	bf00      	nop
 800a3e2:	3718      	adds	r7, #24
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}
 800a3e8:	200011cc 	.word	0x200011cc

0800a3ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800a3ec:	b580      	push	{r7, lr}
 800a3ee:	b084      	sub	sp, #16
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a3f4:	f107 0308 	add.w	r3, r7, #8
 800a3f8:	4618      	mov	r0, r3
 800a3fa:	f000 f857 	bl	800a4ac <prvGetNextExpireTime>
 800a3fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	4619      	mov	r1, r3
 800a404:	68f8      	ldr	r0, [r7, #12]
 800a406:	f000 f803 	bl	800a410 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a40a:	f000 f8d5 	bl	800a5b8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a40e:	e7f1      	b.n	800a3f4 <prvTimerTask+0x8>

0800a410 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a41a:	f7ff f9c9 	bl	80097b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a41e:	f107 0308 	add.w	r3, r7, #8
 800a422:	4618      	mov	r0, r3
 800a424:	f000 f866 	bl	800a4f4 <prvSampleTimeNow>
 800a428:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d130      	bne.n	800a492 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d10a      	bne.n	800a44c <prvProcessTimerOrBlockTask+0x3c>
 800a436:	687a      	ldr	r2, [r7, #4]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d806      	bhi.n	800a44c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a43e:	f7ff f9c5 	bl	80097cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a442:	68f9      	ldr	r1, [r7, #12]
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f7ff ff91 	bl	800a36c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a44a:	e024      	b.n	800a496 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d008      	beq.n	800a464 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a452:	4b13      	ldr	r3, [pc, #76]	; (800a4a0 <prvProcessTimerOrBlockTask+0x90>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	bf0c      	ite	eq
 800a45c:	2301      	moveq	r3, #1
 800a45e:	2300      	movne	r3, #0
 800a460:	b2db      	uxtb	r3, r3
 800a462:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a464:	4b0f      	ldr	r3, [pc, #60]	; (800a4a4 <prvProcessTimerOrBlockTask+0x94>)
 800a466:	6818      	ldr	r0, [r3, #0]
 800a468:	687a      	ldr	r2, [r7, #4]
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	1ad3      	subs	r3, r2, r3
 800a46e:	683a      	ldr	r2, [r7, #0]
 800a470:	4619      	mov	r1, r3
 800a472:	f7fe fe9f 	bl	80091b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a476:	f7ff f9a9 	bl	80097cc <xTaskResumeAll>
 800a47a:	4603      	mov	r3, r0
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d10a      	bne.n	800a496 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a480:	4b09      	ldr	r3, [pc, #36]	; (800a4a8 <prvProcessTimerOrBlockTask+0x98>)
 800a482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a486:	601a      	str	r2, [r3, #0]
 800a488:	f3bf 8f4f 	dsb	sy
 800a48c:	f3bf 8f6f 	isb	sy
}
 800a490:	e001      	b.n	800a496 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a492:	f7ff f99b 	bl	80097cc <xTaskResumeAll>
}
 800a496:	bf00      	nop
 800a498:	3710      	adds	r7, #16
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	200011d0 	.word	0x200011d0
 800a4a4:	200011d4 	.word	0x200011d4
 800a4a8:	e000ed04 	.word	0xe000ed04

0800a4ac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b085      	sub	sp, #20
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a4b4:	4b0e      	ldr	r3, [pc, #56]	; (800a4f0 <prvGetNextExpireTime+0x44>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	bf0c      	ite	eq
 800a4be:	2301      	moveq	r3, #1
 800a4c0:	2300      	movne	r3, #0
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d105      	bne.n	800a4de <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a4d2:	4b07      	ldr	r3, [pc, #28]	; (800a4f0 <prvGetNextExpireTime+0x44>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	68db      	ldr	r3, [r3, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	60fb      	str	r3, [r7, #12]
 800a4dc:	e001      	b.n	800a4e2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a4e2:	68fb      	ldr	r3, [r7, #12]
}
 800a4e4:	4618      	mov	r0, r3
 800a4e6:	3714      	adds	r7, #20
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr
 800a4f0:	200011cc 	.word	0x200011cc

0800a4f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b084      	sub	sp, #16
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a4fc:	f7ff fa04 	bl	8009908 <xTaskGetTickCount>
 800a500:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a502:	4b0b      	ldr	r3, [pc, #44]	; (800a530 <prvSampleTimeNow+0x3c>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	68fa      	ldr	r2, [r7, #12]
 800a508:	429a      	cmp	r2, r3
 800a50a:	d205      	bcs.n	800a518 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a50c:	f000 f908 	bl	800a720 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2201      	movs	r2, #1
 800a514:	601a      	str	r2, [r3, #0]
 800a516:	e002      	b.n	800a51e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2200      	movs	r2, #0
 800a51c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a51e:	4a04      	ldr	r2, [pc, #16]	; (800a530 <prvSampleTimeNow+0x3c>)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a524:	68fb      	ldr	r3, [r7, #12]
}
 800a526:	4618      	mov	r0, r3
 800a528:	3710      	adds	r7, #16
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	bf00      	nop
 800a530:	200011dc 	.word	0x200011dc

0800a534 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b086      	sub	sp, #24
 800a538:	af00      	add	r7, sp, #0
 800a53a:	60f8      	str	r0, [r7, #12]
 800a53c:	60b9      	str	r1, [r7, #8]
 800a53e:	607a      	str	r2, [r7, #4]
 800a540:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a542:	2300      	movs	r3, #0
 800a544:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	68ba      	ldr	r2, [r7, #8]
 800a54a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	68fa      	ldr	r2, [r7, #12]
 800a550:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a552:	68ba      	ldr	r2, [r7, #8]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	429a      	cmp	r2, r3
 800a558:	d812      	bhi.n	800a580 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	1ad2      	subs	r2, r2, r3
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	699b      	ldr	r3, [r3, #24]
 800a564:	429a      	cmp	r2, r3
 800a566:	d302      	bcc.n	800a56e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a568:	2301      	movs	r3, #1
 800a56a:	617b      	str	r3, [r7, #20]
 800a56c:	e01b      	b.n	800a5a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a56e:	4b10      	ldr	r3, [pc, #64]	; (800a5b0 <prvInsertTimerInActiveList+0x7c>)
 800a570:	681a      	ldr	r2, [r3, #0]
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	3304      	adds	r3, #4
 800a576:	4619      	mov	r1, r3
 800a578:	4610      	mov	r0, r2
 800a57a:	f7fe f87a 	bl	8008672 <vListInsert>
 800a57e:	e012      	b.n	800a5a6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a580:	687a      	ldr	r2, [r7, #4]
 800a582:	683b      	ldr	r3, [r7, #0]
 800a584:	429a      	cmp	r2, r3
 800a586:	d206      	bcs.n	800a596 <prvInsertTimerInActiveList+0x62>
 800a588:	68ba      	ldr	r2, [r7, #8]
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	429a      	cmp	r2, r3
 800a58e:	d302      	bcc.n	800a596 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a590:	2301      	movs	r3, #1
 800a592:	617b      	str	r3, [r7, #20]
 800a594:	e007      	b.n	800a5a6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a596:	4b07      	ldr	r3, [pc, #28]	; (800a5b4 <prvInsertTimerInActiveList+0x80>)
 800a598:	681a      	ldr	r2, [r3, #0]
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	3304      	adds	r3, #4
 800a59e:	4619      	mov	r1, r3
 800a5a0:	4610      	mov	r0, r2
 800a5a2:	f7fe f866 	bl	8008672 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a5a6:	697b      	ldr	r3, [r7, #20]
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3718      	adds	r7, #24
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	200011d0 	.word	0x200011d0
 800a5b4:	200011cc 	.word	0x200011cc

0800a5b8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b08e      	sub	sp, #56	; 0x38
 800a5bc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a5be:	e09d      	b.n	800a6fc <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	da18      	bge.n	800a5f8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a5c6:	1d3b      	adds	r3, r7, #4
 800a5c8:	3304      	adds	r3, #4
 800a5ca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d10a      	bne.n	800a5e8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d6:	f383 8811 	msr	BASEPRI, r3
 800a5da:	f3bf 8f6f 	isb	sy
 800a5de:	f3bf 8f4f 	dsb	sy
 800a5e2:	61fb      	str	r3, [r7, #28]
}
 800a5e4:	bf00      	nop
 800a5e6:	e7fe      	b.n	800a5e6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5ee:	6850      	ldr	r0, [r2, #4]
 800a5f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5f2:	6892      	ldr	r2, [r2, #8]
 800a5f4:	4611      	mov	r1, r2
 800a5f6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	db7e      	blt.n	800a6fc <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a604:	695b      	ldr	r3, [r3, #20]
 800a606:	2b00      	cmp	r3, #0
 800a608:	d004      	beq.n	800a614 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a60c:	3304      	adds	r3, #4
 800a60e:	4618      	mov	r0, r3
 800a610:	f7fe f868 	bl	80086e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a614:	463b      	mov	r3, r7
 800a616:	4618      	mov	r0, r3
 800a618:	f7ff ff6c 	bl	800a4f4 <prvSampleTimeNow>
 800a61c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	2b09      	cmp	r3, #9
 800a622:	d86a      	bhi.n	800a6fa <prvProcessReceivedCommands+0x142>
 800a624:	a201      	add	r2, pc, #4	; (adr r2, 800a62c <prvProcessReceivedCommands+0x74>)
 800a626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a62a:	bf00      	nop
 800a62c:	0800a655 	.word	0x0800a655
 800a630:	0800a655 	.word	0x0800a655
 800a634:	0800a655 	.word	0x0800a655
 800a638:	0800a6fd 	.word	0x0800a6fd
 800a63c:	0800a6b1 	.word	0x0800a6b1
 800a640:	0800a6e9 	.word	0x0800a6e9
 800a644:	0800a655 	.word	0x0800a655
 800a648:	0800a655 	.word	0x0800a655
 800a64c:	0800a6fd 	.word	0x0800a6fd
 800a650:	0800a6b1 	.word	0x0800a6b1
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a654:	68ba      	ldr	r2, [r7, #8]
 800a656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a658:	699b      	ldr	r3, [r3, #24]
 800a65a:	18d1      	adds	r1, r2, r3
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a660:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a662:	f7ff ff67 	bl	800a534 <prvInsertTimerInActiveList>
 800a666:	4603      	mov	r3, r0
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d047      	beq.n	800a6fc <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a672:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a676:	69db      	ldr	r3, [r3, #28]
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d13f      	bne.n	800a6fc <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a67c:	68ba      	ldr	r2, [r7, #8]
 800a67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a680:	699b      	ldr	r3, [r3, #24]
 800a682:	441a      	add	r2, r3
 800a684:	2300      	movs	r3, #0
 800a686:	9300      	str	r3, [sp, #0]
 800a688:	2300      	movs	r3, #0
 800a68a:	2100      	movs	r1, #0
 800a68c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a68e:	f7ff fe1f 	bl	800a2d0 <xTimerGenericCommand>
 800a692:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a694:	6a3b      	ldr	r3, [r7, #32]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d130      	bne.n	800a6fc <prvProcessReceivedCommands+0x144>
	__asm volatile
 800a69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a69e:	f383 8811 	msr	BASEPRI, r3
 800a6a2:	f3bf 8f6f 	isb	sy
 800a6a6:	f3bf 8f4f 	dsb	sy
 800a6aa:	61bb      	str	r3, [r7, #24]
}
 800a6ac:	bf00      	nop
 800a6ae:	e7fe      	b.n	800a6ae <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a6b0:	68ba      	ldr	r2, [r7, #8]
 800a6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a6b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6b8:	699b      	ldr	r3, [r3, #24]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d10a      	bne.n	800a6d4 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800a6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c2:	f383 8811 	msr	BASEPRI, r3
 800a6c6:	f3bf 8f6f 	isb	sy
 800a6ca:	f3bf 8f4f 	dsb	sy
 800a6ce:	617b      	str	r3, [r7, #20]
}
 800a6d0:	bf00      	nop
 800a6d2:	e7fe      	b.n	800a6d2 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a6d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d6:	699a      	ldr	r2, [r3, #24]
 800a6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6da:	18d1      	adds	r1, r2, r3
 800a6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6e2:	f7ff ff27 	bl	800a534 <prvInsertTimerInActiveList>
					break;
 800a6e6:	e009      	b.n	800a6fc <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d104      	bne.n	800a6fc <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800a6f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a6f4:	f000 fbec 	bl	800aed0 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a6f8:	e000      	b.n	800a6fc <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 800a6fa:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a6fc:	4b07      	ldr	r3, [pc, #28]	; (800a71c <prvProcessReceivedCommands+0x164>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	1d39      	adds	r1, r7, #4
 800a702:	2200      	movs	r2, #0
 800a704:	4618      	mov	r0, r3
 800a706:	f7fe fb3b 	bl	8008d80 <xQueueReceive>
 800a70a:	4603      	mov	r3, r0
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	f47f af57 	bne.w	800a5c0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a712:	bf00      	nop
 800a714:	bf00      	nop
 800a716:	3730      	adds	r7, #48	; 0x30
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}
 800a71c:	200011d4 	.word	0x200011d4

0800a720 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b088      	sub	sp, #32
 800a724:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a726:	e045      	b.n	800a7b4 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a728:	4b2c      	ldr	r3, [pc, #176]	; (800a7dc <prvSwitchTimerLists+0xbc>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	68db      	ldr	r3, [r3, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a732:	4b2a      	ldr	r3, [pc, #168]	; (800a7dc <prvSwitchTimerLists+0xbc>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	68db      	ldr	r3, [r3, #12]
 800a73a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	3304      	adds	r3, #4
 800a740:	4618      	mov	r0, r3
 800a742:	f7fd ffcf 	bl	80086e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a74a:	68f8      	ldr	r0, [r7, #12]
 800a74c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	69db      	ldr	r3, [r3, #28]
 800a752:	2b01      	cmp	r3, #1
 800a754:	d12e      	bne.n	800a7b4 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	699b      	ldr	r3, [r3, #24]
 800a75a:	693a      	ldr	r2, [r7, #16]
 800a75c:	4413      	add	r3, r2
 800a75e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	429a      	cmp	r2, r3
 800a766:	d90e      	bls.n	800a786 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	68ba      	ldr	r2, [r7, #8]
 800a76c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	68fa      	ldr	r2, [r7, #12]
 800a772:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a774:	4b19      	ldr	r3, [pc, #100]	; (800a7dc <prvSwitchTimerLists+0xbc>)
 800a776:	681a      	ldr	r2, [r3, #0]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	3304      	adds	r3, #4
 800a77c:	4619      	mov	r1, r3
 800a77e:	4610      	mov	r0, r2
 800a780:	f7fd ff77 	bl	8008672 <vListInsert>
 800a784:	e016      	b.n	800a7b4 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a786:	2300      	movs	r3, #0
 800a788:	9300      	str	r3, [sp, #0]
 800a78a:	2300      	movs	r3, #0
 800a78c:	693a      	ldr	r2, [r7, #16]
 800a78e:	2100      	movs	r1, #0
 800a790:	68f8      	ldr	r0, [r7, #12]
 800a792:	f7ff fd9d 	bl	800a2d0 <xTimerGenericCommand>
 800a796:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d10a      	bne.n	800a7b4 <prvSwitchTimerLists+0x94>
	__asm volatile
 800a79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7a2:	f383 8811 	msr	BASEPRI, r3
 800a7a6:	f3bf 8f6f 	isb	sy
 800a7aa:	f3bf 8f4f 	dsb	sy
 800a7ae:	603b      	str	r3, [r7, #0]
}
 800a7b0:	bf00      	nop
 800a7b2:	e7fe      	b.n	800a7b2 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a7b4:	4b09      	ldr	r3, [pc, #36]	; (800a7dc <prvSwitchTimerLists+0xbc>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d1b4      	bne.n	800a728 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a7be:	4b07      	ldr	r3, [pc, #28]	; (800a7dc <prvSwitchTimerLists+0xbc>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a7c4:	4b06      	ldr	r3, [pc, #24]	; (800a7e0 <prvSwitchTimerLists+0xc0>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	4a04      	ldr	r2, [pc, #16]	; (800a7dc <prvSwitchTimerLists+0xbc>)
 800a7ca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a7cc:	4a04      	ldr	r2, [pc, #16]	; (800a7e0 <prvSwitchTimerLists+0xc0>)
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	6013      	str	r3, [r2, #0]
}
 800a7d2:	bf00      	nop
 800a7d4:	3718      	adds	r7, #24
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	200011cc 	.word	0x200011cc
 800a7e0:	200011d0 	.word	0x200011d0

0800a7e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b082      	sub	sp, #8
 800a7e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a7ea:	f000 f98b 	bl	800ab04 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a7ee:	4b15      	ldr	r3, [pc, #84]	; (800a844 <prvCheckForValidListAndQueue+0x60>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d120      	bne.n	800a838 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a7f6:	4814      	ldr	r0, [pc, #80]	; (800a848 <prvCheckForValidListAndQueue+0x64>)
 800a7f8:	f7fd feea 	bl	80085d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a7fc:	4813      	ldr	r0, [pc, #76]	; (800a84c <prvCheckForValidListAndQueue+0x68>)
 800a7fe:	f7fd fee7 	bl	80085d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a802:	4b13      	ldr	r3, [pc, #76]	; (800a850 <prvCheckForValidListAndQueue+0x6c>)
 800a804:	4a10      	ldr	r2, [pc, #64]	; (800a848 <prvCheckForValidListAndQueue+0x64>)
 800a806:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a808:	4b12      	ldr	r3, [pc, #72]	; (800a854 <prvCheckForValidListAndQueue+0x70>)
 800a80a:	4a10      	ldr	r2, [pc, #64]	; (800a84c <prvCheckForValidListAndQueue+0x68>)
 800a80c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a80e:	2300      	movs	r3, #0
 800a810:	9300      	str	r3, [sp, #0]
 800a812:	4b11      	ldr	r3, [pc, #68]	; (800a858 <prvCheckForValidListAndQueue+0x74>)
 800a814:	4a11      	ldr	r2, [pc, #68]	; (800a85c <prvCheckForValidListAndQueue+0x78>)
 800a816:	2110      	movs	r1, #16
 800a818:	200a      	movs	r0, #10
 800a81a:	f7fd fff5 	bl	8008808 <xQueueGenericCreateStatic>
 800a81e:	4603      	mov	r3, r0
 800a820:	4a08      	ldr	r2, [pc, #32]	; (800a844 <prvCheckForValidListAndQueue+0x60>)
 800a822:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a824:	4b07      	ldr	r3, [pc, #28]	; (800a844 <prvCheckForValidListAndQueue+0x60>)
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d005      	beq.n	800a838 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a82c:	4b05      	ldr	r3, [pc, #20]	; (800a844 <prvCheckForValidListAndQueue+0x60>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	490b      	ldr	r1, [pc, #44]	; (800a860 <prvCheckForValidListAndQueue+0x7c>)
 800a832:	4618      	mov	r0, r3
 800a834:	f7fe fc94 	bl	8009160 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a838:	f000 f994 	bl	800ab64 <vPortExitCritical>
}
 800a83c:	bf00      	nop
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}
 800a842:	bf00      	nop
 800a844:	200011d4 	.word	0x200011d4
 800a848:	200011a4 	.word	0x200011a4
 800a84c:	200011b8 	.word	0x200011b8
 800a850:	200011cc 	.word	0x200011cc
 800a854:	200011d0 	.word	0x200011d0
 800a858:	20001280 	.word	0x20001280
 800a85c:	200011e0 	.word	0x200011e0
 800a860:	0800c3c8 	.word	0x0800c3c8

0800a864 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800a864:	b580      	push	{r7, lr}
 800a866:	b08a      	sub	sp, #40	; 0x28
 800a868:	af00      	add	r7, sp, #0
 800a86a:	60f8      	str	r0, [r7, #12]
 800a86c:	60b9      	str	r1, [r7, #8]
 800a86e:	607a      	str	r2, [r7, #4]
 800a870:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800a872:	f06f 0301 	mvn.w	r3, #1
 800a876:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a884:	4b06      	ldr	r3, [pc, #24]	; (800a8a0 <xTimerPendFunctionCallFromISR+0x3c>)
 800a886:	6818      	ldr	r0, [r3, #0]
 800a888:	f107 0114 	add.w	r1, r7, #20
 800a88c:	2300      	movs	r3, #0
 800a88e:	683a      	ldr	r2, [r7, #0]
 800a890:	f7fe f9de 	bl	8008c50 <xQueueGenericSendFromISR>
 800a894:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800a896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800a898:	4618      	mov	r0, r3
 800a89a:	3728      	adds	r7, #40	; 0x28
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}
 800a8a0:	200011d4 	.word	0x200011d4

0800a8a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a8a4:	b480      	push	{r7}
 800a8a6:	b085      	sub	sp, #20
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	60f8      	str	r0, [r7, #12]
 800a8ac:	60b9      	str	r1, [r7, #8]
 800a8ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	3b04      	subs	r3, #4
 800a8b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a8bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	3b04      	subs	r3, #4
 800a8c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	f023 0201 	bic.w	r2, r3, #1
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	3b04      	subs	r3, #4
 800a8d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a8d4:	4a0c      	ldr	r2, [pc, #48]	; (800a908 <pxPortInitialiseStack+0x64>)
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	3b14      	subs	r3, #20
 800a8de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	3b04      	subs	r3, #4
 800a8ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f06f 0202 	mvn.w	r2, #2
 800a8f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	3b20      	subs	r3, #32
 800a8f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3714      	adds	r7, #20
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr
 800a908:	0800a90d 	.word	0x0800a90d

0800a90c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a90c:	b480      	push	{r7}
 800a90e:	b085      	sub	sp, #20
 800a910:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a912:	2300      	movs	r3, #0
 800a914:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a916:	4b12      	ldr	r3, [pc, #72]	; (800a960 <prvTaskExitError+0x54>)
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a91e:	d00a      	beq.n	800a936 <prvTaskExitError+0x2a>
	__asm volatile
 800a920:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a924:	f383 8811 	msr	BASEPRI, r3
 800a928:	f3bf 8f6f 	isb	sy
 800a92c:	f3bf 8f4f 	dsb	sy
 800a930:	60fb      	str	r3, [r7, #12]
}
 800a932:	bf00      	nop
 800a934:	e7fe      	b.n	800a934 <prvTaskExitError+0x28>
	__asm volatile
 800a936:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a93a:	f383 8811 	msr	BASEPRI, r3
 800a93e:	f3bf 8f6f 	isb	sy
 800a942:	f3bf 8f4f 	dsb	sy
 800a946:	60bb      	str	r3, [r7, #8]
}
 800a948:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a94a:	bf00      	nop
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d0fc      	beq.n	800a94c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a952:	bf00      	nop
 800a954:	bf00      	nop
 800a956:	3714      	adds	r7, #20
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr
 800a960:	20000088 	.word	0x20000088
	...

0800a970 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a970:	4b07      	ldr	r3, [pc, #28]	; (800a990 <pxCurrentTCBConst2>)
 800a972:	6819      	ldr	r1, [r3, #0]
 800a974:	6808      	ldr	r0, [r1, #0]
 800a976:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a97a:	f380 8809 	msr	PSP, r0
 800a97e:	f3bf 8f6f 	isb	sy
 800a982:	f04f 0000 	mov.w	r0, #0
 800a986:	f380 8811 	msr	BASEPRI, r0
 800a98a:	4770      	bx	lr
 800a98c:	f3af 8000 	nop.w

0800a990 <pxCurrentTCBConst2>:
 800a990:	20000ca4 	.word	0x20000ca4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a994:	bf00      	nop
 800a996:	bf00      	nop

0800a998 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a998:	4808      	ldr	r0, [pc, #32]	; (800a9bc <prvPortStartFirstTask+0x24>)
 800a99a:	6800      	ldr	r0, [r0, #0]
 800a99c:	6800      	ldr	r0, [r0, #0]
 800a99e:	f380 8808 	msr	MSP, r0
 800a9a2:	f04f 0000 	mov.w	r0, #0
 800a9a6:	f380 8814 	msr	CONTROL, r0
 800a9aa:	b662      	cpsie	i
 800a9ac:	b661      	cpsie	f
 800a9ae:	f3bf 8f4f 	dsb	sy
 800a9b2:	f3bf 8f6f 	isb	sy
 800a9b6:	df00      	svc	0
 800a9b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a9ba:	bf00      	nop
 800a9bc:	e000ed08 	.word	0xe000ed08

0800a9c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b086      	sub	sp, #24
 800a9c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a9c6:	4b46      	ldr	r3, [pc, #280]	; (800aae0 <xPortStartScheduler+0x120>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4a46      	ldr	r2, [pc, #280]	; (800aae4 <xPortStartScheduler+0x124>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d10a      	bne.n	800a9e6 <xPortStartScheduler+0x26>
	__asm volatile
 800a9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9d4:	f383 8811 	msr	BASEPRI, r3
 800a9d8:	f3bf 8f6f 	isb	sy
 800a9dc:	f3bf 8f4f 	dsb	sy
 800a9e0:	613b      	str	r3, [r7, #16]
}
 800a9e2:	bf00      	nop
 800a9e4:	e7fe      	b.n	800a9e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a9e6:	4b3e      	ldr	r3, [pc, #248]	; (800aae0 <xPortStartScheduler+0x120>)
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	4a3f      	ldr	r2, [pc, #252]	; (800aae8 <xPortStartScheduler+0x128>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d10a      	bne.n	800aa06 <xPortStartScheduler+0x46>
	__asm volatile
 800a9f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f4:	f383 8811 	msr	BASEPRI, r3
 800a9f8:	f3bf 8f6f 	isb	sy
 800a9fc:	f3bf 8f4f 	dsb	sy
 800aa00:	60fb      	str	r3, [r7, #12]
}
 800aa02:	bf00      	nop
 800aa04:	e7fe      	b.n	800aa04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aa06:	4b39      	ldr	r3, [pc, #228]	; (800aaec <xPortStartScheduler+0x12c>)
 800aa08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	22ff      	movs	r2, #255	; 0xff
 800aa16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	b2db      	uxtb	r3, r3
 800aa1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aa20:	78fb      	ldrb	r3, [r7, #3]
 800aa22:	b2db      	uxtb	r3, r3
 800aa24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aa28:	b2da      	uxtb	r2, r3
 800aa2a:	4b31      	ldr	r3, [pc, #196]	; (800aaf0 <xPortStartScheduler+0x130>)
 800aa2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aa2e:	4b31      	ldr	r3, [pc, #196]	; (800aaf4 <xPortStartScheduler+0x134>)
 800aa30:	2207      	movs	r2, #7
 800aa32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa34:	e009      	b.n	800aa4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800aa36:	4b2f      	ldr	r3, [pc, #188]	; (800aaf4 <xPortStartScheduler+0x134>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	3b01      	subs	r3, #1
 800aa3c:	4a2d      	ldr	r2, [pc, #180]	; (800aaf4 <xPortStartScheduler+0x134>)
 800aa3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aa40:	78fb      	ldrb	r3, [r7, #3]
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	005b      	lsls	r3, r3, #1
 800aa46:	b2db      	uxtb	r3, r3
 800aa48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa4a:	78fb      	ldrb	r3, [r7, #3]
 800aa4c:	b2db      	uxtb	r3, r3
 800aa4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa52:	2b80      	cmp	r3, #128	; 0x80
 800aa54:	d0ef      	beq.n	800aa36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aa56:	4b27      	ldr	r3, [pc, #156]	; (800aaf4 <xPortStartScheduler+0x134>)
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f1c3 0307 	rsb	r3, r3, #7
 800aa5e:	2b04      	cmp	r3, #4
 800aa60:	d00a      	beq.n	800aa78 <xPortStartScheduler+0xb8>
	__asm volatile
 800aa62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa66:	f383 8811 	msr	BASEPRI, r3
 800aa6a:	f3bf 8f6f 	isb	sy
 800aa6e:	f3bf 8f4f 	dsb	sy
 800aa72:	60bb      	str	r3, [r7, #8]
}
 800aa74:	bf00      	nop
 800aa76:	e7fe      	b.n	800aa76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aa78:	4b1e      	ldr	r3, [pc, #120]	; (800aaf4 <xPortStartScheduler+0x134>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	021b      	lsls	r3, r3, #8
 800aa7e:	4a1d      	ldr	r2, [pc, #116]	; (800aaf4 <xPortStartScheduler+0x134>)
 800aa80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aa82:	4b1c      	ldr	r3, [pc, #112]	; (800aaf4 <xPortStartScheduler+0x134>)
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aa8a:	4a1a      	ldr	r2, [pc, #104]	; (800aaf4 <xPortStartScheduler+0x134>)
 800aa8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	b2da      	uxtb	r2, r3
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aa96:	4b18      	ldr	r3, [pc, #96]	; (800aaf8 <xPortStartScheduler+0x138>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4a17      	ldr	r2, [pc, #92]	; (800aaf8 <xPortStartScheduler+0x138>)
 800aa9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aaa0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aaa2:	4b15      	ldr	r3, [pc, #84]	; (800aaf8 <xPortStartScheduler+0x138>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4a14      	ldr	r2, [pc, #80]	; (800aaf8 <xPortStartScheduler+0x138>)
 800aaa8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800aaac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aaae:	f000 f8dd 	bl	800ac6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aab2:	4b12      	ldr	r3, [pc, #72]	; (800aafc <xPortStartScheduler+0x13c>)
 800aab4:	2200      	movs	r2, #0
 800aab6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aab8:	f000 f8fc 	bl	800acb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aabc:	4b10      	ldr	r3, [pc, #64]	; (800ab00 <xPortStartScheduler+0x140>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a0f      	ldr	r2, [pc, #60]	; (800ab00 <xPortStartScheduler+0x140>)
 800aac2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aac6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aac8:	f7ff ff66 	bl	800a998 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aacc:	f7fe ffea 	bl	8009aa4 <vTaskSwitchContext>
	prvTaskExitError();
 800aad0:	f7ff ff1c 	bl	800a90c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aad4:	2300      	movs	r3, #0
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3718      	adds	r7, #24
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	e000ed00 	.word	0xe000ed00
 800aae4:	410fc271 	.word	0x410fc271
 800aae8:	410fc270 	.word	0x410fc270
 800aaec:	e000e400 	.word	0xe000e400
 800aaf0:	200012d0 	.word	0x200012d0
 800aaf4:	200012d4 	.word	0x200012d4
 800aaf8:	e000ed20 	.word	0xe000ed20
 800aafc:	20000088 	.word	0x20000088
 800ab00:	e000ef34 	.word	0xe000ef34

0800ab04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ab04:	b480      	push	{r7}
 800ab06:	b083      	sub	sp, #12
 800ab08:	af00      	add	r7, sp, #0
	__asm volatile
 800ab0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0e:	f383 8811 	msr	BASEPRI, r3
 800ab12:	f3bf 8f6f 	isb	sy
 800ab16:	f3bf 8f4f 	dsb	sy
 800ab1a:	607b      	str	r3, [r7, #4]
}
 800ab1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ab1e:	4b0f      	ldr	r3, [pc, #60]	; (800ab5c <vPortEnterCritical+0x58>)
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	3301      	adds	r3, #1
 800ab24:	4a0d      	ldr	r2, [pc, #52]	; (800ab5c <vPortEnterCritical+0x58>)
 800ab26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ab28:	4b0c      	ldr	r3, [pc, #48]	; (800ab5c <vPortEnterCritical+0x58>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d10f      	bne.n	800ab50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ab30:	4b0b      	ldr	r3, [pc, #44]	; (800ab60 <vPortEnterCritical+0x5c>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	b2db      	uxtb	r3, r3
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d00a      	beq.n	800ab50 <vPortEnterCritical+0x4c>
	__asm volatile
 800ab3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab3e:	f383 8811 	msr	BASEPRI, r3
 800ab42:	f3bf 8f6f 	isb	sy
 800ab46:	f3bf 8f4f 	dsb	sy
 800ab4a:	603b      	str	r3, [r7, #0]
}
 800ab4c:	bf00      	nop
 800ab4e:	e7fe      	b.n	800ab4e <vPortEnterCritical+0x4a>
	}
}
 800ab50:	bf00      	nop
 800ab52:	370c      	adds	r7, #12
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr
 800ab5c:	20000088 	.word	0x20000088
 800ab60:	e000ed04 	.word	0xe000ed04

0800ab64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ab64:	b480      	push	{r7}
 800ab66:	b083      	sub	sp, #12
 800ab68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ab6a:	4b12      	ldr	r3, [pc, #72]	; (800abb4 <vPortExitCritical+0x50>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d10a      	bne.n	800ab88 <vPortExitCritical+0x24>
	__asm volatile
 800ab72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab76:	f383 8811 	msr	BASEPRI, r3
 800ab7a:	f3bf 8f6f 	isb	sy
 800ab7e:	f3bf 8f4f 	dsb	sy
 800ab82:	607b      	str	r3, [r7, #4]
}
 800ab84:	bf00      	nop
 800ab86:	e7fe      	b.n	800ab86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ab88:	4b0a      	ldr	r3, [pc, #40]	; (800abb4 <vPortExitCritical+0x50>)
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	3b01      	subs	r3, #1
 800ab8e:	4a09      	ldr	r2, [pc, #36]	; (800abb4 <vPortExitCritical+0x50>)
 800ab90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ab92:	4b08      	ldr	r3, [pc, #32]	; (800abb4 <vPortExitCritical+0x50>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d105      	bne.n	800aba6 <vPortExitCritical+0x42>
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	f383 8811 	msr	BASEPRI, r3
}
 800aba4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aba6:	bf00      	nop
 800aba8:	370c      	adds	r7, #12
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr
 800abb2:	bf00      	nop
 800abb4:	20000088 	.word	0x20000088
	...

0800abc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800abc0:	f3ef 8009 	mrs	r0, PSP
 800abc4:	f3bf 8f6f 	isb	sy
 800abc8:	4b15      	ldr	r3, [pc, #84]	; (800ac20 <pxCurrentTCBConst>)
 800abca:	681a      	ldr	r2, [r3, #0]
 800abcc:	f01e 0f10 	tst.w	lr, #16
 800abd0:	bf08      	it	eq
 800abd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800abd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abda:	6010      	str	r0, [r2, #0]
 800abdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800abe0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800abe4:	f380 8811 	msr	BASEPRI, r0
 800abe8:	f3bf 8f4f 	dsb	sy
 800abec:	f3bf 8f6f 	isb	sy
 800abf0:	f7fe ff58 	bl	8009aa4 <vTaskSwitchContext>
 800abf4:	f04f 0000 	mov.w	r0, #0
 800abf8:	f380 8811 	msr	BASEPRI, r0
 800abfc:	bc09      	pop	{r0, r3}
 800abfe:	6819      	ldr	r1, [r3, #0]
 800ac00:	6808      	ldr	r0, [r1, #0]
 800ac02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac06:	f01e 0f10 	tst.w	lr, #16
 800ac0a:	bf08      	it	eq
 800ac0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ac10:	f380 8809 	msr	PSP, r0
 800ac14:	f3bf 8f6f 	isb	sy
 800ac18:	4770      	bx	lr
 800ac1a:	bf00      	nop
 800ac1c:	f3af 8000 	nop.w

0800ac20 <pxCurrentTCBConst>:
 800ac20:	20000ca4 	.word	0x20000ca4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ac24:	bf00      	nop
 800ac26:	bf00      	nop

0800ac28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b082      	sub	sp, #8
 800ac2c:	af00      	add	r7, sp, #0
	__asm volatile
 800ac2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac32:	f383 8811 	msr	BASEPRI, r3
 800ac36:	f3bf 8f6f 	isb	sy
 800ac3a:	f3bf 8f4f 	dsb	sy
 800ac3e:	607b      	str	r3, [r7, #4]
}
 800ac40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ac42:	f7fe fe71 	bl	8009928 <xTaskIncrementTick>
 800ac46:	4603      	mov	r3, r0
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d003      	beq.n	800ac54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ac4c:	4b06      	ldr	r3, [pc, #24]	; (800ac68 <SysTick_Handler+0x40>)
 800ac4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac52:	601a      	str	r2, [r3, #0]
 800ac54:	2300      	movs	r3, #0
 800ac56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	f383 8811 	msr	BASEPRI, r3
}
 800ac5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ac60:	bf00      	nop
 800ac62:	3708      	adds	r7, #8
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}
 800ac68:	e000ed04 	.word	0xe000ed04

0800ac6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ac70:	4b0b      	ldr	r3, [pc, #44]	; (800aca0 <vPortSetupTimerInterrupt+0x34>)
 800ac72:	2200      	movs	r2, #0
 800ac74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ac76:	4b0b      	ldr	r3, [pc, #44]	; (800aca4 <vPortSetupTimerInterrupt+0x38>)
 800ac78:	2200      	movs	r2, #0
 800ac7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ac7c:	4b0a      	ldr	r3, [pc, #40]	; (800aca8 <vPortSetupTimerInterrupt+0x3c>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	4a0a      	ldr	r2, [pc, #40]	; (800acac <vPortSetupTimerInterrupt+0x40>)
 800ac82:	fba2 2303 	umull	r2, r3, r2, r3
 800ac86:	099b      	lsrs	r3, r3, #6
 800ac88:	4a09      	ldr	r2, [pc, #36]	; (800acb0 <vPortSetupTimerInterrupt+0x44>)
 800ac8a:	3b01      	subs	r3, #1
 800ac8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ac8e:	4b04      	ldr	r3, [pc, #16]	; (800aca0 <vPortSetupTimerInterrupt+0x34>)
 800ac90:	2207      	movs	r2, #7
 800ac92:	601a      	str	r2, [r3, #0]
}
 800ac94:	bf00      	nop
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr
 800ac9e:	bf00      	nop
 800aca0:	e000e010 	.word	0xe000e010
 800aca4:	e000e018 	.word	0xe000e018
 800aca8:	20000060 	.word	0x20000060
 800acac:	10624dd3 	.word	0x10624dd3
 800acb0:	e000e014 	.word	0xe000e014

0800acb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800acb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800acc4 <vPortEnableVFP+0x10>
 800acb8:	6801      	ldr	r1, [r0, #0]
 800acba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800acbe:	6001      	str	r1, [r0, #0]
 800acc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800acc2:	bf00      	nop
 800acc4:	e000ed88 	.word	0xe000ed88

0800acc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800acc8:	b480      	push	{r7}
 800acca:	b085      	sub	sp, #20
 800accc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800acce:	f3ef 8305 	mrs	r3, IPSR
 800acd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	2b0f      	cmp	r3, #15
 800acd8:	d914      	bls.n	800ad04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800acda:	4a17      	ldr	r2, [pc, #92]	; (800ad38 <vPortValidateInterruptPriority+0x70>)
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	4413      	add	r3, r2
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800ace4:	4b15      	ldr	r3, [pc, #84]	; (800ad3c <vPortValidateInterruptPriority+0x74>)
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	7afa      	ldrb	r2, [r7, #11]
 800acea:	429a      	cmp	r2, r3
 800acec:	d20a      	bcs.n	800ad04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800acee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf2:	f383 8811 	msr	BASEPRI, r3
 800acf6:	f3bf 8f6f 	isb	sy
 800acfa:	f3bf 8f4f 	dsb	sy
 800acfe:	607b      	str	r3, [r7, #4]
}
 800ad00:	bf00      	nop
 800ad02:	e7fe      	b.n	800ad02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ad04:	4b0e      	ldr	r3, [pc, #56]	; (800ad40 <vPortValidateInterruptPriority+0x78>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ad0c:	4b0d      	ldr	r3, [pc, #52]	; (800ad44 <vPortValidateInterruptPriority+0x7c>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	429a      	cmp	r2, r3
 800ad12:	d90a      	bls.n	800ad2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ad14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad18:	f383 8811 	msr	BASEPRI, r3
 800ad1c:	f3bf 8f6f 	isb	sy
 800ad20:	f3bf 8f4f 	dsb	sy
 800ad24:	603b      	str	r3, [r7, #0]
}
 800ad26:	bf00      	nop
 800ad28:	e7fe      	b.n	800ad28 <vPortValidateInterruptPriority+0x60>
	}
 800ad2a:	bf00      	nop
 800ad2c:	3714      	adds	r7, #20
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad34:	4770      	bx	lr
 800ad36:	bf00      	nop
 800ad38:	e000e3f0 	.word	0xe000e3f0
 800ad3c:	200012d0 	.word	0x200012d0
 800ad40:	e000ed0c 	.word	0xe000ed0c
 800ad44:	200012d4 	.word	0x200012d4

0800ad48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b08a      	sub	sp, #40	; 0x28
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ad50:	2300      	movs	r3, #0
 800ad52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ad54:	f7fe fd2c 	bl	80097b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ad58:	4b58      	ldr	r3, [pc, #352]	; (800aebc <pvPortMalloc+0x174>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d101      	bne.n	800ad64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ad60:	f000 f910 	bl	800af84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ad64:	4b56      	ldr	r3, [pc, #344]	; (800aec0 <pvPortMalloc+0x178>)
 800ad66:	681a      	ldr	r2, [r3, #0]
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	4013      	ands	r3, r2
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	f040 808e 	bne.w	800ae8e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d01d      	beq.n	800adb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ad78:	2208      	movs	r2, #8
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	4413      	add	r3, r2
 800ad7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f003 0307 	and.w	r3, r3, #7
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d014      	beq.n	800adb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f023 0307 	bic.w	r3, r3, #7
 800ad90:	3308      	adds	r3, #8
 800ad92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f003 0307 	and.w	r3, r3, #7
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d00a      	beq.n	800adb4 <pvPortMalloc+0x6c>
	__asm volatile
 800ad9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada2:	f383 8811 	msr	BASEPRI, r3
 800ada6:	f3bf 8f6f 	isb	sy
 800adaa:	f3bf 8f4f 	dsb	sy
 800adae:	617b      	str	r3, [r7, #20]
}
 800adb0:	bf00      	nop
 800adb2:	e7fe      	b.n	800adb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d069      	beq.n	800ae8e <pvPortMalloc+0x146>
 800adba:	4b42      	ldr	r3, [pc, #264]	; (800aec4 <pvPortMalloc+0x17c>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	687a      	ldr	r2, [r7, #4]
 800adc0:	429a      	cmp	r2, r3
 800adc2:	d864      	bhi.n	800ae8e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800adc4:	4b40      	ldr	r3, [pc, #256]	; (800aec8 <pvPortMalloc+0x180>)
 800adc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800adc8:	4b3f      	ldr	r3, [pc, #252]	; (800aec8 <pvPortMalloc+0x180>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800adce:	e004      	b.n	800adda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800add0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800add4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800adda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	687a      	ldr	r2, [r7, #4]
 800ade0:	429a      	cmp	r2, r3
 800ade2:	d903      	bls.n	800adec <pvPortMalloc+0xa4>
 800ade4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d1f1      	bne.n	800add0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800adec:	4b33      	ldr	r3, [pc, #204]	; (800aebc <pvPortMalloc+0x174>)
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d04b      	beq.n	800ae8e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800adf6:	6a3b      	ldr	r3, [r7, #32]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	2208      	movs	r2, #8
 800adfc:	4413      	add	r3, r2
 800adfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ae00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae02:	681a      	ldr	r2, [r3, #0]
 800ae04:	6a3b      	ldr	r3, [r7, #32]
 800ae06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ae08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae0a:	685a      	ldr	r2, [r3, #4]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	1ad2      	subs	r2, r2, r3
 800ae10:	2308      	movs	r3, #8
 800ae12:	005b      	lsls	r3, r3, #1
 800ae14:	429a      	cmp	r2, r3
 800ae16:	d91f      	bls.n	800ae58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ae18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	4413      	add	r3, r2
 800ae1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae20:	69bb      	ldr	r3, [r7, #24]
 800ae22:	f003 0307 	and.w	r3, r3, #7
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d00a      	beq.n	800ae40 <pvPortMalloc+0xf8>
	__asm volatile
 800ae2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae2e:	f383 8811 	msr	BASEPRI, r3
 800ae32:	f3bf 8f6f 	isb	sy
 800ae36:	f3bf 8f4f 	dsb	sy
 800ae3a:	613b      	str	r3, [r7, #16]
}
 800ae3c:	bf00      	nop
 800ae3e:	e7fe      	b.n	800ae3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ae40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae42:	685a      	ldr	r2, [r3, #4]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	1ad2      	subs	r2, r2, r3
 800ae48:	69bb      	ldr	r3, [r7, #24]
 800ae4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ae4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae4e:	687a      	ldr	r2, [r7, #4]
 800ae50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ae52:	69b8      	ldr	r0, [r7, #24]
 800ae54:	f000 f8f8 	bl	800b048 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ae58:	4b1a      	ldr	r3, [pc, #104]	; (800aec4 <pvPortMalloc+0x17c>)
 800ae5a:	681a      	ldr	r2, [r3, #0]
 800ae5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	1ad3      	subs	r3, r2, r3
 800ae62:	4a18      	ldr	r2, [pc, #96]	; (800aec4 <pvPortMalloc+0x17c>)
 800ae64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ae66:	4b17      	ldr	r3, [pc, #92]	; (800aec4 <pvPortMalloc+0x17c>)
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	4b18      	ldr	r3, [pc, #96]	; (800aecc <pvPortMalloc+0x184>)
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d203      	bcs.n	800ae7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ae72:	4b14      	ldr	r3, [pc, #80]	; (800aec4 <pvPortMalloc+0x17c>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4a15      	ldr	r2, [pc, #84]	; (800aecc <pvPortMalloc+0x184>)
 800ae78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ae7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae7c:	685a      	ldr	r2, [r3, #4]
 800ae7e:	4b10      	ldr	r3, [pc, #64]	; (800aec0 <pvPortMalloc+0x178>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	431a      	orrs	r2, r3
 800ae84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ae88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ae8e:	f7fe fc9d 	bl	80097cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ae92:	69fb      	ldr	r3, [r7, #28]
 800ae94:	f003 0307 	and.w	r3, r3, #7
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d00a      	beq.n	800aeb2 <pvPortMalloc+0x16a>
	__asm volatile
 800ae9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aea0:	f383 8811 	msr	BASEPRI, r3
 800aea4:	f3bf 8f6f 	isb	sy
 800aea8:	f3bf 8f4f 	dsb	sy
 800aeac:	60fb      	str	r3, [r7, #12]
}
 800aeae:	bf00      	nop
 800aeb0:	e7fe      	b.n	800aeb0 <pvPortMalloc+0x168>
	return pvReturn;
 800aeb2:	69fb      	ldr	r3, [r7, #28]
}
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	3728      	adds	r7, #40	; 0x28
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	bd80      	pop	{r7, pc}
 800aebc:	200026e0 	.word	0x200026e0
 800aec0:	200026ec 	.word	0x200026ec
 800aec4:	200026e4 	.word	0x200026e4
 800aec8:	200026d8 	.word	0x200026d8
 800aecc:	200026e8 	.word	0x200026e8

0800aed0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b086      	sub	sp, #24
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d048      	beq.n	800af74 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aee2:	2308      	movs	r3, #8
 800aee4:	425b      	negs	r3, r3
 800aee6:	697a      	ldr	r2, [r7, #20]
 800aee8:	4413      	add	r3, r2
 800aeea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aef0:	693b      	ldr	r3, [r7, #16]
 800aef2:	685a      	ldr	r2, [r3, #4]
 800aef4:	4b21      	ldr	r3, [pc, #132]	; (800af7c <vPortFree+0xac>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	4013      	ands	r3, r2
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d10a      	bne.n	800af14 <vPortFree+0x44>
	__asm volatile
 800aefe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af02:	f383 8811 	msr	BASEPRI, r3
 800af06:	f3bf 8f6f 	isb	sy
 800af0a:	f3bf 8f4f 	dsb	sy
 800af0e:	60fb      	str	r3, [r7, #12]
}
 800af10:	bf00      	nop
 800af12:	e7fe      	b.n	800af12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d00a      	beq.n	800af32 <vPortFree+0x62>
	__asm volatile
 800af1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af20:	f383 8811 	msr	BASEPRI, r3
 800af24:	f3bf 8f6f 	isb	sy
 800af28:	f3bf 8f4f 	dsb	sy
 800af2c:	60bb      	str	r3, [r7, #8]
}
 800af2e:	bf00      	nop
 800af30:	e7fe      	b.n	800af30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	685a      	ldr	r2, [r3, #4]
 800af36:	4b11      	ldr	r3, [pc, #68]	; (800af7c <vPortFree+0xac>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4013      	ands	r3, r2
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d019      	beq.n	800af74 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d115      	bne.n	800af74 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	685a      	ldr	r2, [r3, #4]
 800af4c:	4b0b      	ldr	r3, [pc, #44]	; (800af7c <vPortFree+0xac>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	43db      	mvns	r3, r3
 800af52:	401a      	ands	r2, r3
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800af58:	f7fe fc2a 	bl	80097b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800af5c:	693b      	ldr	r3, [r7, #16]
 800af5e:	685a      	ldr	r2, [r3, #4]
 800af60:	4b07      	ldr	r3, [pc, #28]	; (800af80 <vPortFree+0xb0>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	4413      	add	r3, r2
 800af66:	4a06      	ldr	r2, [pc, #24]	; (800af80 <vPortFree+0xb0>)
 800af68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800af6a:	6938      	ldr	r0, [r7, #16]
 800af6c:	f000 f86c 	bl	800b048 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800af70:	f7fe fc2c 	bl	80097cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800af74:	bf00      	nop
 800af76:	3718      	adds	r7, #24
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}
 800af7c:	200026ec 	.word	0x200026ec
 800af80:	200026e4 	.word	0x200026e4

0800af84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800af84:	b480      	push	{r7}
 800af86:	b085      	sub	sp, #20
 800af88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800af8a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800af8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800af90:	4b27      	ldr	r3, [pc, #156]	; (800b030 <prvHeapInit+0xac>)
 800af92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	f003 0307 	and.w	r3, r3, #7
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d00c      	beq.n	800afb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	3307      	adds	r3, #7
 800afa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f023 0307 	bic.w	r3, r3, #7
 800afaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800afac:	68ba      	ldr	r2, [r7, #8]
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	1ad3      	subs	r3, r2, r3
 800afb2:	4a1f      	ldr	r2, [pc, #124]	; (800b030 <prvHeapInit+0xac>)
 800afb4:	4413      	add	r3, r2
 800afb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800afbc:	4a1d      	ldr	r2, [pc, #116]	; (800b034 <prvHeapInit+0xb0>)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800afc2:	4b1c      	ldr	r3, [pc, #112]	; (800b034 <prvHeapInit+0xb0>)
 800afc4:	2200      	movs	r2, #0
 800afc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	68ba      	ldr	r2, [r7, #8]
 800afcc:	4413      	add	r3, r2
 800afce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800afd0:	2208      	movs	r2, #8
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	1a9b      	subs	r3, r3, r2
 800afd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f023 0307 	bic.w	r3, r3, #7
 800afde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	4a15      	ldr	r2, [pc, #84]	; (800b038 <prvHeapInit+0xb4>)
 800afe4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800afe6:	4b14      	ldr	r3, [pc, #80]	; (800b038 <prvHeapInit+0xb4>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	2200      	movs	r2, #0
 800afec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800afee:	4b12      	ldr	r3, [pc, #72]	; (800b038 <prvHeapInit+0xb4>)
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	2200      	movs	r2, #0
 800aff4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	68fa      	ldr	r2, [r7, #12]
 800affe:	1ad2      	subs	r2, r2, r3
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b004:	4b0c      	ldr	r3, [pc, #48]	; (800b038 <prvHeapInit+0xb4>)
 800b006:	681a      	ldr	r2, [r3, #0]
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b00c:	683b      	ldr	r3, [r7, #0]
 800b00e:	685b      	ldr	r3, [r3, #4]
 800b010:	4a0a      	ldr	r2, [pc, #40]	; (800b03c <prvHeapInit+0xb8>)
 800b012:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	685b      	ldr	r3, [r3, #4]
 800b018:	4a09      	ldr	r2, [pc, #36]	; (800b040 <prvHeapInit+0xbc>)
 800b01a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b01c:	4b09      	ldr	r3, [pc, #36]	; (800b044 <prvHeapInit+0xc0>)
 800b01e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b022:	601a      	str	r2, [r3, #0]
}
 800b024:	bf00      	nop
 800b026:	3714      	adds	r7, #20
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr
 800b030:	200012d8 	.word	0x200012d8
 800b034:	200026d8 	.word	0x200026d8
 800b038:	200026e0 	.word	0x200026e0
 800b03c:	200026e8 	.word	0x200026e8
 800b040:	200026e4 	.word	0x200026e4
 800b044:	200026ec 	.word	0x200026ec

0800b048 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b048:	b480      	push	{r7}
 800b04a:	b085      	sub	sp, #20
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b050:	4b28      	ldr	r3, [pc, #160]	; (800b0f4 <prvInsertBlockIntoFreeList+0xac>)
 800b052:	60fb      	str	r3, [r7, #12]
 800b054:	e002      	b.n	800b05c <prvInsertBlockIntoFreeList+0x14>
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	60fb      	str	r3, [r7, #12]
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	687a      	ldr	r2, [r7, #4]
 800b062:	429a      	cmp	r2, r3
 800b064:	d8f7      	bhi.n	800b056 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	68ba      	ldr	r2, [r7, #8]
 800b070:	4413      	add	r3, r2
 800b072:	687a      	ldr	r2, [r7, #4]
 800b074:	429a      	cmp	r2, r3
 800b076:	d108      	bne.n	800b08a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	685a      	ldr	r2, [r3, #4]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	441a      	add	r2, r3
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	68ba      	ldr	r2, [r7, #8]
 800b094:	441a      	add	r2, r3
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d118      	bne.n	800b0d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681a      	ldr	r2, [r3, #0]
 800b0a2:	4b15      	ldr	r3, [pc, #84]	; (800b0f8 <prvInsertBlockIntoFreeList+0xb0>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	d00d      	beq.n	800b0c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	685a      	ldr	r2, [r3, #4]
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	685b      	ldr	r3, [r3, #4]
 800b0b4:	441a      	add	r2, r3
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	681a      	ldr	r2, [r3, #0]
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	601a      	str	r2, [r3, #0]
 800b0c4:	e008      	b.n	800b0d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b0c6:	4b0c      	ldr	r3, [pc, #48]	; (800b0f8 <prvInsertBlockIntoFreeList+0xb0>)
 800b0c8:	681a      	ldr	r2, [r3, #0]
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	601a      	str	r2, [r3, #0]
 800b0ce:	e003      	b.n	800b0d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	681a      	ldr	r2, [r3, #0]
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b0d8:	68fa      	ldr	r2, [r7, #12]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	429a      	cmp	r2, r3
 800b0de:	d002      	beq.n	800b0e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	687a      	ldr	r2, [r7, #4]
 800b0e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0e6:	bf00      	nop
 800b0e8:	3714      	adds	r7, #20
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f0:	4770      	bx	lr
 800b0f2:	bf00      	nop
 800b0f4:	200026d8 	.word	0x200026d8
 800b0f8:	200026e0 	.word	0x200026e0

0800b0fc <std>:
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	b510      	push	{r4, lr}
 800b100:	4604      	mov	r4, r0
 800b102:	e9c0 3300 	strd	r3, r3, [r0]
 800b106:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b10a:	6083      	str	r3, [r0, #8]
 800b10c:	8181      	strh	r1, [r0, #12]
 800b10e:	6643      	str	r3, [r0, #100]	; 0x64
 800b110:	81c2      	strh	r2, [r0, #14]
 800b112:	6183      	str	r3, [r0, #24]
 800b114:	4619      	mov	r1, r3
 800b116:	2208      	movs	r2, #8
 800b118:	305c      	adds	r0, #92	; 0x5c
 800b11a:	f000 f9f7 	bl	800b50c <memset>
 800b11e:	4b0d      	ldr	r3, [pc, #52]	; (800b154 <std+0x58>)
 800b120:	6263      	str	r3, [r4, #36]	; 0x24
 800b122:	4b0d      	ldr	r3, [pc, #52]	; (800b158 <std+0x5c>)
 800b124:	62a3      	str	r3, [r4, #40]	; 0x28
 800b126:	4b0d      	ldr	r3, [pc, #52]	; (800b15c <std+0x60>)
 800b128:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b12a:	4b0d      	ldr	r3, [pc, #52]	; (800b160 <std+0x64>)
 800b12c:	6323      	str	r3, [r4, #48]	; 0x30
 800b12e:	4b0d      	ldr	r3, [pc, #52]	; (800b164 <std+0x68>)
 800b130:	6224      	str	r4, [r4, #32]
 800b132:	429c      	cmp	r4, r3
 800b134:	d006      	beq.n	800b144 <std+0x48>
 800b136:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b13a:	4294      	cmp	r4, r2
 800b13c:	d002      	beq.n	800b144 <std+0x48>
 800b13e:	33d0      	adds	r3, #208	; 0xd0
 800b140:	429c      	cmp	r4, r3
 800b142:	d105      	bne.n	800b150 <std+0x54>
 800b144:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b14c:	f000 baac 	b.w	800b6a8 <__retarget_lock_init_recursive>
 800b150:	bd10      	pop	{r4, pc}
 800b152:	bf00      	nop
 800b154:	0800b35d 	.word	0x0800b35d
 800b158:	0800b37f 	.word	0x0800b37f
 800b15c:	0800b3b7 	.word	0x0800b3b7
 800b160:	0800b3db 	.word	0x0800b3db
 800b164:	200026f0 	.word	0x200026f0

0800b168 <stdio_exit_handler>:
 800b168:	4a02      	ldr	r2, [pc, #8]	; (800b174 <stdio_exit_handler+0xc>)
 800b16a:	4903      	ldr	r1, [pc, #12]	; (800b178 <stdio_exit_handler+0x10>)
 800b16c:	4803      	ldr	r0, [pc, #12]	; (800b17c <stdio_exit_handler+0x14>)
 800b16e:	f000 b869 	b.w	800b244 <_fwalk_sglue>
 800b172:	bf00      	nop
 800b174:	2000008c 	.word	0x2000008c
 800b178:	0800bf71 	.word	0x0800bf71
 800b17c:	20000098 	.word	0x20000098

0800b180 <cleanup_stdio>:
 800b180:	6841      	ldr	r1, [r0, #4]
 800b182:	4b0c      	ldr	r3, [pc, #48]	; (800b1b4 <cleanup_stdio+0x34>)
 800b184:	4299      	cmp	r1, r3
 800b186:	b510      	push	{r4, lr}
 800b188:	4604      	mov	r4, r0
 800b18a:	d001      	beq.n	800b190 <cleanup_stdio+0x10>
 800b18c:	f000 fef0 	bl	800bf70 <_fflush_r>
 800b190:	68a1      	ldr	r1, [r4, #8]
 800b192:	4b09      	ldr	r3, [pc, #36]	; (800b1b8 <cleanup_stdio+0x38>)
 800b194:	4299      	cmp	r1, r3
 800b196:	d002      	beq.n	800b19e <cleanup_stdio+0x1e>
 800b198:	4620      	mov	r0, r4
 800b19a:	f000 fee9 	bl	800bf70 <_fflush_r>
 800b19e:	68e1      	ldr	r1, [r4, #12]
 800b1a0:	4b06      	ldr	r3, [pc, #24]	; (800b1bc <cleanup_stdio+0x3c>)
 800b1a2:	4299      	cmp	r1, r3
 800b1a4:	d004      	beq.n	800b1b0 <cleanup_stdio+0x30>
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1ac:	f000 bee0 	b.w	800bf70 <_fflush_r>
 800b1b0:	bd10      	pop	{r4, pc}
 800b1b2:	bf00      	nop
 800b1b4:	200026f0 	.word	0x200026f0
 800b1b8:	20002758 	.word	0x20002758
 800b1bc:	200027c0 	.word	0x200027c0

0800b1c0 <global_stdio_init.part.0>:
 800b1c0:	b510      	push	{r4, lr}
 800b1c2:	4b0b      	ldr	r3, [pc, #44]	; (800b1f0 <global_stdio_init.part.0+0x30>)
 800b1c4:	4c0b      	ldr	r4, [pc, #44]	; (800b1f4 <global_stdio_init.part.0+0x34>)
 800b1c6:	4a0c      	ldr	r2, [pc, #48]	; (800b1f8 <global_stdio_init.part.0+0x38>)
 800b1c8:	601a      	str	r2, [r3, #0]
 800b1ca:	4620      	mov	r0, r4
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	2104      	movs	r1, #4
 800b1d0:	f7ff ff94 	bl	800b0fc <std>
 800b1d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b1d8:	2201      	movs	r2, #1
 800b1da:	2109      	movs	r1, #9
 800b1dc:	f7ff ff8e 	bl	800b0fc <std>
 800b1e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b1e4:	2202      	movs	r2, #2
 800b1e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1ea:	2112      	movs	r1, #18
 800b1ec:	f7ff bf86 	b.w	800b0fc <std>
 800b1f0:	20002828 	.word	0x20002828
 800b1f4:	200026f0 	.word	0x200026f0
 800b1f8:	0800b169 	.word	0x0800b169

0800b1fc <__sfp_lock_acquire>:
 800b1fc:	4801      	ldr	r0, [pc, #4]	; (800b204 <__sfp_lock_acquire+0x8>)
 800b1fe:	f000 ba54 	b.w	800b6aa <__retarget_lock_acquire_recursive>
 800b202:	bf00      	nop
 800b204:	20002831 	.word	0x20002831

0800b208 <__sfp_lock_release>:
 800b208:	4801      	ldr	r0, [pc, #4]	; (800b210 <__sfp_lock_release+0x8>)
 800b20a:	f000 ba4f 	b.w	800b6ac <__retarget_lock_release_recursive>
 800b20e:	bf00      	nop
 800b210:	20002831 	.word	0x20002831

0800b214 <__sinit>:
 800b214:	b510      	push	{r4, lr}
 800b216:	4604      	mov	r4, r0
 800b218:	f7ff fff0 	bl	800b1fc <__sfp_lock_acquire>
 800b21c:	6a23      	ldr	r3, [r4, #32]
 800b21e:	b11b      	cbz	r3, 800b228 <__sinit+0x14>
 800b220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b224:	f7ff bff0 	b.w	800b208 <__sfp_lock_release>
 800b228:	4b04      	ldr	r3, [pc, #16]	; (800b23c <__sinit+0x28>)
 800b22a:	6223      	str	r3, [r4, #32]
 800b22c:	4b04      	ldr	r3, [pc, #16]	; (800b240 <__sinit+0x2c>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d1f5      	bne.n	800b220 <__sinit+0xc>
 800b234:	f7ff ffc4 	bl	800b1c0 <global_stdio_init.part.0>
 800b238:	e7f2      	b.n	800b220 <__sinit+0xc>
 800b23a:	bf00      	nop
 800b23c:	0800b181 	.word	0x0800b181
 800b240:	20002828 	.word	0x20002828

0800b244 <_fwalk_sglue>:
 800b244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b248:	4607      	mov	r7, r0
 800b24a:	4688      	mov	r8, r1
 800b24c:	4614      	mov	r4, r2
 800b24e:	2600      	movs	r6, #0
 800b250:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b254:	f1b9 0901 	subs.w	r9, r9, #1
 800b258:	d505      	bpl.n	800b266 <_fwalk_sglue+0x22>
 800b25a:	6824      	ldr	r4, [r4, #0]
 800b25c:	2c00      	cmp	r4, #0
 800b25e:	d1f7      	bne.n	800b250 <_fwalk_sglue+0xc>
 800b260:	4630      	mov	r0, r6
 800b262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b266:	89ab      	ldrh	r3, [r5, #12]
 800b268:	2b01      	cmp	r3, #1
 800b26a:	d907      	bls.n	800b27c <_fwalk_sglue+0x38>
 800b26c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b270:	3301      	adds	r3, #1
 800b272:	d003      	beq.n	800b27c <_fwalk_sglue+0x38>
 800b274:	4629      	mov	r1, r5
 800b276:	4638      	mov	r0, r7
 800b278:	47c0      	blx	r8
 800b27a:	4306      	orrs	r6, r0
 800b27c:	3568      	adds	r5, #104	; 0x68
 800b27e:	e7e9      	b.n	800b254 <_fwalk_sglue+0x10>

0800b280 <iprintf>:
 800b280:	b40f      	push	{r0, r1, r2, r3}
 800b282:	b507      	push	{r0, r1, r2, lr}
 800b284:	4906      	ldr	r1, [pc, #24]	; (800b2a0 <iprintf+0x20>)
 800b286:	ab04      	add	r3, sp, #16
 800b288:	6808      	ldr	r0, [r1, #0]
 800b28a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b28e:	6881      	ldr	r1, [r0, #8]
 800b290:	9301      	str	r3, [sp, #4]
 800b292:	f000 fb3d 	bl	800b910 <_vfiprintf_r>
 800b296:	b003      	add	sp, #12
 800b298:	f85d eb04 	ldr.w	lr, [sp], #4
 800b29c:	b004      	add	sp, #16
 800b29e:	4770      	bx	lr
 800b2a0:	200000e4 	.word	0x200000e4

0800b2a4 <_puts_r>:
 800b2a4:	6a03      	ldr	r3, [r0, #32]
 800b2a6:	b570      	push	{r4, r5, r6, lr}
 800b2a8:	6884      	ldr	r4, [r0, #8]
 800b2aa:	4605      	mov	r5, r0
 800b2ac:	460e      	mov	r6, r1
 800b2ae:	b90b      	cbnz	r3, 800b2b4 <_puts_r+0x10>
 800b2b0:	f7ff ffb0 	bl	800b214 <__sinit>
 800b2b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b2b6:	07db      	lsls	r3, r3, #31
 800b2b8:	d405      	bmi.n	800b2c6 <_puts_r+0x22>
 800b2ba:	89a3      	ldrh	r3, [r4, #12]
 800b2bc:	0598      	lsls	r0, r3, #22
 800b2be:	d402      	bmi.n	800b2c6 <_puts_r+0x22>
 800b2c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b2c2:	f000 f9f2 	bl	800b6aa <__retarget_lock_acquire_recursive>
 800b2c6:	89a3      	ldrh	r3, [r4, #12]
 800b2c8:	0719      	lsls	r1, r3, #28
 800b2ca:	d513      	bpl.n	800b2f4 <_puts_r+0x50>
 800b2cc:	6923      	ldr	r3, [r4, #16]
 800b2ce:	b18b      	cbz	r3, 800b2f4 <_puts_r+0x50>
 800b2d0:	3e01      	subs	r6, #1
 800b2d2:	68a3      	ldr	r3, [r4, #8]
 800b2d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b2d8:	3b01      	subs	r3, #1
 800b2da:	60a3      	str	r3, [r4, #8]
 800b2dc:	b9e9      	cbnz	r1, 800b31a <_puts_r+0x76>
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	da2e      	bge.n	800b340 <_puts_r+0x9c>
 800b2e2:	4622      	mov	r2, r4
 800b2e4:	210a      	movs	r1, #10
 800b2e6:	4628      	mov	r0, r5
 800b2e8:	f000 f87b 	bl	800b3e2 <__swbuf_r>
 800b2ec:	3001      	adds	r0, #1
 800b2ee:	d007      	beq.n	800b300 <_puts_r+0x5c>
 800b2f0:	250a      	movs	r5, #10
 800b2f2:	e007      	b.n	800b304 <_puts_r+0x60>
 800b2f4:	4621      	mov	r1, r4
 800b2f6:	4628      	mov	r0, r5
 800b2f8:	f000 f8b0 	bl	800b45c <__swsetup_r>
 800b2fc:	2800      	cmp	r0, #0
 800b2fe:	d0e7      	beq.n	800b2d0 <_puts_r+0x2c>
 800b300:	f04f 35ff 	mov.w	r5, #4294967295
 800b304:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b306:	07da      	lsls	r2, r3, #31
 800b308:	d405      	bmi.n	800b316 <_puts_r+0x72>
 800b30a:	89a3      	ldrh	r3, [r4, #12]
 800b30c:	059b      	lsls	r3, r3, #22
 800b30e:	d402      	bmi.n	800b316 <_puts_r+0x72>
 800b310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b312:	f000 f9cb 	bl	800b6ac <__retarget_lock_release_recursive>
 800b316:	4628      	mov	r0, r5
 800b318:	bd70      	pop	{r4, r5, r6, pc}
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	da04      	bge.n	800b328 <_puts_r+0x84>
 800b31e:	69a2      	ldr	r2, [r4, #24]
 800b320:	429a      	cmp	r2, r3
 800b322:	dc06      	bgt.n	800b332 <_puts_r+0x8e>
 800b324:	290a      	cmp	r1, #10
 800b326:	d004      	beq.n	800b332 <_puts_r+0x8e>
 800b328:	6823      	ldr	r3, [r4, #0]
 800b32a:	1c5a      	adds	r2, r3, #1
 800b32c:	6022      	str	r2, [r4, #0]
 800b32e:	7019      	strb	r1, [r3, #0]
 800b330:	e7cf      	b.n	800b2d2 <_puts_r+0x2e>
 800b332:	4622      	mov	r2, r4
 800b334:	4628      	mov	r0, r5
 800b336:	f000 f854 	bl	800b3e2 <__swbuf_r>
 800b33a:	3001      	adds	r0, #1
 800b33c:	d1c9      	bne.n	800b2d2 <_puts_r+0x2e>
 800b33e:	e7df      	b.n	800b300 <_puts_r+0x5c>
 800b340:	6823      	ldr	r3, [r4, #0]
 800b342:	250a      	movs	r5, #10
 800b344:	1c5a      	adds	r2, r3, #1
 800b346:	6022      	str	r2, [r4, #0]
 800b348:	701d      	strb	r5, [r3, #0]
 800b34a:	e7db      	b.n	800b304 <_puts_r+0x60>

0800b34c <puts>:
 800b34c:	4b02      	ldr	r3, [pc, #8]	; (800b358 <puts+0xc>)
 800b34e:	4601      	mov	r1, r0
 800b350:	6818      	ldr	r0, [r3, #0]
 800b352:	f7ff bfa7 	b.w	800b2a4 <_puts_r>
 800b356:	bf00      	nop
 800b358:	200000e4 	.word	0x200000e4

0800b35c <__sread>:
 800b35c:	b510      	push	{r4, lr}
 800b35e:	460c      	mov	r4, r1
 800b360:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b364:	f000 f952 	bl	800b60c <_read_r>
 800b368:	2800      	cmp	r0, #0
 800b36a:	bfab      	itete	ge
 800b36c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b36e:	89a3      	ldrhlt	r3, [r4, #12]
 800b370:	181b      	addge	r3, r3, r0
 800b372:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b376:	bfac      	ite	ge
 800b378:	6563      	strge	r3, [r4, #84]	; 0x54
 800b37a:	81a3      	strhlt	r3, [r4, #12]
 800b37c:	bd10      	pop	{r4, pc}

0800b37e <__swrite>:
 800b37e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b382:	461f      	mov	r7, r3
 800b384:	898b      	ldrh	r3, [r1, #12]
 800b386:	05db      	lsls	r3, r3, #23
 800b388:	4605      	mov	r5, r0
 800b38a:	460c      	mov	r4, r1
 800b38c:	4616      	mov	r6, r2
 800b38e:	d505      	bpl.n	800b39c <__swrite+0x1e>
 800b390:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b394:	2302      	movs	r3, #2
 800b396:	2200      	movs	r2, #0
 800b398:	f000 f926 	bl	800b5e8 <_lseek_r>
 800b39c:	89a3      	ldrh	r3, [r4, #12]
 800b39e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b3a6:	81a3      	strh	r3, [r4, #12]
 800b3a8:	4632      	mov	r2, r6
 800b3aa:	463b      	mov	r3, r7
 800b3ac:	4628      	mov	r0, r5
 800b3ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3b2:	f000 b93d 	b.w	800b630 <_write_r>

0800b3b6 <__sseek>:
 800b3b6:	b510      	push	{r4, lr}
 800b3b8:	460c      	mov	r4, r1
 800b3ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3be:	f000 f913 	bl	800b5e8 <_lseek_r>
 800b3c2:	1c43      	adds	r3, r0, #1
 800b3c4:	89a3      	ldrh	r3, [r4, #12]
 800b3c6:	bf15      	itete	ne
 800b3c8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b3ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b3ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b3d2:	81a3      	strheq	r3, [r4, #12]
 800b3d4:	bf18      	it	ne
 800b3d6:	81a3      	strhne	r3, [r4, #12]
 800b3d8:	bd10      	pop	{r4, pc}

0800b3da <__sclose>:
 800b3da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3de:	f000 b89d 	b.w	800b51c <_close_r>

0800b3e2 <__swbuf_r>:
 800b3e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3e4:	460e      	mov	r6, r1
 800b3e6:	4614      	mov	r4, r2
 800b3e8:	4605      	mov	r5, r0
 800b3ea:	b118      	cbz	r0, 800b3f4 <__swbuf_r+0x12>
 800b3ec:	6a03      	ldr	r3, [r0, #32]
 800b3ee:	b90b      	cbnz	r3, 800b3f4 <__swbuf_r+0x12>
 800b3f0:	f7ff ff10 	bl	800b214 <__sinit>
 800b3f4:	69a3      	ldr	r3, [r4, #24]
 800b3f6:	60a3      	str	r3, [r4, #8]
 800b3f8:	89a3      	ldrh	r3, [r4, #12]
 800b3fa:	071a      	lsls	r2, r3, #28
 800b3fc:	d525      	bpl.n	800b44a <__swbuf_r+0x68>
 800b3fe:	6923      	ldr	r3, [r4, #16]
 800b400:	b31b      	cbz	r3, 800b44a <__swbuf_r+0x68>
 800b402:	6823      	ldr	r3, [r4, #0]
 800b404:	6922      	ldr	r2, [r4, #16]
 800b406:	1a98      	subs	r0, r3, r2
 800b408:	6963      	ldr	r3, [r4, #20]
 800b40a:	b2f6      	uxtb	r6, r6
 800b40c:	4283      	cmp	r3, r0
 800b40e:	4637      	mov	r7, r6
 800b410:	dc04      	bgt.n	800b41c <__swbuf_r+0x3a>
 800b412:	4621      	mov	r1, r4
 800b414:	4628      	mov	r0, r5
 800b416:	f000 fdab 	bl	800bf70 <_fflush_r>
 800b41a:	b9e0      	cbnz	r0, 800b456 <__swbuf_r+0x74>
 800b41c:	68a3      	ldr	r3, [r4, #8]
 800b41e:	3b01      	subs	r3, #1
 800b420:	60a3      	str	r3, [r4, #8]
 800b422:	6823      	ldr	r3, [r4, #0]
 800b424:	1c5a      	adds	r2, r3, #1
 800b426:	6022      	str	r2, [r4, #0]
 800b428:	701e      	strb	r6, [r3, #0]
 800b42a:	6962      	ldr	r2, [r4, #20]
 800b42c:	1c43      	adds	r3, r0, #1
 800b42e:	429a      	cmp	r2, r3
 800b430:	d004      	beq.n	800b43c <__swbuf_r+0x5a>
 800b432:	89a3      	ldrh	r3, [r4, #12]
 800b434:	07db      	lsls	r3, r3, #31
 800b436:	d506      	bpl.n	800b446 <__swbuf_r+0x64>
 800b438:	2e0a      	cmp	r6, #10
 800b43a:	d104      	bne.n	800b446 <__swbuf_r+0x64>
 800b43c:	4621      	mov	r1, r4
 800b43e:	4628      	mov	r0, r5
 800b440:	f000 fd96 	bl	800bf70 <_fflush_r>
 800b444:	b938      	cbnz	r0, 800b456 <__swbuf_r+0x74>
 800b446:	4638      	mov	r0, r7
 800b448:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b44a:	4621      	mov	r1, r4
 800b44c:	4628      	mov	r0, r5
 800b44e:	f000 f805 	bl	800b45c <__swsetup_r>
 800b452:	2800      	cmp	r0, #0
 800b454:	d0d5      	beq.n	800b402 <__swbuf_r+0x20>
 800b456:	f04f 37ff 	mov.w	r7, #4294967295
 800b45a:	e7f4      	b.n	800b446 <__swbuf_r+0x64>

0800b45c <__swsetup_r>:
 800b45c:	b538      	push	{r3, r4, r5, lr}
 800b45e:	4b2a      	ldr	r3, [pc, #168]	; (800b508 <__swsetup_r+0xac>)
 800b460:	4605      	mov	r5, r0
 800b462:	6818      	ldr	r0, [r3, #0]
 800b464:	460c      	mov	r4, r1
 800b466:	b118      	cbz	r0, 800b470 <__swsetup_r+0x14>
 800b468:	6a03      	ldr	r3, [r0, #32]
 800b46a:	b90b      	cbnz	r3, 800b470 <__swsetup_r+0x14>
 800b46c:	f7ff fed2 	bl	800b214 <__sinit>
 800b470:	89a3      	ldrh	r3, [r4, #12]
 800b472:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b476:	0718      	lsls	r0, r3, #28
 800b478:	d422      	bmi.n	800b4c0 <__swsetup_r+0x64>
 800b47a:	06d9      	lsls	r1, r3, #27
 800b47c:	d407      	bmi.n	800b48e <__swsetup_r+0x32>
 800b47e:	2309      	movs	r3, #9
 800b480:	602b      	str	r3, [r5, #0]
 800b482:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b486:	81a3      	strh	r3, [r4, #12]
 800b488:	f04f 30ff 	mov.w	r0, #4294967295
 800b48c:	e034      	b.n	800b4f8 <__swsetup_r+0x9c>
 800b48e:	0758      	lsls	r0, r3, #29
 800b490:	d512      	bpl.n	800b4b8 <__swsetup_r+0x5c>
 800b492:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b494:	b141      	cbz	r1, 800b4a8 <__swsetup_r+0x4c>
 800b496:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b49a:	4299      	cmp	r1, r3
 800b49c:	d002      	beq.n	800b4a4 <__swsetup_r+0x48>
 800b49e:	4628      	mov	r0, r5
 800b4a0:	f000 f914 	bl	800b6cc <_free_r>
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	6363      	str	r3, [r4, #52]	; 0x34
 800b4a8:	89a3      	ldrh	r3, [r4, #12]
 800b4aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b4ae:	81a3      	strh	r3, [r4, #12]
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	6063      	str	r3, [r4, #4]
 800b4b4:	6923      	ldr	r3, [r4, #16]
 800b4b6:	6023      	str	r3, [r4, #0]
 800b4b8:	89a3      	ldrh	r3, [r4, #12]
 800b4ba:	f043 0308 	orr.w	r3, r3, #8
 800b4be:	81a3      	strh	r3, [r4, #12]
 800b4c0:	6923      	ldr	r3, [r4, #16]
 800b4c2:	b94b      	cbnz	r3, 800b4d8 <__swsetup_r+0x7c>
 800b4c4:	89a3      	ldrh	r3, [r4, #12]
 800b4c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b4ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4ce:	d003      	beq.n	800b4d8 <__swsetup_r+0x7c>
 800b4d0:	4621      	mov	r1, r4
 800b4d2:	4628      	mov	r0, r5
 800b4d4:	f000 fd9a 	bl	800c00c <__smakebuf_r>
 800b4d8:	89a0      	ldrh	r0, [r4, #12]
 800b4da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4de:	f010 0301 	ands.w	r3, r0, #1
 800b4e2:	d00a      	beq.n	800b4fa <__swsetup_r+0x9e>
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	60a3      	str	r3, [r4, #8]
 800b4e8:	6963      	ldr	r3, [r4, #20]
 800b4ea:	425b      	negs	r3, r3
 800b4ec:	61a3      	str	r3, [r4, #24]
 800b4ee:	6923      	ldr	r3, [r4, #16]
 800b4f0:	b943      	cbnz	r3, 800b504 <__swsetup_r+0xa8>
 800b4f2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b4f6:	d1c4      	bne.n	800b482 <__swsetup_r+0x26>
 800b4f8:	bd38      	pop	{r3, r4, r5, pc}
 800b4fa:	0781      	lsls	r1, r0, #30
 800b4fc:	bf58      	it	pl
 800b4fe:	6963      	ldrpl	r3, [r4, #20]
 800b500:	60a3      	str	r3, [r4, #8]
 800b502:	e7f4      	b.n	800b4ee <__swsetup_r+0x92>
 800b504:	2000      	movs	r0, #0
 800b506:	e7f7      	b.n	800b4f8 <__swsetup_r+0x9c>
 800b508:	200000e4 	.word	0x200000e4

0800b50c <memset>:
 800b50c:	4402      	add	r2, r0
 800b50e:	4603      	mov	r3, r0
 800b510:	4293      	cmp	r3, r2
 800b512:	d100      	bne.n	800b516 <memset+0xa>
 800b514:	4770      	bx	lr
 800b516:	f803 1b01 	strb.w	r1, [r3], #1
 800b51a:	e7f9      	b.n	800b510 <memset+0x4>

0800b51c <_close_r>:
 800b51c:	b538      	push	{r3, r4, r5, lr}
 800b51e:	4d06      	ldr	r5, [pc, #24]	; (800b538 <_close_r+0x1c>)
 800b520:	2300      	movs	r3, #0
 800b522:	4604      	mov	r4, r0
 800b524:	4608      	mov	r0, r1
 800b526:	602b      	str	r3, [r5, #0]
 800b528:	f7f5 fb15 	bl	8000b56 <_close>
 800b52c:	1c43      	adds	r3, r0, #1
 800b52e:	d102      	bne.n	800b536 <_close_r+0x1a>
 800b530:	682b      	ldr	r3, [r5, #0]
 800b532:	b103      	cbz	r3, 800b536 <_close_r+0x1a>
 800b534:	6023      	str	r3, [r4, #0]
 800b536:	bd38      	pop	{r3, r4, r5, pc}
 800b538:	2000282c 	.word	0x2000282c

0800b53c <_reclaim_reent>:
 800b53c:	4b29      	ldr	r3, [pc, #164]	; (800b5e4 <_reclaim_reent+0xa8>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4283      	cmp	r3, r0
 800b542:	b570      	push	{r4, r5, r6, lr}
 800b544:	4604      	mov	r4, r0
 800b546:	d04b      	beq.n	800b5e0 <_reclaim_reent+0xa4>
 800b548:	69c3      	ldr	r3, [r0, #28]
 800b54a:	b143      	cbz	r3, 800b55e <_reclaim_reent+0x22>
 800b54c:	68db      	ldr	r3, [r3, #12]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d144      	bne.n	800b5dc <_reclaim_reent+0xa0>
 800b552:	69e3      	ldr	r3, [r4, #28]
 800b554:	6819      	ldr	r1, [r3, #0]
 800b556:	b111      	cbz	r1, 800b55e <_reclaim_reent+0x22>
 800b558:	4620      	mov	r0, r4
 800b55a:	f000 f8b7 	bl	800b6cc <_free_r>
 800b55e:	6961      	ldr	r1, [r4, #20]
 800b560:	b111      	cbz	r1, 800b568 <_reclaim_reent+0x2c>
 800b562:	4620      	mov	r0, r4
 800b564:	f000 f8b2 	bl	800b6cc <_free_r>
 800b568:	69e1      	ldr	r1, [r4, #28]
 800b56a:	b111      	cbz	r1, 800b572 <_reclaim_reent+0x36>
 800b56c:	4620      	mov	r0, r4
 800b56e:	f000 f8ad 	bl	800b6cc <_free_r>
 800b572:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800b574:	b111      	cbz	r1, 800b57c <_reclaim_reent+0x40>
 800b576:	4620      	mov	r0, r4
 800b578:	f000 f8a8 	bl	800b6cc <_free_r>
 800b57c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b57e:	b111      	cbz	r1, 800b586 <_reclaim_reent+0x4a>
 800b580:	4620      	mov	r0, r4
 800b582:	f000 f8a3 	bl	800b6cc <_free_r>
 800b586:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b588:	b111      	cbz	r1, 800b590 <_reclaim_reent+0x54>
 800b58a:	4620      	mov	r0, r4
 800b58c:	f000 f89e 	bl	800b6cc <_free_r>
 800b590:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b592:	b111      	cbz	r1, 800b59a <_reclaim_reent+0x5e>
 800b594:	4620      	mov	r0, r4
 800b596:	f000 f899 	bl	800b6cc <_free_r>
 800b59a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b59c:	b111      	cbz	r1, 800b5a4 <_reclaim_reent+0x68>
 800b59e:	4620      	mov	r0, r4
 800b5a0:	f000 f894 	bl	800b6cc <_free_r>
 800b5a4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b5a6:	b111      	cbz	r1, 800b5ae <_reclaim_reent+0x72>
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	f000 f88f 	bl	800b6cc <_free_r>
 800b5ae:	6a23      	ldr	r3, [r4, #32]
 800b5b0:	b1b3      	cbz	r3, 800b5e0 <_reclaim_reent+0xa4>
 800b5b2:	4620      	mov	r0, r4
 800b5b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b5b8:	4718      	bx	r3
 800b5ba:	5949      	ldr	r1, [r1, r5]
 800b5bc:	b941      	cbnz	r1, 800b5d0 <_reclaim_reent+0x94>
 800b5be:	3504      	adds	r5, #4
 800b5c0:	69e3      	ldr	r3, [r4, #28]
 800b5c2:	2d80      	cmp	r5, #128	; 0x80
 800b5c4:	68d9      	ldr	r1, [r3, #12]
 800b5c6:	d1f8      	bne.n	800b5ba <_reclaim_reent+0x7e>
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	f000 f87f 	bl	800b6cc <_free_r>
 800b5ce:	e7c0      	b.n	800b552 <_reclaim_reent+0x16>
 800b5d0:	680e      	ldr	r6, [r1, #0]
 800b5d2:	4620      	mov	r0, r4
 800b5d4:	f000 f87a 	bl	800b6cc <_free_r>
 800b5d8:	4631      	mov	r1, r6
 800b5da:	e7ef      	b.n	800b5bc <_reclaim_reent+0x80>
 800b5dc:	2500      	movs	r5, #0
 800b5de:	e7ef      	b.n	800b5c0 <_reclaim_reent+0x84>
 800b5e0:	bd70      	pop	{r4, r5, r6, pc}
 800b5e2:	bf00      	nop
 800b5e4:	200000e4 	.word	0x200000e4

0800b5e8 <_lseek_r>:
 800b5e8:	b538      	push	{r3, r4, r5, lr}
 800b5ea:	4d07      	ldr	r5, [pc, #28]	; (800b608 <_lseek_r+0x20>)
 800b5ec:	4604      	mov	r4, r0
 800b5ee:	4608      	mov	r0, r1
 800b5f0:	4611      	mov	r1, r2
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	602a      	str	r2, [r5, #0]
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	f7f5 fad4 	bl	8000ba4 <_lseek>
 800b5fc:	1c43      	adds	r3, r0, #1
 800b5fe:	d102      	bne.n	800b606 <_lseek_r+0x1e>
 800b600:	682b      	ldr	r3, [r5, #0]
 800b602:	b103      	cbz	r3, 800b606 <_lseek_r+0x1e>
 800b604:	6023      	str	r3, [r4, #0]
 800b606:	bd38      	pop	{r3, r4, r5, pc}
 800b608:	2000282c 	.word	0x2000282c

0800b60c <_read_r>:
 800b60c:	b538      	push	{r3, r4, r5, lr}
 800b60e:	4d07      	ldr	r5, [pc, #28]	; (800b62c <_read_r+0x20>)
 800b610:	4604      	mov	r4, r0
 800b612:	4608      	mov	r0, r1
 800b614:	4611      	mov	r1, r2
 800b616:	2200      	movs	r2, #0
 800b618:	602a      	str	r2, [r5, #0]
 800b61a:	461a      	mov	r2, r3
 800b61c:	f7f5 fa62 	bl	8000ae4 <_read>
 800b620:	1c43      	adds	r3, r0, #1
 800b622:	d102      	bne.n	800b62a <_read_r+0x1e>
 800b624:	682b      	ldr	r3, [r5, #0]
 800b626:	b103      	cbz	r3, 800b62a <_read_r+0x1e>
 800b628:	6023      	str	r3, [r4, #0]
 800b62a:	bd38      	pop	{r3, r4, r5, pc}
 800b62c:	2000282c 	.word	0x2000282c

0800b630 <_write_r>:
 800b630:	b538      	push	{r3, r4, r5, lr}
 800b632:	4d07      	ldr	r5, [pc, #28]	; (800b650 <_write_r+0x20>)
 800b634:	4604      	mov	r4, r0
 800b636:	4608      	mov	r0, r1
 800b638:	4611      	mov	r1, r2
 800b63a:	2200      	movs	r2, #0
 800b63c:	602a      	str	r2, [r5, #0]
 800b63e:	461a      	mov	r2, r3
 800b640:	f7f5 fa6d 	bl	8000b1e <_write>
 800b644:	1c43      	adds	r3, r0, #1
 800b646:	d102      	bne.n	800b64e <_write_r+0x1e>
 800b648:	682b      	ldr	r3, [r5, #0]
 800b64a:	b103      	cbz	r3, 800b64e <_write_r+0x1e>
 800b64c:	6023      	str	r3, [r4, #0]
 800b64e:	bd38      	pop	{r3, r4, r5, pc}
 800b650:	2000282c 	.word	0x2000282c

0800b654 <__errno>:
 800b654:	4b01      	ldr	r3, [pc, #4]	; (800b65c <__errno+0x8>)
 800b656:	6818      	ldr	r0, [r3, #0]
 800b658:	4770      	bx	lr
 800b65a:	bf00      	nop
 800b65c:	200000e4 	.word	0x200000e4

0800b660 <__libc_init_array>:
 800b660:	b570      	push	{r4, r5, r6, lr}
 800b662:	4d0d      	ldr	r5, [pc, #52]	; (800b698 <__libc_init_array+0x38>)
 800b664:	4c0d      	ldr	r4, [pc, #52]	; (800b69c <__libc_init_array+0x3c>)
 800b666:	1b64      	subs	r4, r4, r5
 800b668:	10a4      	asrs	r4, r4, #2
 800b66a:	2600      	movs	r6, #0
 800b66c:	42a6      	cmp	r6, r4
 800b66e:	d109      	bne.n	800b684 <__libc_init_array+0x24>
 800b670:	4d0b      	ldr	r5, [pc, #44]	; (800b6a0 <__libc_init_array+0x40>)
 800b672:	4c0c      	ldr	r4, [pc, #48]	; (800b6a4 <__libc_init_array+0x44>)
 800b674:	f000 fd38 	bl	800c0e8 <_init>
 800b678:	1b64      	subs	r4, r4, r5
 800b67a:	10a4      	asrs	r4, r4, #2
 800b67c:	2600      	movs	r6, #0
 800b67e:	42a6      	cmp	r6, r4
 800b680:	d105      	bne.n	800b68e <__libc_init_array+0x2e>
 800b682:	bd70      	pop	{r4, r5, r6, pc}
 800b684:	f855 3b04 	ldr.w	r3, [r5], #4
 800b688:	4798      	blx	r3
 800b68a:	3601      	adds	r6, #1
 800b68c:	e7ee      	b.n	800b66c <__libc_init_array+0xc>
 800b68e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b692:	4798      	blx	r3
 800b694:	3601      	adds	r6, #1
 800b696:	e7f2      	b.n	800b67e <__libc_init_array+0x1e>
 800b698:	0800c4fc 	.word	0x0800c4fc
 800b69c:	0800c4fc 	.word	0x0800c4fc
 800b6a0:	0800c4fc 	.word	0x0800c4fc
 800b6a4:	0800c500 	.word	0x0800c500

0800b6a8 <__retarget_lock_init_recursive>:
 800b6a8:	4770      	bx	lr

0800b6aa <__retarget_lock_acquire_recursive>:
 800b6aa:	4770      	bx	lr

0800b6ac <__retarget_lock_release_recursive>:
 800b6ac:	4770      	bx	lr

0800b6ae <memcpy>:
 800b6ae:	440a      	add	r2, r1
 800b6b0:	4291      	cmp	r1, r2
 800b6b2:	f100 33ff 	add.w	r3, r0, #4294967295
 800b6b6:	d100      	bne.n	800b6ba <memcpy+0xc>
 800b6b8:	4770      	bx	lr
 800b6ba:	b510      	push	{r4, lr}
 800b6bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6c4:	4291      	cmp	r1, r2
 800b6c6:	d1f9      	bne.n	800b6bc <memcpy+0xe>
 800b6c8:	bd10      	pop	{r4, pc}
	...

0800b6cc <_free_r>:
 800b6cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6ce:	2900      	cmp	r1, #0
 800b6d0:	d044      	beq.n	800b75c <_free_r+0x90>
 800b6d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6d6:	9001      	str	r0, [sp, #4]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	f1a1 0404 	sub.w	r4, r1, #4
 800b6de:	bfb8      	it	lt
 800b6e0:	18e4      	addlt	r4, r4, r3
 800b6e2:	f000 f8df 	bl	800b8a4 <__malloc_lock>
 800b6e6:	4a1e      	ldr	r2, [pc, #120]	; (800b760 <_free_r+0x94>)
 800b6e8:	9801      	ldr	r0, [sp, #4]
 800b6ea:	6813      	ldr	r3, [r2, #0]
 800b6ec:	b933      	cbnz	r3, 800b6fc <_free_r+0x30>
 800b6ee:	6063      	str	r3, [r4, #4]
 800b6f0:	6014      	str	r4, [r2, #0]
 800b6f2:	b003      	add	sp, #12
 800b6f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6f8:	f000 b8da 	b.w	800b8b0 <__malloc_unlock>
 800b6fc:	42a3      	cmp	r3, r4
 800b6fe:	d908      	bls.n	800b712 <_free_r+0x46>
 800b700:	6825      	ldr	r5, [r4, #0]
 800b702:	1961      	adds	r1, r4, r5
 800b704:	428b      	cmp	r3, r1
 800b706:	bf01      	itttt	eq
 800b708:	6819      	ldreq	r1, [r3, #0]
 800b70a:	685b      	ldreq	r3, [r3, #4]
 800b70c:	1949      	addeq	r1, r1, r5
 800b70e:	6021      	streq	r1, [r4, #0]
 800b710:	e7ed      	b.n	800b6ee <_free_r+0x22>
 800b712:	461a      	mov	r2, r3
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	b10b      	cbz	r3, 800b71c <_free_r+0x50>
 800b718:	42a3      	cmp	r3, r4
 800b71a:	d9fa      	bls.n	800b712 <_free_r+0x46>
 800b71c:	6811      	ldr	r1, [r2, #0]
 800b71e:	1855      	adds	r5, r2, r1
 800b720:	42a5      	cmp	r5, r4
 800b722:	d10b      	bne.n	800b73c <_free_r+0x70>
 800b724:	6824      	ldr	r4, [r4, #0]
 800b726:	4421      	add	r1, r4
 800b728:	1854      	adds	r4, r2, r1
 800b72a:	42a3      	cmp	r3, r4
 800b72c:	6011      	str	r1, [r2, #0]
 800b72e:	d1e0      	bne.n	800b6f2 <_free_r+0x26>
 800b730:	681c      	ldr	r4, [r3, #0]
 800b732:	685b      	ldr	r3, [r3, #4]
 800b734:	6053      	str	r3, [r2, #4]
 800b736:	440c      	add	r4, r1
 800b738:	6014      	str	r4, [r2, #0]
 800b73a:	e7da      	b.n	800b6f2 <_free_r+0x26>
 800b73c:	d902      	bls.n	800b744 <_free_r+0x78>
 800b73e:	230c      	movs	r3, #12
 800b740:	6003      	str	r3, [r0, #0]
 800b742:	e7d6      	b.n	800b6f2 <_free_r+0x26>
 800b744:	6825      	ldr	r5, [r4, #0]
 800b746:	1961      	adds	r1, r4, r5
 800b748:	428b      	cmp	r3, r1
 800b74a:	bf04      	itt	eq
 800b74c:	6819      	ldreq	r1, [r3, #0]
 800b74e:	685b      	ldreq	r3, [r3, #4]
 800b750:	6063      	str	r3, [r4, #4]
 800b752:	bf04      	itt	eq
 800b754:	1949      	addeq	r1, r1, r5
 800b756:	6021      	streq	r1, [r4, #0]
 800b758:	6054      	str	r4, [r2, #4]
 800b75a:	e7ca      	b.n	800b6f2 <_free_r+0x26>
 800b75c:	b003      	add	sp, #12
 800b75e:	bd30      	pop	{r4, r5, pc}
 800b760:	20002834 	.word	0x20002834

0800b764 <sbrk_aligned>:
 800b764:	b570      	push	{r4, r5, r6, lr}
 800b766:	4e0e      	ldr	r6, [pc, #56]	; (800b7a0 <sbrk_aligned+0x3c>)
 800b768:	460c      	mov	r4, r1
 800b76a:	6831      	ldr	r1, [r6, #0]
 800b76c:	4605      	mov	r5, r0
 800b76e:	b911      	cbnz	r1, 800b776 <sbrk_aligned+0x12>
 800b770:	f000 fcaa 	bl	800c0c8 <_sbrk_r>
 800b774:	6030      	str	r0, [r6, #0]
 800b776:	4621      	mov	r1, r4
 800b778:	4628      	mov	r0, r5
 800b77a:	f000 fca5 	bl	800c0c8 <_sbrk_r>
 800b77e:	1c43      	adds	r3, r0, #1
 800b780:	d00a      	beq.n	800b798 <sbrk_aligned+0x34>
 800b782:	1cc4      	adds	r4, r0, #3
 800b784:	f024 0403 	bic.w	r4, r4, #3
 800b788:	42a0      	cmp	r0, r4
 800b78a:	d007      	beq.n	800b79c <sbrk_aligned+0x38>
 800b78c:	1a21      	subs	r1, r4, r0
 800b78e:	4628      	mov	r0, r5
 800b790:	f000 fc9a 	bl	800c0c8 <_sbrk_r>
 800b794:	3001      	adds	r0, #1
 800b796:	d101      	bne.n	800b79c <sbrk_aligned+0x38>
 800b798:	f04f 34ff 	mov.w	r4, #4294967295
 800b79c:	4620      	mov	r0, r4
 800b79e:	bd70      	pop	{r4, r5, r6, pc}
 800b7a0:	20002838 	.word	0x20002838

0800b7a4 <_malloc_r>:
 800b7a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7a8:	1ccd      	adds	r5, r1, #3
 800b7aa:	f025 0503 	bic.w	r5, r5, #3
 800b7ae:	3508      	adds	r5, #8
 800b7b0:	2d0c      	cmp	r5, #12
 800b7b2:	bf38      	it	cc
 800b7b4:	250c      	movcc	r5, #12
 800b7b6:	2d00      	cmp	r5, #0
 800b7b8:	4607      	mov	r7, r0
 800b7ba:	db01      	blt.n	800b7c0 <_malloc_r+0x1c>
 800b7bc:	42a9      	cmp	r1, r5
 800b7be:	d905      	bls.n	800b7cc <_malloc_r+0x28>
 800b7c0:	230c      	movs	r3, #12
 800b7c2:	603b      	str	r3, [r7, #0]
 800b7c4:	2600      	movs	r6, #0
 800b7c6:	4630      	mov	r0, r6
 800b7c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b8a0 <_malloc_r+0xfc>
 800b7d0:	f000 f868 	bl	800b8a4 <__malloc_lock>
 800b7d4:	f8d8 3000 	ldr.w	r3, [r8]
 800b7d8:	461c      	mov	r4, r3
 800b7da:	bb5c      	cbnz	r4, 800b834 <_malloc_r+0x90>
 800b7dc:	4629      	mov	r1, r5
 800b7de:	4638      	mov	r0, r7
 800b7e0:	f7ff ffc0 	bl	800b764 <sbrk_aligned>
 800b7e4:	1c43      	adds	r3, r0, #1
 800b7e6:	4604      	mov	r4, r0
 800b7e8:	d155      	bne.n	800b896 <_malloc_r+0xf2>
 800b7ea:	f8d8 4000 	ldr.w	r4, [r8]
 800b7ee:	4626      	mov	r6, r4
 800b7f0:	2e00      	cmp	r6, #0
 800b7f2:	d145      	bne.n	800b880 <_malloc_r+0xdc>
 800b7f4:	2c00      	cmp	r4, #0
 800b7f6:	d048      	beq.n	800b88a <_malloc_r+0xe6>
 800b7f8:	6823      	ldr	r3, [r4, #0]
 800b7fa:	4631      	mov	r1, r6
 800b7fc:	4638      	mov	r0, r7
 800b7fe:	eb04 0903 	add.w	r9, r4, r3
 800b802:	f000 fc61 	bl	800c0c8 <_sbrk_r>
 800b806:	4581      	cmp	r9, r0
 800b808:	d13f      	bne.n	800b88a <_malloc_r+0xe6>
 800b80a:	6821      	ldr	r1, [r4, #0]
 800b80c:	1a6d      	subs	r5, r5, r1
 800b80e:	4629      	mov	r1, r5
 800b810:	4638      	mov	r0, r7
 800b812:	f7ff ffa7 	bl	800b764 <sbrk_aligned>
 800b816:	3001      	adds	r0, #1
 800b818:	d037      	beq.n	800b88a <_malloc_r+0xe6>
 800b81a:	6823      	ldr	r3, [r4, #0]
 800b81c:	442b      	add	r3, r5
 800b81e:	6023      	str	r3, [r4, #0]
 800b820:	f8d8 3000 	ldr.w	r3, [r8]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d038      	beq.n	800b89a <_malloc_r+0xf6>
 800b828:	685a      	ldr	r2, [r3, #4]
 800b82a:	42a2      	cmp	r2, r4
 800b82c:	d12b      	bne.n	800b886 <_malloc_r+0xe2>
 800b82e:	2200      	movs	r2, #0
 800b830:	605a      	str	r2, [r3, #4]
 800b832:	e00f      	b.n	800b854 <_malloc_r+0xb0>
 800b834:	6822      	ldr	r2, [r4, #0]
 800b836:	1b52      	subs	r2, r2, r5
 800b838:	d41f      	bmi.n	800b87a <_malloc_r+0xd6>
 800b83a:	2a0b      	cmp	r2, #11
 800b83c:	d917      	bls.n	800b86e <_malloc_r+0xca>
 800b83e:	1961      	adds	r1, r4, r5
 800b840:	42a3      	cmp	r3, r4
 800b842:	6025      	str	r5, [r4, #0]
 800b844:	bf18      	it	ne
 800b846:	6059      	strne	r1, [r3, #4]
 800b848:	6863      	ldr	r3, [r4, #4]
 800b84a:	bf08      	it	eq
 800b84c:	f8c8 1000 	streq.w	r1, [r8]
 800b850:	5162      	str	r2, [r4, r5]
 800b852:	604b      	str	r3, [r1, #4]
 800b854:	4638      	mov	r0, r7
 800b856:	f104 060b 	add.w	r6, r4, #11
 800b85a:	f000 f829 	bl	800b8b0 <__malloc_unlock>
 800b85e:	f026 0607 	bic.w	r6, r6, #7
 800b862:	1d23      	adds	r3, r4, #4
 800b864:	1af2      	subs	r2, r6, r3
 800b866:	d0ae      	beq.n	800b7c6 <_malloc_r+0x22>
 800b868:	1b9b      	subs	r3, r3, r6
 800b86a:	50a3      	str	r3, [r4, r2]
 800b86c:	e7ab      	b.n	800b7c6 <_malloc_r+0x22>
 800b86e:	42a3      	cmp	r3, r4
 800b870:	6862      	ldr	r2, [r4, #4]
 800b872:	d1dd      	bne.n	800b830 <_malloc_r+0x8c>
 800b874:	f8c8 2000 	str.w	r2, [r8]
 800b878:	e7ec      	b.n	800b854 <_malloc_r+0xb0>
 800b87a:	4623      	mov	r3, r4
 800b87c:	6864      	ldr	r4, [r4, #4]
 800b87e:	e7ac      	b.n	800b7da <_malloc_r+0x36>
 800b880:	4634      	mov	r4, r6
 800b882:	6876      	ldr	r6, [r6, #4]
 800b884:	e7b4      	b.n	800b7f0 <_malloc_r+0x4c>
 800b886:	4613      	mov	r3, r2
 800b888:	e7cc      	b.n	800b824 <_malloc_r+0x80>
 800b88a:	230c      	movs	r3, #12
 800b88c:	603b      	str	r3, [r7, #0]
 800b88e:	4638      	mov	r0, r7
 800b890:	f000 f80e 	bl	800b8b0 <__malloc_unlock>
 800b894:	e797      	b.n	800b7c6 <_malloc_r+0x22>
 800b896:	6025      	str	r5, [r4, #0]
 800b898:	e7dc      	b.n	800b854 <_malloc_r+0xb0>
 800b89a:	605b      	str	r3, [r3, #4]
 800b89c:	deff      	udf	#255	; 0xff
 800b89e:	bf00      	nop
 800b8a0:	20002834 	.word	0x20002834

0800b8a4 <__malloc_lock>:
 800b8a4:	4801      	ldr	r0, [pc, #4]	; (800b8ac <__malloc_lock+0x8>)
 800b8a6:	f7ff bf00 	b.w	800b6aa <__retarget_lock_acquire_recursive>
 800b8aa:	bf00      	nop
 800b8ac:	20002830 	.word	0x20002830

0800b8b0 <__malloc_unlock>:
 800b8b0:	4801      	ldr	r0, [pc, #4]	; (800b8b8 <__malloc_unlock+0x8>)
 800b8b2:	f7ff befb 	b.w	800b6ac <__retarget_lock_release_recursive>
 800b8b6:	bf00      	nop
 800b8b8:	20002830 	.word	0x20002830

0800b8bc <__sfputc_r>:
 800b8bc:	6893      	ldr	r3, [r2, #8]
 800b8be:	3b01      	subs	r3, #1
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	b410      	push	{r4}
 800b8c4:	6093      	str	r3, [r2, #8]
 800b8c6:	da08      	bge.n	800b8da <__sfputc_r+0x1e>
 800b8c8:	6994      	ldr	r4, [r2, #24]
 800b8ca:	42a3      	cmp	r3, r4
 800b8cc:	db01      	blt.n	800b8d2 <__sfputc_r+0x16>
 800b8ce:	290a      	cmp	r1, #10
 800b8d0:	d103      	bne.n	800b8da <__sfputc_r+0x1e>
 800b8d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8d6:	f7ff bd84 	b.w	800b3e2 <__swbuf_r>
 800b8da:	6813      	ldr	r3, [r2, #0]
 800b8dc:	1c58      	adds	r0, r3, #1
 800b8de:	6010      	str	r0, [r2, #0]
 800b8e0:	7019      	strb	r1, [r3, #0]
 800b8e2:	4608      	mov	r0, r1
 800b8e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8e8:	4770      	bx	lr

0800b8ea <__sfputs_r>:
 800b8ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ec:	4606      	mov	r6, r0
 800b8ee:	460f      	mov	r7, r1
 800b8f0:	4614      	mov	r4, r2
 800b8f2:	18d5      	adds	r5, r2, r3
 800b8f4:	42ac      	cmp	r4, r5
 800b8f6:	d101      	bne.n	800b8fc <__sfputs_r+0x12>
 800b8f8:	2000      	movs	r0, #0
 800b8fa:	e007      	b.n	800b90c <__sfputs_r+0x22>
 800b8fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b900:	463a      	mov	r2, r7
 800b902:	4630      	mov	r0, r6
 800b904:	f7ff ffda 	bl	800b8bc <__sfputc_r>
 800b908:	1c43      	adds	r3, r0, #1
 800b90a:	d1f3      	bne.n	800b8f4 <__sfputs_r+0xa>
 800b90c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b910 <_vfiprintf_r>:
 800b910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b914:	460d      	mov	r5, r1
 800b916:	b09d      	sub	sp, #116	; 0x74
 800b918:	4614      	mov	r4, r2
 800b91a:	4698      	mov	r8, r3
 800b91c:	4606      	mov	r6, r0
 800b91e:	b118      	cbz	r0, 800b928 <_vfiprintf_r+0x18>
 800b920:	6a03      	ldr	r3, [r0, #32]
 800b922:	b90b      	cbnz	r3, 800b928 <_vfiprintf_r+0x18>
 800b924:	f7ff fc76 	bl	800b214 <__sinit>
 800b928:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b92a:	07d9      	lsls	r1, r3, #31
 800b92c:	d405      	bmi.n	800b93a <_vfiprintf_r+0x2a>
 800b92e:	89ab      	ldrh	r3, [r5, #12]
 800b930:	059a      	lsls	r2, r3, #22
 800b932:	d402      	bmi.n	800b93a <_vfiprintf_r+0x2a>
 800b934:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b936:	f7ff feb8 	bl	800b6aa <__retarget_lock_acquire_recursive>
 800b93a:	89ab      	ldrh	r3, [r5, #12]
 800b93c:	071b      	lsls	r3, r3, #28
 800b93e:	d501      	bpl.n	800b944 <_vfiprintf_r+0x34>
 800b940:	692b      	ldr	r3, [r5, #16]
 800b942:	b99b      	cbnz	r3, 800b96c <_vfiprintf_r+0x5c>
 800b944:	4629      	mov	r1, r5
 800b946:	4630      	mov	r0, r6
 800b948:	f7ff fd88 	bl	800b45c <__swsetup_r>
 800b94c:	b170      	cbz	r0, 800b96c <_vfiprintf_r+0x5c>
 800b94e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b950:	07dc      	lsls	r4, r3, #31
 800b952:	d504      	bpl.n	800b95e <_vfiprintf_r+0x4e>
 800b954:	f04f 30ff 	mov.w	r0, #4294967295
 800b958:	b01d      	add	sp, #116	; 0x74
 800b95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b95e:	89ab      	ldrh	r3, [r5, #12]
 800b960:	0598      	lsls	r0, r3, #22
 800b962:	d4f7      	bmi.n	800b954 <_vfiprintf_r+0x44>
 800b964:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b966:	f7ff fea1 	bl	800b6ac <__retarget_lock_release_recursive>
 800b96a:	e7f3      	b.n	800b954 <_vfiprintf_r+0x44>
 800b96c:	2300      	movs	r3, #0
 800b96e:	9309      	str	r3, [sp, #36]	; 0x24
 800b970:	2320      	movs	r3, #32
 800b972:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b976:	f8cd 800c 	str.w	r8, [sp, #12]
 800b97a:	2330      	movs	r3, #48	; 0x30
 800b97c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bb30 <_vfiprintf_r+0x220>
 800b980:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b984:	f04f 0901 	mov.w	r9, #1
 800b988:	4623      	mov	r3, r4
 800b98a:	469a      	mov	sl, r3
 800b98c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b990:	b10a      	cbz	r2, 800b996 <_vfiprintf_r+0x86>
 800b992:	2a25      	cmp	r2, #37	; 0x25
 800b994:	d1f9      	bne.n	800b98a <_vfiprintf_r+0x7a>
 800b996:	ebba 0b04 	subs.w	fp, sl, r4
 800b99a:	d00b      	beq.n	800b9b4 <_vfiprintf_r+0xa4>
 800b99c:	465b      	mov	r3, fp
 800b99e:	4622      	mov	r2, r4
 800b9a0:	4629      	mov	r1, r5
 800b9a2:	4630      	mov	r0, r6
 800b9a4:	f7ff ffa1 	bl	800b8ea <__sfputs_r>
 800b9a8:	3001      	adds	r0, #1
 800b9aa:	f000 80a9 	beq.w	800bb00 <_vfiprintf_r+0x1f0>
 800b9ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9b0:	445a      	add	r2, fp
 800b9b2:	9209      	str	r2, [sp, #36]	; 0x24
 800b9b4:	f89a 3000 	ldrb.w	r3, [sl]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	f000 80a1 	beq.w	800bb00 <_vfiprintf_r+0x1f0>
 800b9be:	2300      	movs	r3, #0
 800b9c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b9c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9c8:	f10a 0a01 	add.w	sl, sl, #1
 800b9cc:	9304      	str	r3, [sp, #16]
 800b9ce:	9307      	str	r3, [sp, #28]
 800b9d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9d4:	931a      	str	r3, [sp, #104]	; 0x68
 800b9d6:	4654      	mov	r4, sl
 800b9d8:	2205      	movs	r2, #5
 800b9da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9de:	4854      	ldr	r0, [pc, #336]	; (800bb30 <_vfiprintf_r+0x220>)
 800b9e0:	f7f4 fbfe 	bl	80001e0 <memchr>
 800b9e4:	9a04      	ldr	r2, [sp, #16]
 800b9e6:	b9d8      	cbnz	r0, 800ba20 <_vfiprintf_r+0x110>
 800b9e8:	06d1      	lsls	r1, r2, #27
 800b9ea:	bf44      	itt	mi
 800b9ec:	2320      	movmi	r3, #32
 800b9ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9f2:	0713      	lsls	r3, r2, #28
 800b9f4:	bf44      	itt	mi
 800b9f6:	232b      	movmi	r3, #43	; 0x2b
 800b9f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9fc:	f89a 3000 	ldrb.w	r3, [sl]
 800ba00:	2b2a      	cmp	r3, #42	; 0x2a
 800ba02:	d015      	beq.n	800ba30 <_vfiprintf_r+0x120>
 800ba04:	9a07      	ldr	r2, [sp, #28]
 800ba06:	4654      	mov	r4, sl
 800ba08:	2000      	movs	r0, #0
 800ba0a:	f04f 0c0a 	mov.w	ip, #10
 800ba0e:	4621      	mov	r1, r4
 800ba10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba14:	3b30      	subs	r3, #48	; 0x30
 800ba16:	2b09      	cmp	r3, #9
 800ba18:	d94d      	bls.n	800bab6 <_vfiprintf_r+0x1a6>
 800ba1a:	b1b0      	cbz	r0, 800ba4a <_vfiprintf_r+0x13a>
 800ba1c:	9207      	str	r2, [sp, #28]
 800ba1e:	e014      	b.n	800ba4a <_vfiprintf_r+0x13a>
 800ba20:	eba0 0308 	sub.w	r3, r0, r8
 800ba24:	fa09 f303 	lsl.w	r3, r9, r3
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	9304      	str	r3, [sp, #16]
 800ba2c:	46a2      	mov	sl, r4
 800ba2e:	e7d2      	b.n	800b9d6 <_vfiprintf_r+0xc6>
 800ba30:	9b03      	ldr	r3, [sp, #12]
 800ba32:	1d19      	adds	r1, r3, #4
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	9103      	str	r1, [sp, #12]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	bfbb      	ittet	lt
 800ba3c:	425b      	neglt	r3, r3
 800ba3e:	f042 0202 	orrlt.w	r2, r2, #2
 800ba42:	9307      	strge	r3, [sp, #28]
 800ba44:	9307      	strlt	r3, [sp, #28]
 800ba46:	bfb8      	it	lt
 800ba48:	9204      	strlt	r2, [sp, #16]
 800ba4a:	7823      	ldrb	r3, [r4, #0]
 800ba4c:	2b2e      	cmp	r3, #46	; 0x2e
 800ba4e:	d10c      	bne.n	800ba6a <_vfiprintf_r+0x15a>
 800ba50:	7863      	ldrb	r3, [r4, #1]
 800ba52:	2b2a      	cmp	r3, #42	; 0x2a
 800ba54:	d134      	bne.n	800bac0 <_vfiprintf_r+0x1b0>
 800ba56:	9b03      	ldr	r3, [sp, #12]
 800ba58:	1d1a      	adds	r2, r3, #4
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	9203      	str	r2, [sp, #12]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	bfb8      	it	lt
 800ba62:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba66:	3402      	adds	r4, #2
 800ba68:	9305      	str	r3, [sp, #20]
 800ba6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bb40 <_vfiprintf_r+0x230>
 800ba6e:	7821      	ldrb	r1, [r4, #0]
 800ba70:	2203      	movs	r2, #3
 800ba72:	4650      	mov	r0, sl
 800ba74:	f7f4 fbb4 	bl	80001e0 <memchr>
 800ba78:	b138      	cbz	r0, 800ba8a <_vfiprintf_r+0x17a>
 800ba7a:	9b04      	ldr	r3, [sp, #16]
 800ba7c:	eba0 000a 	sub.w	r0, r0, sl
 800ba80:	2240      	movs	r2, #64	; 0x40
 800ba82:	4082      	lsls	r2, r0
 800ba84:	4313      	orrs	r3, r2
 800ba86:	3401      	adds	r4, #1
 800ba88:	9304      	str	r3, [sp, #16]
 800ba8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba8e:	4829      	ldr	r0, [pc, #164]	; (800bb34 <_vfiprintf_r+0x224>)
 800ba90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba94:	2206      	movs	r2, #6
 800ba96:	f7f4 fba3 	bl	80001e0 <memchr>
 800ba9a:	2800      	cmp	r0, #0
 800ba9c:	d03f      	beq.n	800bb1e <_vfiprintf_r+0x20e>
 800ba9e:	4b26      	ldr	r3, [pc, #152]	; (800bb38 <_vfiprintf_r+0x228>)
 800baa0:	bb1b      	cbnz	r3, 800baea <_vfiprintf_r+0x1da>
 800baa2:	9b03      	ldr	r3, [sp, #12]
 800baa4:	3307      	adds	r3, #7
 800baa6:	f023 0307 	bic.w	r3, r3, #7
 800baaa:	3308      	adds	r3, #8
 800baac:	9303      	str	r3, [sp, #12]
 800baae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bab0:	443b      	add	r3, r7
 800bab2:	9309      	str	r3, [sp, #36]	; 0x24
 800bab4:	e768      	b.n	800b988 <_vfiprintf_r+0x78>
 800bab6:	fb0c 3202 	mla	r2, ip, r2, r3
 800baba:	460c      	mov	r4, r1
 800babc:	2001      	movs	r0, #1
 800babe:	e7a6      	b.n	800ba0e <_vfiprintf_r+0xfe>
 800bac0:	2300      	movs	r3, #0
 800bac2:	3401      	adds	r4, #1
 800bac4:	9305      	str	r3, [sp, #20]
 800bac6:	4619      	mov	r1, r3
 800bac8:	f04f 0c0a 	mov.w	ip, #10
 800bacc:	4620      	mov	r0, r4
 800bace:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bad2:	3a30      	subs	r2, #48	; 0x30
 800bad4:	2a09      	cmp	r2, #9
 800bad6:	d903      	bls.n	800bae0 <_vfiprintf_r+0x1d0>
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d0c6      	beq.n	800ba6a <_vfiprintf_r+0x15a>
 800badc:	9105      	str	r1, [sp, #20]
 800bade:	e7c4      	b.n	800ba6a <_vfiprintf_r+0x15a>
 800bae0:	fb0c 2101 	mla	r1, ip, r1, r2
 800bae4:	4604      	mov	r4, r0
 800bae6:	2301      	movs	r3, #1
 800bae8:	e7f0      	b.n	800bacc <_vfiprintf_r+0x1bc>
 800baea:	ab03      	add	r3, sp, #12
 800baec:	9300      	str	r3, [sp, #0]
 800baee:	462a      	mov	r2, r5
 800baf0:	4b12      	ldr	r3, [pc, #72]	; (800bb3c <_vfiprintf_r+0x22c>)
 800baf2:	a904      	add	r1, sp, #16
 800baf4:	4630      	mov	r0, r6
 800baf6:	f3af 8000 	nop.w
 800bafa:	4607      	mov	r7, r0
 800bafc:	1c78      	adds	r0, r7, #1
 800bafe:	d1d6      	bne.n	800baae <_vfiprintf_r+0x19e>
 800bb00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb02:	07d9      	lsls	r1, r3, #31
 800bb04:	d405      	bmi.n	800bb12 <_vfiprintf_r+0x202>
 800bb06:	89ab      	ldrh	r3, [r5, #12]
 800bb08:	059a      	lsls	r2, r3, #22
 800bb0a:	d402      	bmi.n	800bb12 <_vfiprintf_r+0x202>
 800bb0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb0e:	f7ff fdcd 	bl	800b6ac <__retarget_lock_release_recursive>
 800bb12:	89ab      	ldrh	r3, [r5, #12]
 800bb14:	065b      	lsls	r3, r3, #25
 800bb16:	f53f af1d 	bmi.w	800b954 <_vfiprintf_r+0x44>
 800bb1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb1c:	e71c      	b.n	800b958 <_vfiprintf_r+0x48>
 800bb1e:	ab03      	add	r3, sp, #12
 800bb20:	9300      	str	r3, [sp, #0]
 800bb22:	462a      	mov	r2, r5
 800bb24:	4b05      	ldr	r3, [pc, #20]	; (800bb3c <_vfiprintf_r+0x22c>)
 800bb26:	a904      	add	r1, sp, #16
 800bb28:	4630      	mov	r0, r6
 800bb2a:	f000 f879 	bl	800bc20 <_printf_i>
 800bb2e:	e7e4      	b.n	800bafa <_vfiprintf_r+0x1ea>
 800bb30:	0800c4c8 	.word	0x0800c4c8
 800bb34:	0800c4d2 	.word	0x0800c4d2
 800bb38:	00000000 	.word	0x00000000
 800bb3c:	0800b8eb 	.word	0x0800b8eb
 800bb40:	0800c4ce 	.word	0x0800c4ce

0800bb44 <_printf_common>:
 800bb44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb48:	4616      	mov	r6, r2
 800bb4a:	4699      	mov	r9, r3
 800bb4c:	688a      	ldr	r2, [r1, #8]
 800bb4e:	690b      	ldr	r3, [r1, #16]
 800bb50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bb54:	4293      	cmp	r3, r2
 800bb56:	bfb8      	it	lt
 800bb58:	4613      	movlt	r3, r2
 800bb5a:	6033      	str	r3, [r6, #0]
 800bb5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bb60:	4607      	mov	r7, r0
 800bb62:	460c      	mov	r4, r1
 800bb64:	b10a      	cbz	r2, 800bb6a <_printf_common+0x26>
 800bb66:	3301      	adds	r3, #1
 800bb68:	6033      	str	r3, [r6, #0]
 800bb6a:	6823      	ldr	r3, [r4, #0]
 800bb6c:	0699      	lsls	r1, r3, #26
 800bb6e:	bf42      	ittt	mi
 800bb70:	6833      	ldrmi	r3, [r6, #0]
 800bb72:	3302      	addmi	r3, #2
 800bb74:	6033      	strmi	r3, [r6, #0]
 800bb76:	6825      	ldr	r5, [r4, #0]
 800bb78:	f015 0506 	ands.w	r5, r5, #6
 800bb7c:	d106      	bne.n	800bb8c <_printf_common+0x48>
 800bb7e:	f104 0a19 	add.w	sl, r4, #25
 800bb82:	68e3      	ldr	r3, [r4, #12]
 800bb84:	6832      	ldr	r2, [r6, #0]
 800bb86:	1a9b      	subs	r3, r3, r2
 800bb88:	42ab      	cmp	r3, r5
 800bb8a:	dc26      	bgt.n	800bbda <_printf_common+0x96>
 800bb8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bb90:	1e13      	subs	r3, r2, #0
 800bb92:	6822      	ldr	r2, [r4, #0]
 800bb94:	bf18      	it	ne
 800bb96:	2301      	movne	r3, #1
 800bb98:	0692      	lsls	r2, r2, #26
 800bb9a:	d42b      	bmi.n	800bbf4 <_printf_common+0xb0>
 800bb9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bba0:	4649      	mov	r1, r9
 800bba2:	4638      	mov	r0, r7
 800bba4:	47c0      	blx	r8
 800bba6:	3001      	adds	r0, #1
 800bba8:	d01e      	beq.n	800bbe8 <_printf_common+0xa4>
 800bbaa:	6823      	ldr	r3, [r4, #0]
 800bbac:	6922      	ldr	r2, [r4, #16]
 800bbae:	f003 0306 	and.w	r3, r3, #6
 800bbb2:	2b04      	cmp	r3, #4
 800bbb4:	bf02      	ittt	eq
 800bbb6:	68e5      	ldreq	r5, [r4, #12]
 800bbb8:	6833      	ldreq	r3, [r6, #0]
 800bbba:	1aed      	subeq	r5, r5, r3
 800bbbc:	68a3      	ldr	r3, [r4, #8]
 800bbbe:	bf0c      	ite	eq
 800bbc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bbc4:	2500      	movne	r5, #0
 800bbc6:	4293      	cmp	r3, r2
 800bbc8:	bfc4      	itt	gt
 800bbca:	1a9b      	subgt	r3, r3, r2
 800bbcc:	18ed      	addgt	r5, r5, r3
 800bbce:	2600      	movs	r6, #0
 800bbd0:	341a      	adds	r4, #26
 800bbd2:	42b5      	cmp	r5, r6
 800bbd4:	d11a      	bne.n	800bc0c <_printf_common+0xc8>
 800bbd6:	2000      	movs	r0, #0
 800bbd8:	e008      	b.n	800bbec <_printf_common+0xa8>
 800bbda:	2301      	movs	r3, #1
 800bbdc:	4652      	mov	r2, sl
 800bbde:	4649      	mov	r1, r9
 800bbe0:	4638      	mov	r0, r7
 800bbe2:	47c0      	blx	r8
 800bbe4:	3001      	adds	r0, #1
 800bbe6:	d103      	bne.n	800bbf0 <_printf_common+0xac>
 800bbe8:	f04f 30ff 	mov.w	r0, #4294967295
 800bbec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbf0:	3501      	adds	r5, #1
 800bbf2:	e7c6      	b.n	800bb82 <_printf_common+0x3e>
 800bbf4:	18e1      	adds	r1, r4, r3
 800bbf6:	1c5a      	adds	r2, r3, #1
 800bbf8:	2030      	movs	r0, #48	; 0x30
 800bbfa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bbfe:	4422      	add	r2, r4
 800bc00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bc04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bc08:	3302      	adds	r3, #2
 800bc0a:	e7c7      	b.n	800bb9c <_printf_common+0x58>
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	4622      	mov	r2, r4
 800bc10:	4649      	mov	r1, r9
 800bc12:	4638      	mov	r0, r7
 800bc14:	47c0      	blx	r8
 800bc16:	3001      	adds	r0, #1
 800bc18:	d0e6      	beq.n	800bbe8 <_printf_common+0xa4>
 800bc1a:	3601      	adds	r6, #1
 800bc1c:	e7d9      	b.n	800bbd2 <_printf_common+0x8e>
	...

0800bc20 <_printf_i>:
 800bc20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc24:	7e0f      	ldrb	r7, [r1, #24]
 800bc26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bc28:	2f78      	cmp	r7, #120	; 0x78
 800bc2a:	4691      	mov	r9, r2
 800bc2c:	4680      	mov	r8, r0
 800bc2e:	460c      	mov	r4, r1
 800bc30:	469a      	mov	sl, r3
 800bc32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bc36:	d807      	bhi.n	800bc48 <_printf_i+0x28>
 800bc38:	2f62      	cmp	r7, #98	; 0x62
 800bc3a:	d80a      	bhi.n	800bc52 <_printf_i+0x32>
 800bc3c:	2f00      	cmp	r7, #0
 800bc3e:	f000 80d4 	beq.w	800bdea <_printf_i+0x1ca>
 800bc42:	2f58      	cmp	r7, #88	; 0x58
 800bc44:	f000 80c0 	beq.w	800bdc8 <_printf_i+0x1a8>
 800bc48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bc4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bc50:	e03a      	b.n	800bcc8 <_printf_i+0xa8>
 800bc52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bc56:	2b15      	cmp	r3, #21
 800bc58:	d8f6      	bhi.n	800bc48 <_printf_i+0x28>
 800bc5a:	a101      	add	r1, pc, #4	; (adr r1, 800bc60 <_printf_i+0x40>)
 800bc5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bc60:	0800bcb9 	.word	0x0800bcb9
 800bc64:	0800bccd 	.word	0x0800bccd
 800bc68:	0800bc49 	.word	0x0800bc49
 800bc6c:	0800bc49 	.word	0x0800bc49
 800bc70:	0800bc49 	.word	0x0800bc49
 800bc74:	0800bc49 	.word	0x0800bc49
 800bc78:	0800bccd 	.word	0x0800bccd
 800bc7c:	0800bc49 	.word	0x0800bc49
 800bc80:	0800bc49 	.word	0x0800bc49
 800bc84:	0800bc49 	.word	0x0800bc49
 800bc88:	0800bc49 	.word	0x0800bc49
 800bc8c:	0800bdd1 	.word	0x0800bdd1
 800bc90:	0800bcf9 	.word	0x0800bcf9
 800bc94:	0800bd8b 	.word	0x0800bd8b
 800bc98:	0800bc49 	.word	0x0800bc49
 800bc9c:	0800bc49 	.word	0x0800bc49
 800bca0:	0800bdf3 	.word	0x0800bdf3
 800bca4:	0800bc49 	.word	0x0800bc49
 800bca8:	0800bcf9 	.word	0x0800bcf9
 800bcac:	0800bc49 	.word	0x0800bc49
 800bcb0:	0800bc49 	.word	0x0800bc49
 800bcb4:	0800bd93 	.word	0x0800bd93
 800bcb8:	682b      	ldr	r3, [r5, #0]
 800bcba:	1d1a      	adds	r2, r3, #4
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	602a      	str	r2, [r5, #0]
 800bcc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bcc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bcc8:	2301      	movs	r3, #1
 800bcca:	e09f      	b.n	800be0c <_printf_i+0x1ec>
 800bccc:	6820      	ldr	r0, [r4, #0]
 800bcce:	682b      	ldr	r3, [r5, #0]
 800bcd0:	0607      	lsls	r7, r0, #24
 800bcd2:	f103 0104 	add.w	r1, r3, #4
 800bcd6:	6029      	str	r1, [r5, #0]
 800bcd8:	d501      	bpl.n	800bcde <_printf_i+0xbe>
 800bcda:	681e      	ldr	r6, [r3, #0]
 800bcdc:	e003      	b.n	800bce6 <_printf_i+0xc6>
 800bcde:	0646      	lsls	r6, r0, #25
 800bce0:	d5fb      	bpl.n	800bcda <_printf_i+0xba>
 800bce2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800bce6:	2e00      	cmp	r6, #0
 800bce8:	da03      	bge.n	800bcf2 <_printf_i+0xd2>
 800bcea:	232d      	movs	r3, #45	; 0x2d
 800bcec:	4276      	negs	r6, r6
 800bcee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcf2:	485a      	ldr	r0, [pc, #360]	; (800be5c <_printf_i+0x23c>)
 800bcf4:	230a      	movs	r3, #10
 800bcf6:	e012      	b.n	800bd1e <_printf_i+0xfe>
 800bcf8:	682b      	ldr	r3, [r5, #0]
 800bcfa:	6820      	ldr	r0, [r4, #0]
 800bcfc:	1d19      	adds	r1, r3, #4
 800bcfe:	6029      	str	r1, [r5, #0]
 800bd00:	0605      	lsls	r5, r0, #24
 800bd02:	d501      	bpl.n	800bd08 <_printf_i+0xe8>
 800bd04:	681e      	ldr	r6, [r3, #0]
 800bd06:	e002      	b.n	800bd0e <_printf_i+0xee>
 800bd08:	0641      	lsls	r1, r0, #25
 800bd0a:	d5fb      	bpl.n	800bd04 <_printf_i+0xe4>
 800bd0c:	881e      	ldrh	r6, [r3, #0]
 800bd0e:	4853      	ldr	r0, [pc, #332]	; (800be5c <_printf_i+0x23c>)
 800bd10:	2f6f      	cmp	r7, #111	; 0x6f
 800bd12:	bf0c      	ite	eq
 800bd14:	2308      	moveq	r3, #8
 800bd16:	230a      	movne	r3, #10
 800bd18:	2100      	movs	r1, #0
 800bd1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bd1e:	6865      	ldr	r5, [r4, #4]
 800bd20:	60a5      	str	r5, [r4, #8]
 800bd22:	2d00      	cmp	r5, #0
 800bd24:	bfa2      	ittt	ge
 800bd26:	6821      	ldrge	r1, [r4, #0]
 800bd28:	f021 0104 	bicge.w	r1, r1, #4
 800bd2c:	6021      	strge	r1, [r4, #0]
 800bd2e:	b90e      	cbnz	r6, 800bd34 <_printf_i+0x114>
 800bd30:	2d00      	cmp	r5, #0
 800bd32:	d04b      	beq.n	800bdcc <_printf_i+0x1ac>
 800bd34:	4615      	mov	r5, r2
 800bd36:	fbb6 f1f3 	udiv	r1, r6, r3
 800bd3a:	fb03 6711 	mls	r7, r3, r1, r6
 800bd3e:	5dc7      	ldrb	r7, [r0, r7]
 800bd40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bd44:	4637      	mov	r7, r6
 800bd46:	42bb      	cmp	r3, r7
 800bd48:	460e      	mov	r6, r1
 800bd4a:	d9f4      	bls.n	800bd36 <_printf_i+0x116>
 800bd4c:	2b08      	cmp	r3, #8
 800bd4e:	d10b      	bne.n	800bd68 <_printf_i+0x148>
 800bd50:	6823      	ldr	r3, [r4, #0]
 800bd52:	07de      	lsls	r6, r3, #31
 800bd54:	d508      	bpl.n	800bd68 <_printf_i+0x148>
 800bd56:	6923      	ldr	r3, [r4, #16]
 800bd58:	6861      	ldr	r1, [r4, #4]
 800bd5a:	4299      	cmp	r1, r3
 800bd5c:	bfde      	ittt	le
 800bd5e:	2330      	movle	r3, #48	; 0x30
 800bd60:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bd64:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bd68:	1b52      	subs	r2, r2, r5
 800bd6a:	6122      	str	r2, [r4, #16]
 800bd6c:	f8cd a000 	str.w	sl, [sp]
 800bd70:	464b      	mov	r3, r9
 800bd72:	aa03      	add	r2, sp, #12
 800bd74:	4621      	mov	r1, r4
 800bd76:	4640      	mov	r0, r8
 800bd78:	f7ff fee4 	bl	800bb44 <_printf_common>
 800bd7c:	3001      	adds	r0, #1
 800bd7e:	d14a      	bne.n	800be16 <_printf_i+0x1f6>
 800bd80:	f04f 30ff 	mov.w	r0, #4294967295
 800bd84:	b004      	add	sp, #16
 800bd86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd8a:	6823      	ldr	r3, [r4, #0]
 800bd8c:	f043 0320 	orr.w	r3, r3, #32
 800bd90:	6023      	str	r3, [r4, #0]
 800bd92:	4833      	ldr	r0, [pc, #204]	; (800be60 <_printf_i+0x240>)
 800bd94:	2778      	movs	r7, #120	; 0x78
 800bd96:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bd9a:	6823      	ldr	r3, [r4, #0]
 800bd9c:	6829      	ldr	r1, [r5, #0]
 800bd9e:	061f      	lsls	r7, r3, #24
 800bda0:	f851 6b04 	ldr.w	r6, [r1], #4
 800bda4:	d402      	bmi.n	800bdac <_printf_i+0x18c>
 800bda6:	065f      	lsls	r7, r3, #25
 800bda8:	bf48      	it	mi
 800bdaa:	b2b6      	uxthmi	r6, r6
 800bdac:	07df      	lsls	r7, r3, #31
 800bdae:	bf48      	it	mi
 800bdb0:	f043 0320 	orrmi.w	r3, r3, #32
 800bdb4:	6029      	str	r1, [r5, #0]
 800bdb6:	bf48      	it	mi
 800bdb8:	6023      	strmi	r3, [r4, #0]
 800bdba:	b91e      	cbnz	r6, 800bdc4 <_printf_i+0x1a4>
 800bdbc:	6823      	ldr	r3, [r4, #0]
 800bdbe:	f023 0320 	bic.w	r3, r3, #32
 800bdc2:	6023      	str	r3, [r4, #0]
 800bdc4:	2310      	movs	r3, #16
 800bdc6:	e7a7      	b.n	800bd18 <_printf_i+0xf8>
 800bdc8:	4824      	ldr	r0, [pc, #144]	; (800be5c <_printf_i+0x23c>)
 800bdca:	e7e4      	b.n	800bd96 <_printf_i+0x176>
 800bdcc:	4615      	mov	r5, r2
 800bdce:	e7bd      	b.n	800bd4c <_printf_i+0x12c>
 800bdd0:	682b      	ldr	r3, [r5, #0]
 800bdd2:	6826      	ldr	r6, [r4, #0]
 800bdd4:	6961      	ldr	r1, [r4, #20]
 800bdd6:	1d18      	adds	r0, r3, #4
 800bdd8:	6028      	str	r0, [r5, #0]
 800bdda:	0635      	lsls	r5, r6, #24
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	d501      	bpl.n	800bde4 <_printf_i+0x1c4>
 800bde0:	6019      	str	r1, [r3, #0]
 800bde2:	e002      	b.n	800bdea <_printf_i+0x1ca>
 800bde4:	0670      	lsls	r0, r6, #25
 800bde6:	d5fb      	bpl.n	800bde0 <_printf_i+0x1c0>
 800bde8:	8019      	strh	r1, [r3, #0]
 800bdea:	2300      	movs	r3, #0
 800bdec:	6123      	str	r3, [r4, #16]
 800bdee:	4615      	mov	r5, r2
 800bdf0:	e7bc      	b.n	800bd6c <_printf_i+0x14c>
 800bdf2:	682b      	ldr	r3, [r5, #0]
 800bdf4:	1d1a      	adds	r2, r3, #4
 800bdf6:	602a      	str	r2, [r5, #0]
 800bdf8:	681d      	ldr	r5, [r3, #0]
 800bdfa:	6862      	ldr	r2, [r4, #4]
 800bdfc:	2100      	movs	r1, #0
 800bdfe:	4628      	mov	r0, r5
 800be00:	f7f4 f9ee 	bl	80001e0 <memchr>
 800be04:	b108      	cbz	r0, 800be0a <_printf_i+0x1ea>
 800be06:	1b40      	subs	r0, r0, r5
 800be08:	6060      	str	r0, [r4, #4]
 800be0a:	6863      	ldr	r3, [r4, #4]
 800be0c:	6123      	str	r3, [r4, #16]
 800be0e:	2300      	movs	r3, #0
 800be10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be14:	e7aa      	b.n	800bd6c <_printf_i+0x14c>
 800be16:	6923      	ldr	r3, [r4, #16]
 800be18:	462a      	mov	r2, r5
 800be1a:	4649      	mov	r1, r9
 800be1c:	4640      	mov	r0, r8
 800be1e:	47d0      	blx	sl
 800be20:	3001      	adds	r0, #1
 800be22:	d0ad      	beq.n	800bd80 <_printf_i+0x160>
 800be24:	6823      	ldr	r3, [r4, #0]
 800be26:	079b      	lsls	r3, r3, #30
 800be28:	d413      	bmi.n	800be52 <_printf_i+0x232>
 800be2a:	68e0      	ldr	r0, [r4, #12]
 800be2c:	9b03      	ldr	r3, [sp, #12]
 800be2e:	4298      	cmp	r0, r3
 800be30:	bfb8      	it	lt
 800be32:	4618      	movlt	r0, r3
 800be34:	e7a6      	b.n	800bd84 <_printf_i+0x164>
 800be36:	2301      	movs	r3, #1
 800be38:	4632      	mov	r2, r6
 800be3a:	4649      	mov	r1, r9
 800be3c:	4640      	mov	r0, r8
 800be3e:	47d0      	blx	sl
 800be40:	3001      	adds	r0, #1
 800be42:	d09d      	beq.n	800bd80 <_printf_i+0x160>
 800be44:	3501      	adds	r5, #1
 800be46:	68e3      	ldr	r3, [r4, #12]
 800be48:	9903      	ldr	r1, [sp, #12]
 800be4a:	1a5b      	subs	r3, r3, r1
 800be4c:	42ab      	cmp	r3, r5
 800be4e:	dcf2      	bgt.n	800be36 <_printf_i+0x216>
 800be50:	e7eb      	b.n	800be2a <_printf_i+0x20a>
 800be52:	2500      	movs	r5, #0
 800be54:	f104 0619 	add.w	r6, r4, #25
 800be58:	e7f5      	b.n	800be46 <_printf_i+0x226>
 800be5a:	bf00      	nop
 800be5c:	0800c4d9 	.word	0x0800c4d9
 800be60:	0800c4ea 	.word	0x0800c4ea

0800be64 <__sflush_r>:
 800be64:	898a      	ldrh	r2, [r1, #12]
 800be66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be6a:	4605      	mov	r5, r0
 800be6c:	0710      	lsls	r0, r2, #28
 800be6e:	460c      	mov	r4, r1
 800be70:	d458      	bmi.n	800bf24 <__sflush_r+0xc0>
 800be72:	684b      	ldr	r3, [r1, #4]
 800be74:	2b00      	cmp	r3, #0
 800be76:	dc05      	bgt.n	800be84 <__sflush_r+0x20>
 800be78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	dc02      	bgt.n	800be84 <__sflush_r+0x20>
 800be7e:	2000      	movs	r0, #0
 800be80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800be86:	2e00      	cmp	r6, #0
 800be88:	d0f9      	beq.n	800be7e <__sflush_r+0x1a>
 800be8a:	2300      	movs	r3, #0
 800be8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800be90:	682f      	ldr	r7, [r5, #0]
 800be92:	6a21      	ldr	r1, [r4, #32]
 800be94:	602b      	str	r3, [r5, #0]
 800be96:	d032      	beq.n	800befe <__sflush_r+0x9a>
 800be98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800be9a:	89a3      	ldrh	r3, [r4, #12]
 800be9c:	075a      	lsls	r2, r3, #29
 800be9e:	d505      	bpl.n	800beac <__sflush_r+0x48>
 800bea0:	6863      	ldr	r3, [r4, #4]
 800bea2:	1ac0      	subs	r0, r0, r3
 800bea4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bea6:	b10b      	cbz	r3, 800beac <__sflush_r+0x48>
 800bea8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800beaa:	1ac0      	subs	r0, r0, r3
 800beac:	2300      	movs	r3, #0
 800beae:	4602      	mov	r2, r0
 800beb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800beb2:	6a21      	ldr	r1, [r4, #32]
 800beb4:	4628      	mov	r0, r5
 800beb6:	47b0      	blx	r6
 800beb8:	1c43      	adds	r3, r0, #1
 800beba:	89a3      	ldrh	r3, [r4, #12]
 800bebc:	d106      	bne.n	800becc <__sflush_r+0x68>
 800bebe:	6829      	ldr	r1, [r5, #0]
 800bec0:	291d      	cmp	r1, #29
 800bec2:	d82b      	bhi.n	800bf1c <__sflush_r+0xb8>
 800bec4:	4a29      	ldr	r2, [pc, #164]	; (800bf6c <__sflush_r+0x108>)
 800bec6:	410a      	asrs	r2, r1
 800bec8:	07d6      	lsls	r6, r2, #31
 800beca:	d427      	bmi.n	800bf1c <__sflush_r+0xb8>
 800becc:	2200      	movs	r2, #0
 800bece:	6062      	str	r2, [r4, #4]
 800bed0:	04d9      	lsls	r1, r3, #19
 800bed2:	6922      	ldr	r2, [r4, #16]
 800bed4:	6022      	str	r2, [r4, #0]
 800bed6:	d504      	bpl.n	800bee2 <__sflush_r+0x7e>
 800bed8:	1c42      	adds	r2, r0, #1
 800beda:	d101      	bne.n	800bee0 <__sflush_r+0x7c>
 800bedc:	682b      	ldr	r3, [r5, #0]
 800bede:	b903      	cbnz	r3, 800bee2 <__sflush_r+0x7e>
 800bee0:	6560      	str	r0, [r4, #84]	; 0x54
 800bee2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bee4:	602f      	str	r7, [r5, #0]
 800bee6:	2900      	cmp	r1, #0
 800bee8:	d0c9      	beq.n	800be7e <__sflush_r+0x1a>
 800beea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800beee:	4299      	cmp	r1, r3
 800bef0:	d002      	beq.n	800bef8 <__sflush_r+0x94>
 800bef2:	4628      	mov	r0, r5
 800bef4:	f7ff fbea 	bl	800b6cc <_free_r>
 800bef8:	2000      	movs	r0, #0
 800befa:	6360      	str	r0, [r4, #52]	; 0x34
 800befc:	e7c0      	b.n	800be80 <__sflush_r+0x1c>
 800befe:	2301      	movs	r3, #1
 800bf00:	4628      	mov	r0, r5
 800bf02:	47b0      	blx	r6
 800bf04:	1c41      	adds	r1, r0, #1
 800bf06:	d1c8      	bne.n	800be9a <__sflush_r+0x36>
 800bf08:	682b      	ldr	r3, [r5, #0]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d0c5      	beq.n	800be9a <__sflush_r+0x36>
 800bf0e:	2b1d      	cmp	r3, #29
 800bf10:	d001      	beq.n	800bf16 <__sflush_r+0xb2>
 800bf12:	2b16      	cmp	r3, #22
 800bf14:	d101      	bne.n	800bf1a <__sflush_r+0xb6>
 800bf16:	602f      	str	r7, [r5, #0]
 800bf18:	e7b1      	b.n	800be7e <__sflush_r+0x1a>
 800bf1a:	89a3      	ldrh	r3, [r4, #12]
 800bf1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf20:	81a3      	strh	r3, [r4, #12]
 800bf22:	e7ad      	b.n	800be80 <__sflush_r+0x1c>
 800bf24:	690f      	ldr	r7, [r1, #16]
 800bf26:	2f00      	cmp	r7, #0
 800bf28:	d0a9      	beq.n	800be7e <__sflush_r+0x1a>
 800bf2a:	0793      	lsls	r3, r2, #30
 800bf2c:	680e      	ldr	r6, [r1, #0]
 800bf2e:	bf08      	it	eq
 800bf30:	694b      	ldreq	r3, [r1, #20]
 800bf32:	600f      	str	r7, [r1, #0]
 800bf34:	bf18      	it	ne
 800bf36:	2300      	movne	r3, #0
 800bf38:	eba6 0807 	sub.w	r8, r6, r7
 800bf3c:	608b      	str	r3, [r1, #8]
 800bf3e:	f1b8 0f00 	cmp.w	r8, #0
 800bf42:	dd9c      	ble.n	800be7e <__sflush_r+0x1a>
 800bf44:	6a21      	ldr	r1, [r4, #32]
 800bf46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bf48:	4643      	mov	r3, r8
 800bf4a:	463a      	mov	r2, r7
 800bf4c:	4628      	mov	r0, r5
 800bf4e:	47b0      	blx	r6
 800bf50:	2800      	cmp	r0, #0
 800bf52:	dc06      	bgt.n	800bf62 <__sflush_r+0xfe>
 800bf54:	89a3      	ldrh	r3, [r4, #12]
 800bf56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf5a:	81a3      	strh	r3, [r4, #12]
 800bf5c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf60:	e78e      	b.n	800be80 <__sflush_r+0x1c>
 800bf62:	4407      	add	r7, r0
 800bf64:	eba8 0800 	sub.w	r8, r8, r0
 800bf68:	e7e9      	b.n	800bf3e <__sflush_r+0xda>
 800bf6a:	bf00      	nop
 800bf6c:	dfbffffe 	.word	0xdfbffffe

0800bf70 <_fflush_r>:
 800bf70:	b538      	push	{r3, r4, r5, lr}
 800bf72:	690b      	ldr	r3, [r1, #16]
 800bf74:	4605      	mov	r5, r0
 800bf76:	460c      	mov	r4, r1
 800bf78:	b913      	cbnz	r3, 800bf80 <_fflush_r+0x10>
 800bf7a:	2500      	movs	r5, #0
 800bf7c:	4628      	mov	r0, r5
 800bf7e:	bd38      	pop	{r3, r4, r5, pc}
 800bf80:	b118      	cbz	r0, 800bf8a <_fflush_r+0x1a>
 800bf82:	6a03      	ldr	r3, [r0, #32]
 800bf84:	b90b      	cbnz	r3, 800bf8a <_fflush_r+0x1a>
 800bf86:	f7ff f945 	bl	800b214 <__sinit>
 800bf8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d0f3      	beq.n	800bf7a <_fflush_r+0xa>
 800bf92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bf94:	07d0      	lsls	r0, r2, #31
 800bf96:	d404      	bmi.n	800bfa2 <_fflush_r+0x32>
 800bf98:	0599      	lsls	r1, r3, #22
 800bf9a:	d402      	bmi.n	800bfa2 <_fflush_r+0x32>
 800bf9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bf9e:	f7ff fb84 	bl	800b6aa <__retarget_lock_acquire_recursive>
 800bfa2:	4628      	mov	r0, r5
 800bfa4:	4621      	mov	r1, r4
 800bfa6:	f7ff ff5d 	bl	800be64 <__sflush_r>
 800bfaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bfac:	07da      	lsls	r2, r3, #31
 800bfae:	4605      	mov	r5, r0
 800bfb0:	d4e4      	bmi.n	800bf7c <_fflush_r+0xc>
 800bfb2:	89a3      	ldrh	r3, [r4, #12]
 800bfb4:	059b      	lsls	r3, r3, #22
 800bfb6:	d4e1      	bmi.n	800bf7c <_fflush_r+0xc>
 800bfb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bfba:	f7ff fb77 	bl	800b6ac <__retarget_lock_release_recursive>
 800bfbe:	e7dd      	b.n	800bf7c <_fflush_r+0xc>

0800bfc0 <__swhatbuf_r>:
 800bfc0:	b570      	push	{r4, r5, r6, lr}
 800bfc2:	460c      	mov	r4, r1
 800bfc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfc8:	2900      	cmp	r1, #0
 800bfca:	b096      	sub	sp, #88	; 0x58
 800bfcc:	4615      	mov	r5, r2
 800bfce:	461e      	mov	r6, r3
 800bfd0:	da0d      	bge.n	800bfee <__swhatbuf_r+0x2e>
 800bfd2:	89a3      	ldrh	r3, [r4, #12]
 800bfd4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bfd8:	f04f 0100 	mov.w	r1, #0
 800bfdc:	bf0c      	ite	eq
 800bfde:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bfe2:	2340      	movne	r3, #64	; 0x40
 800bfe4:	2000      	movs	r0, #0
 800bfe6:	6031      	str	r1, [r6, #0]
 800bfe8:	602b      	str	r3, [r5, #0]
 800bfea:	b016      	add	sp, #88	; 0x58
 800bfec:	bd70      	pop	{r4, r5, r6, pc}
 800bfee:	466a      	mov	r2, sp
 800bff0:	f000 f848 	bl	800c084 <_fstat_r>
 800bff4:	2800      	cmp	r0, #0
 800bff6:	dbec      	blt.n	800bfd2 <__swhatbuf_r+0x12>
 800bff8:	9901      	ldr	r1, [sp, #4]
 800bffa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bffe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c002:	4259      	negs	r1, r3
 800c004:	4159      	adcs	r1, r3
 800c006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c00a:	e7eb      	b.n	800bfe4 <__swhatbuf_r+0x24>

0800c00c <__smakebuf_r>:
 800c00c:	898b      	ldrh	r3, [r1, #12]
 800c00e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c010:	079d      	lsls	r5, r3, #30
 800c012:	4606      	mov	r6, r0
 800c014:	460c      	mov	r4, r1
 800c016:	d507      	bpl.n	800c028 <__smakebuf_r+0x1c>
 800c018:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c01c:	6023      	str	r3, [r4, #0]
 800c01e:	6123      	str	r3, [r4, #16]
 800c020:	2301      	movs	r3, #1
 800c022:	6163      	str	r3, [r4, #20]
 800c024:	b002      	add	sp, #8
 800c026:	bd70      	pop	{r4, r5, r6, pc}
 800c028:	ab01      	add	r3, sp, #4
 800c02a:	466a      	mov	r2, sp
 800c02c:	f7ff ffc8 	bl	800bfc0 <__swhatbuf_r>
 800c030:	9900      	ldr	r1, [sp, #0]
 800c032:	4605      	mov	r5, r0
 800c034:	4630      	mov	r0, r6
 800c036:	f7ff fbb5 	bl	800b7a4 <_malloc_r>
 800c03a:	b948      	cbnz	r0, 800c050 <__smakebuf_r+0x44>
 800c03c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c040:	059a      	lsls	r2, r3, #22
 800c042:	d4ef      	bmi.n	800c024 <__smakebuf_r+0x18>
 800c044:	f023 0303 	bic.w	r3, r3, #3
 800c048:	f043 0302 	orr.w	r3, r3, #2
 800c04c:	81a3      	strh	r3, [r4, #12]
 800c04e:	e7e3      	b.n	800c018 <__smakebuf_r+0xc>
 800c050:	89a3      	ldrh	r3, [r4, #12]
 800c052:	6020      	str	r0, [r4, #0]
 800c054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c058:	81a3      	strh	r3, [r4, #12]
 800c05a:	9b00      	ldr	r3, [sp, #0]
 800c05c:	6163      	str	r3, [r4, #20]
 800c05e:	9b01      	ldr	r3, [sp, #4]
 800c060:	6120      	str	r0, [r4, #16]
 800c062:	b15b      	cbz	r3, 800c07c <__smakebuf_r+0x70>
 800c064:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c068:	4630      	mov	r0, r6
 800c06a:	f000 f81d 	bl	800c0a8 <_isatty_r>
 800c06e:	b128      	cbz	r0, 800c07c <__smakebuf_r+0x70>
 800c070:	89a3      	ldrh	r3, [r4, #12]
 800c072:	f023 0303 	bic.w	r3, r3, #3
 800c076:	f043 0301 	orr.w	r3, r3, #1
 800c07a:	81a3      	strh	r3, [r4, #12]
 800c07c:	89a3      	ldrh	r3, [r4, #12]
 800c07e:	431d      	orrs	r5, r3
 800c080:	81a5      	strh	r5, [r4, #12]
 800c082:	e7cf      	b.n	800c024 <__smakebuf_r+0x18>

0800c084 <_fstat_r>:
 800c084:	b538      	push	{r3, r4, r5, lr}
 800c086:	4d07      	ldr	r5, [pc, #28]	; (800c0a4 <_fstat_r+0x20>)
 800c088:	2300      	movs	r3, #0
 800c08a:	4604      	mov	r4, r0
 800c08c:	4608      	mov	r0, r1
 800c08e:	4611      	mov	r1, r2
 800c090:	602b      	str	r3, [r5, #0]
 800c092:	f7f4 fd6c 	bl	8000b6e <_fstat>
 800c096:	1c43      	adds	r3, r0, #1
 800c098:	d102      	bne.n	800c0a0 <_fstat_r+0x1c>
 800c09a:	682b      	ldr	r3, [r5, #0]
 800c09c:	b103      	cbz	r3, 800c0a0 <_fstat_r+0x1c>
 800c09e:	6023      	str	r3, [r4, #0]
 800c0a0:	bd38      	pop	{r3, r4, r5, pc}
 800c0a2:	bf00      	nop
 800c0a4:	2000282c 	.word	0x2000282c

0800c0a8 <_isatty_r>:
 800c0a8:	b538      	push	{r3, r4, r5, lr}
 800c0aa:	4d06      	ldr	r5, [pc, #24]	; (800c0c4 <_isatty_r+0x1c>)
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	4604      	mov	r4, r0
 800c0b0:	4608      	mov	r0, r1
 800c0b2:	602b      	str	r3, [r5, #0]
 800c0b4:	f7f4 fd6b 	bl	8000b8e <_isatty>
 800c0b8:	1c43      	adds	r3, r0, #1
 800c0ba:	d102      	bne.n	800c0c2 <_isatty_r+0x1a>
 800c0bc:	682b      	ldr	r3, [r5, #0]
 800c0be:	b103      	cbz	r3, 800c0c2 <_isatty_r+0x1a>
 800c0c0:	6023      	str	r3, [r4, #0]
 800c0c2:	bd38      	pop	{r3, r4, r5, pc}
 800c0c4:	2000282c 	.word	0x2000282c

0800c0c8 <_sbrk_r>:
 800c0c8:	b538      	push	{r3, r4, r5, lr}
 800c0ca:	4d06      	ldr	r5, [pc, #24]	; (800c0e4 <_sbrk_r+0x1c>)
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	4604      	mov	r4, r0
 800c0d0:	4608      	mov	r0, r1
 800c0d2:	602b      	str	r3, [r5, #0]
 800c0d4:	f7f4 fd74 	bl	8000bc0 <_sbrk>
 800c0d8:	1c43      	adds	r3, r0, #1
 800c0da:	d102      	bne.n	800c0e2 <_sbrk_r+0x1a>
 800c0dc:	682b      	ldr	r3, [r5, #0]
 800c0de:	b103      	cbz	r3, 800c0e2 <_sbrk_r+0x1a>
 800c0e0:	6023      	str	r3, [r4, #0]
 800c0e2:	bd38      	pop	{r3, r4, r5, pc}
 800c0e4:	2000282c 	.word	0x2000282c

0800c0e8 <_init>:
 800c0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0ea:	bf00      	nop
 800c0ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0ee:	bc08      	pop	{r3}
 800c0f0:	469e      	mov	lr, r3
 800c0f2:	4770      	bx	lr

0800c0f4 <_fini>:
 800c0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0f6:	bf00      	nop
 800c0f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0fa:	bc08      	pop	{r3}
 800c0fc:	469e      	mov	lr, r3
 800c0fe:	4770      	bx	lr
